# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `wisper` gem.
# Please instead update this file by running `bin/tapioca gem wisper`.

# @api private
#
# source://wisper//lib/wisper/version.rb#1
module Wisper
  class << self
    # @api private
    #
    # source://wisper//lib/wisper.rb#46
    def clear; end

    # @api private
    #
    # source://wisper//lib/wisper.rb#54
    def configuration; end

    # @api private
    # @yield [configuration]
    #
    # source://wisper//lib/wisper.rb#50
    def configure; end

    # @api private
    #
    # source://wisper//lib/wisper.rb#42
    def publisher; end

    # @api private
    #
    # source://wisper//lib/wisper.rb#58
    def setup; end

    # Examples:
    #
    #   Wisper.subscribe(AuditRecorder.new)
    #
    #   Wisper.subscribe(AuditRecorder.new, StatsRecorder.new)
    #
    #   Wisper.subscribe(AuditRecorder.new, on: 'order_created')
    #
    #   Wisper.subscribe(AuditRecorder.new, scope: 'MyPublisher')
    #
    #   Wisper.subscribe(AuditRecorder.new, StatsRecorder.new) do
    #     # ..
    #   end
    #
    # @api private
    #
    # source://wisper//lib/wisper.rb#30
    def subscribe(*args, &block); end

    # @api private
    #
    # source://wisper//lib/wisper.rb#38
    def unsubscribe(*listeners); end
  end
end

# @api private
#
# source://wisper//lib/wisper/registration/block.rb#4
class Wisper::BlockRegistration < ::Wisper::Registration
  # @api private
  #
  # source://wisper//lib/wisper/registration/block.rb#5
  def broadcast(event, publisher, *args); end
end

# source://wisper//lib/wisper/broadcasters/send_broadcaster.rb#2
module Wisper::Broadcasters; end

# source://wisper//lib/wisper/broadcasters/logger_broadcaster.rb#5
class Wisper::Broadcasters::LoggerBroadcaster
  # @return [LoggerBroadcaster] a new instance of LoggerBroadcaster
  #
  # source://wisper//lib/wisper/broadcasters/logger_broadcaster.rb#6
  def initialize(logger, broadcaster); end

  # source://wisper//lib/wisper/broadcasters/logger_broadcaster.rb#11
  def broadcast(listener, publisher, event, args); end

  private

  # source://wisper//lib/wisper/broadcasters/logger_broadcaster.rb#27
  def args_info(args); end

  # source://wisper//lib/wisper/broadcasters/logger_broadcaster.rb#18
  def name(object); end
end

# source://wisper//lib/wisper/broadcasters/send_broadcaster.rb#3
class Wisper::Broadcasters::SendBroadcaster
  # source://wisper//lib/wisper/broadcasters/send_broadcaster.rb#4
  def broadcast(listener, publisher, event, args); end
end

# source://wisper//lib/wisper/configuration.rb#4
class Wisper::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://wisper//lib/wisper/configuration.rb#7
  def initialize; end

  # registers a broadcaster, referenced by key
  #
  # @param key [String, #to_s] an arbitrary key
  # @param broadcaster [#broadcast] a broadcaster
  #
  # source://wisper//lib/wisper/configuration.rb#15
  def broadcaster(key, broadcaster); end

  # Returns the value of attribute broadcasters.
  #
  # source://wisper//lib/wisper/configuration.rb#5
  def broadcasters; end

  # sets the default value for prefixes
  #
  # @param value [#to_s]
  # @return [String]
  #
  # source://wisper//lib/wisper/configuration.rb#25
  def default_prefix=(value); end
end

# source://wisper//lib/wisper/configuration.rb#29
class Wisper::Configuration::Broadcasters
  extend ::Forwardable

  # @return [Broadcasters] a new instance of Broadcasters
  #
  # source://wisper//lib/wisper/configuration.rb#34
  def initialize; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def [](*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def []=(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def clear(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def empty?(*args, **_arg1, &block); end

  # @raise [KeyError]
  #
  # source://wisper//lib/wisper/configuration.rb#38
  def fetch(key); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def include?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def keys(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def to_h(*args, **_arg1, &block); end
end

# source://wisper//lib/wisper/global_listeners.rb#8
class Wisper::GlobalListeners
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # @return [GlobalListeners] a new instance of GlobalListeners
  #
  # source://wisper//lib/wisper/global_listeners.rb#11
  def initialize; end

  # source://wisper//lib/wisper/global_listeners.rb#44
  def clear; end

  # source://wisper//lib/wisper/global_listeners.rb#40
  def listeners; end

  # source://wisper//lib/wisper/global_listeners.rb#36
  def registrations; end

  # source://wisper//lib/wisper/global_listeners.rb#16
  def subscribe(*listeners); end

  # source://wisper//lib/wisper/global_listeners.rb#27
  def unsubscribe(*listeners); end

  private

  # source://wisper//lib/wisper/global_listeners.rb#70
  def with_mutex; end

  class << self
    # source://wisper//lib/wisper/global_listeners.rb#64
    def clear; end

    # source://wisper//lib/wisper/global_listeners.rb#60
    def listeners; end

    # source://wisper//lib/wisper/global_listeners.rb#56
    def registrations; end

    # source://wisper//lib/wisper/global_listeners.rb#48
    def subscribe(*listeners); end

    # source://wisper//lib/wisper/global_listeners.rb#52
    def unsubscribe(*listeners); end

    private

    def allocate; end
    def new(*_arg0); end
  end
end

# @api private
#
# source://wisper//lib/wisper/registration/object.rb#4
class Wisper::ObjectRegistration < ::Wisper::Registration
  # @api private
  # @return [ObjectRegistration] a new instance of ObjectRegistration
  #
  # source://wisper//lib/wisper/registration/object.rb#7
  def initialize(listener, options); end

  # @api private
  #
  # source://wisper//lib/wisper/registration/object.rb#5
  def allowed_classes; end

  # @api private
  #
  # source://wisper//lib/wisper/registration/object.rb#15
  def broadcast(event, publisher, *args); end

  # @api private
  #
  # source://wisper//lib/wisper/registration/object.rb#5
  def broadcaster; end

  # @api private
  #
  # source://wisper//lib/wisper/registration/object.rb#5
  def prefix; end

  # @api private
  #
  # source://wisper//lib/wisper/registration/object.rb#5
  def with; end

  private

  # @api private
  #
  # source://wisper//lib/wisper/registration/object.rb#39
  def configuration; end

  # @api private
  #
  # source://wisper//lib/wisper/registration/object.rb#32
  def map_broadcaster(value); end

  # @api private
  #
  # source://wisper//lib/wisper/registration/object.rb#28
  def map_event_to_method(event); end

  # @api private
  # @return [Boolean]
  #
  # source://wisper//lib/wisper/registration/object.rb#24
  def publisher_in_scope?(publisher); end
end

# source://wisper//lib/wisper/publisher.rb#2
module Wisper::Publisher
  mixes_in_class_methods ::Wisper::Publisher::ClassMethods

  # source://wisper//lib/wisper/publisher.rb#3
  def listeners; end

  # subscribe a block
  #
  # @example
  #   my_publisher.on(:order_created) { |args| ... }
  # @raise [ArgumentError]
  # @return [self]
  #
  # source://wisper//lib/wisper/publisher.rb#25
  def on(*events, &block); end

  # subscribe a listener
  #
  # @example
  #   my_publisher.subscribe(MyListener.new)
  # @raise [ArgumentError]
  # @return [self]
  #
  # source://wisper//lib/wisper/publisher.rb#13
  def subscribe(listener, options = T.unsafe(nil)); end

  private

  # broadcasts an event
  #
  # @example
  #   def call
  #   # ...
  #   broadcast(:finished, self)
  #   end
  # @return [self]
  #
  # source://wisper//lib/wisper/publisher.rb#41
  def broadcast(event, *args); end

  # source://wisper//lib/wisper/publisher.rb#81
  def clean_event(event); end

  # source://wisper//lib/wisper/publisher.rb#69
  def global_registrations; end

  # source://wisper//lib/wisper/publisher.rb#65
  def local_registrations; end

  # broadcasts an event
  #
  # @example
  #   def call
  #   # ...
  #   broadcast(:finished, self)
  #   end
  # @return [self]
  #
  # source://wisper//lib/wisper/publisher.rb#41
  def publish(event, *args); end

  # source://wisper//lib/wisper/publisher.rb#77
  def registrations; end

  # source://wisper//lib/wisper/publisher.rb#73
  def temporary_registrations; end

  class << self
    # @private
    #
    # source://wisper//lib/wisper/publisher.rb#85
    def included(base); end
  end
end

# source://wisper//lib/wisper/publisher.rb#52
module Wisper::Publisher::ClassMethods
  # subscribe a listener
  #
  # @example
  #   MyPublisher.subscribe(MyListener.new)
  #
  # source://wisper//lib/wisper/publisher.rb#58
  def subscribe(listener, options = T.unsafe(nil)); end
end

# @api private
#
# source://wisper//lib/wisper/registration/registration.rb#4
class Wisper::Registration
  # @api private
  # @return [Registration] a new instance of Registration
  #
  # source://wisper//lib/wisper/registration/registration.rb#7
  def initialize(listener, options); end

  # @api private
  #
  # source://wisper//lib/wisper/registration/registration.rb#5
  def listener; end

  # @api private
  #
  # source://wisper//lib/wisper/registration/registration.rb#5
  def on; end

  private

  # @api private
  # @return [Boolean]
  #
  # source://wisper//lib/wisper/registration/registration.rb#14
  def should_broadcast?(event); end
end

# @api private
#
# source://wisper//lib/wisper/temporary_listeners.rb#6
class Wisper::TemporaryListeners
  # @api private
  #
  # source://wisper//lib/wisper/temporary_listeners.rb#27
  def registrations; end

  # @api private
  #
  # source://wisper//lib/wisper/temporary_listeners.rb#15
  def subscribe(*listeners, &_block); end

  private

  # @api private
  #
  # source://wisper//lib/wisper/temporary_listeners.rb#33
  def build_registrations(listeners); end

  # @api private
  #
  # source://wisper//lib/wisper/temporary_listeners.rb#38
  def key; end

  class << self
    # @api private
    #
    # source://wisper//lib/wisper/temporary_listeners.rb#11
    def registrations; end

    # @api private
    #
    # source://wisper//lib/wisper/temporary_listeners.rb#7
    def subscribe(*listeners, &block); end
  end
end

# @api private
#
# source://wisper//lib/wisper/version.rb#2
Wisper::VERSION = T.let(T.unsafe(nil), String)

# @api private
#
# source://wisper//lib/wisper/value_objects/prefix.rb#2
module Wisper::ValueObjects; end

# Describes allowed events
#
# Duck-types the argument to quack like array of strings
# when responding to the {#include?} method call.
#
# @api private
#
# source://wisper//lib/wisper/value_objects/events.rb#7
class Wisper::ValueObjects::Events
  # source://wisper//lib/wisper/value_objects/events.rb#19
  def initialize(list); end

  # Check if given event is 'included' to the 'list' of events
  #
  # @api private
  # @param event [#to_s]
  # @return [Boolean]
  #
  # source://wisper//lib/wisper/value_objects/events.rb#28
  def include?(event); end

  private

  # @api private
  #
  # source://wisper//lib/wisper/value_objects/events.rb#48
  def appropriate_method; end

  # @api private
  #
  # source://wisper//lib/wisper/value_objects/events.rb#44
  def list; end

  # @api private
  #
  # source://wisper//lib/wisper/value_objects/events.rb#34
  def methods; end

  # @api private
  #
  # source://wisper//lib/wisper/value_objects/events.rb#52
  def recognized_type; end

  # @api private
  #
  # source://wisper//lib/wisper/value_objects/events.rb#56
  def type_not_recognized; end
end

# Prefix for notifications
#
# @api private
# @example
#   Wisper::ValueObjects::Prefix.new nil    # => ""
#   Wisper::ValueObjects::Prefix.new "when" # => "when_"
#   Wisper::ValueObjects::Prefix.new true   # => "on_"
#
# source://wisper//lib/wisper/value_objects/prefix.rb#9
class Wisper::ValueObjects::Prefix < ::String
  # @api private
  # @param value [true, nil, #to_s]
  # @return [undefined]
  #
  # source://wisper//lib/wisper/value_objects/prefix.rb#17
  def initialize(value = T.unsafe(nil)); end

  private

  # @api private
  #
  # source://wisper//lib/wisper/value_objects/prefix.rb#24
  def default; end

  class << self
    # @api private
    #
    # source://wisper//lib/wisper/value_objects/prefix.rb#11
    def default; end

    # @api private
    #
    # source://wisper//lib/wisper/value_objects/prefix.rb#11
    def default=(_arg0); end
  end
end
