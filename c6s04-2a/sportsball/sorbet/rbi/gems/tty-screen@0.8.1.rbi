# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-screen` gem.
# Please instead update this file by running `bin/tapioca gem tty-screen`.

# fronzen_string_literal: true
#
# source://tty-screen//lib/tty/screen/version.rb#3
module TTY; end

# Used for detecting screen properties
#
# @api public
#
# source://tty-screen//lib/tty/screen/version.rb#4
module TTY::Screen
  private

  # @api public
  #
  # source://tty-screen//lib/tty/screen.rb#75
  def cols; end

  # @api public
  #
  # source://tty-screen//lib/tty/screen.rb#75
  def columns; end

  # Check if command exists
  #
  # @api private
  # @return [Boolean]
  #
  # source://tty-screen//lib/tty/screen.rb#306
  def command_exist?(command); end

  # @api public
  #
  # source://tty-screen//lib/tty/screen.rb#85
  def height; end

  # Check if ioctl can be called and any of the streams is
  # attached to a terminal.
  #
  # @api private
  # @return [Boolean] True if any of the streams is attached to a terminal, false otherwise.
  #
  # source://tty-screen//lib/tty/screen.rb#215
  def ioctl?(control, buf); end

  # source://tty-screen//lib/tty/screen.rb#33
  def jruby?; end

  # @api public
  #
  # source://tty-screen//lib/tty/screen.rb#85
  def lines; end

  # Check if number is non zero
  #
  # return [Boolean]
  #
  # @api private
  # @return [Boolean]
  #
  # source://tty-screen//lib/tty/screen.rb#330
  def nonzero_column?(column); end

  # @api public
  #
  # source://tty-screen//lib/tty/screen.rb#85
  def rows; end

  # Runs command silently capturing the output
  #
  # @api private
  #
  # source://tty-screen//lib/tty/screen.rb#318
  def run_command(*args); end

  # Get terminal rows and columns
  #
  # @api public
  # @return [Array[Integer, Integer]] return rows and columns
  #
  # source://tty-screen//lib/tty/screen.rb#61
  def size(verbose: T.unsafe(nil)); end

  # Detect terminal size from Windows ANSICON
  #
  # @api private
  #
  # source://tty-screen//lib/tty/screen.rb#293
  def size_from_ansicon; end

  # Default size for the terminal
  #
  # @api private
  # @return [Array[Integer, Integer]]
  #
  # source://tty-screen//lib/tty/screen.rb#100
  def size_from_default; end

  # Detect terminal size from environment
  #
  # After executing Ruby code if the user changes terminal
  # dimensions during code runtime, the code won't be notified,
  # and hence won't see the new dimensions reflected in its copy
  # of LINES and COLUMNS environment variables.
  #
  # @api private
  # @return [nil, Array[Integer, Integer]]
  #
  # source://tty-screen//lib/tty/screen.rb#282
  def size_from_env; end

  # Detect screen size by loading io/console lib
  #
  # On Windows io_console falls back to reading environment
  # variables. This means any user changes to the terminal
  # size won't be reflected in the runtime of the Ruby app.
  #
  # @api private
  # @return [nil, Array[Integer, Integer]]
  #
  # source://tty-screen//lib/tty/screen.rb#171
  def size_from_io_console(verbose: T.unsafe(nil)); end

  # Read terminal size from Unix ioctl
  #
  # @api private
  # @return [nil, Array[Integer, Integer]]
  #
  # source://tty-screen//lib/tty/screen.rb#195
  def size_from_ioctl; end

  # @api public
  #
  # source://tty-screen//lib/tty/screen.rb#158
  def size_from_java(verbose: T.unsafe(nil)); end

  # Detect screen size using Readline
  #
  # @api private
  #
  # source://tty-screen//lib/tty/screen.rb#231
  def size_from_readline(verbose: T.unsafe(nil)); end

  # Detect terminal size from stty utility
  #
  # @api private
  #
  # source://tty-screen//lib/tty/screen.rb#261
  def size_from_stty; end

  # Detect terminal size from tput utility
  #
  # @api private
  #
  # source://tty-screen//lib/tty/screen.rb#247
  def size_from_tput; end

  # @api public
  #
  # source://tty-screen//lib/tty/screen.rb#137
  def size_from_win_api(verbose: T.unsafe(nil)); end

  # @api public
  #
  # source://tty-screen//lib/tty/screen.rb#75
  def width; end

  # source://tty-screen//lib/tty/screen.rb#25
  def windows?; end

  class << self
    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#75
    def cols; end

    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#75
    def columns; end

    # Holds the environment variables
    #
    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#48
    def env; end

    # Holds the environment variables
    #
    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#48
    def env=(_arg0); end

    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#85
    def height; end

    # Check if ioctl can be called and any of the streams is
    # attached to a terminal.
    #
    # @api private
    # @return [Boolean] True if any of the streams is attached to a terminal, false otherwise.
    #
    # source://tty-screen//lib/tty/screen.rb#215
    def ioctl?(control, buf); end

    # source://tty-screen//lib/tty/screen.rb#33
    def jruby?; end

    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#85
    def lines; end

    # Specifies an output stream
    #
    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#52
    def output; end

    # Specifies an output stream
    #
    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#52
    def output=(_arg0); end

    # Helper to define private functions
    #
    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#16
    def private_module_function(name); end

    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#85
    def rows; end

    # Get terminal rows and columns
    #
    # @api public
    # @return [Array[Integer, Integer]] return rows and columns
    #
    # source://tty-screen//lib/tty/screen.rb#61
    def size(verbose: T.unsafe(nil)); end

    # Detect terminal size from Windows ANSICON
    #
    # @api private
    #
    # source://tty-screen//lib/tty/screen.rb#293
    def size_from_ansicon; end

    # Default size for the terminal
    #
    # @api private
    # @return [Array[Integer, Integer]]
    #
    # source://tty-screen//lib/tty/screen.rb#100
    def size_from_default; end

    # Detect terminal size from environment
    #
    # After executing Ruby code if the user changes terminal
    # dimensions during code runtime, the code won't be notified,
    # and hence won't see the new dimensions reflected in its copy
    # of LINES and COLUMNS environment variables.
    #
    # @api private
    # @return [nil, Array[Integer, Integer]]
    #
    # source://tty-screen//lib/tty/screen.rb#282
    def size_from_env; end

    # Detect screen size by loading io/console lib
    #
    # On Windows io_console falls back to reading environment
    # variables. This means any user changes to the terminal
    # size won't be reflected in the runtime of the Ruby app.
    #
    # @api private
    # @return [nil, Array[Integer, Integer]]
    #
    # source://tty-screen//lib/tty/screen.rb#171
    def size_from_io_console(verbose: T.unsafe(nil)); end

    # Read terminal size from Unix ioctl
    #
    # @api private
    # @return [nil, Array[Integer, Integer]]
    #
    # source://tty-screen//lib/tty/screen.rb#195
    def size_from_ioctl; end

    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#158
    def size_from_java(verbose: T.unsafe(nil)); end

    # Detect screen size using Readline
    #
    # @api private
    #
    # source://tty-screen//lib/tty/screen.rb#231
    def size_from_readline(verbose: T.unsafe(nil)); end

    # Detect terminal size from stty utility
    #
    # @api private
    #
    # source://tty-screen//lib/tty/screen.rb#261
    def size_from_stty; end

    # Detect terminal size from tput utility
    #
    # @api private
    #
    # source://tty-screen//lib/tty/screen.rb#247
    def size_from_tput; end

    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#137
    def size_from_win_api(verbose: T.unsafe(nil)); end

    # @api public
    #
    # source://tty-screen//lib/tty/screen.rb#75
    def width; end

    # source://tty-screen//lib/tty/screen.rb#25
    def windows?; end

    private

    # source://tty-screen//lib/tty/screen.rb#306
    def command_exist?(command); end

    # source://tty-screen//lib/tty/screen.rb#330
    def nonzero_column?(column); end

    # source://tty-screen//lib/tty/screen.rb#318
    def run_command(*args); end
  end
end

# Default terminal size
#
# @api public
#
# source://tty-screen//lib/tty/screen.rb#40
TTY::Screen::DEFAULT_SIZE = T.let(T.unsafe(nil), Array)

# linux
#
# @api public
#
# source://tty-screen//lib/tty/screen.rb#186
TTY::Screen::TIOCGWINSZ = T.let(T.unsafe(nil), Integer)

# macos, freedbsd, netbsd, openbsd
#
# @api public
#
# source://tty-screen//lib/tty/screen.rb#187
TTY::Screen::TIOCGWINSZ_PPC = T.let(T.unsafe(nil), Integer)

# solaris
#
# @api public
#
# source://tty-screen//lib/tty/screen.rb#188
TTY::Screen::TIOCGWINSZ_SOL = T.let(T.unsafe(nil), Integer)

# source://tty-screen//lib/tty/screen/version.rb#5
TTY::Screen::VERSION = T.let(T.unsafe(nil), String)
