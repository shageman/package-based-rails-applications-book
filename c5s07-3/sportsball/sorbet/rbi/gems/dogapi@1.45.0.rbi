# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dogapi` gem.
# Please instead update this file by running `bin/tapioca gem dogapi`.

# source://dogapi//lib/dogapi/version.rb#5
module Dogapi
  class << self
    # source://dogapi//lib/dogapi/common.rb#208
    def find_datadog_host; end

    # source://dogapi//lib/dogapi/common.rb#216
    def find_localhost; end

    # source://dogapi//lib/dogapi/common.rb#230
    def find_proxy; end

    # Very simplified hash with indifferent access - access to string or symbol
    # keys via symbols. E.g.:
    # my_hash = { 'foo' => 1 }
    # Dogapi.symbolized_access(my_hash)
    # my_hash[:foo] # => 1
    #
    # source://dogapi//lib/dogapi/common.rb#250
    def symbolized_access(hash); end

    # source://dogapi//lib/dogapi/common.rb#236
    def validate_tags(tags); end
  end
end

# Superclass that deals with the details of communicating with the DataDog API
#
# source://dogapi//lib/dogapi/common.rb#87
class Dogapi::APIService
  # @return [APIService] a new instance of APIService
  #
  # source://dogapi//lib/dogapi/common.rb#89
  def initialize(api_key, application_key, silent = T.unsafe(nil), timeout = T.unsafe(nil), endpoint = T.unsafe(nil), skip_ssl_validation = T.unsafe(nil)); end

  # Returns the value of attribute api_key.
  #
  # source://dogapi//lib/dogapi/common.rb#88
  def api_key; end

  # Returns the value of attribute application_key.
  #
  # source://dogapi//lib/dogapi/common.rb#88
  def application_key; end

  # Manages the HTTP connection
  #
  # source://dogapi//lib/dogapi/common.rb#99
  def connect; end

  # source://dogapi//lib/dogapi/common.rb#198
  def handle_redirect(conn, req, resp, retries = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/common.rb#185
  def handle_response(resp); end

  # source://dogapi//lib/dogapi/common.rb#167
  def prepare_params(extra_params, url, with_app_key); end

  # source://dogapi//lib/dogapi/common.rb#152
  def prepare_request(method, url, params, body, send_json, with_app_key); end

  # Prepares the request and handles the response
  #
  # +method+ is an implementation of Net::HTTP::Request (e.g. Net::HTTP::Post)
  #
  # +params+ is a Hash that will be converted to request parameters
  #
  # source://dogapi//lib/dogapi/common.rb#135
  def request(method, url, extra_params, body, send_json, with_app_key = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://dogapi//lib/dogapi/common.rb#180
  def should_set_api_and_app_keys_in_params?(url); end

  # source://dogapi//lib/dogapi/common.rb#123
  def suppress_error_if_silent(e); end
end

# A simple DogAPI client
#
# See Dogapi::V1  for the thick underlying clients
#
# Class methods return a tuple of (+response_code+, +response_body+). Unless
# otherwise noted, the response body is deserialized JSON. Up-to-date
# information about the JSON object structure is available in the HTTP API
# documentation, here[https://github.com/DataDog/dogapi/wiki].
#
# source://dogapi//lib/dogapi/facade.rb#62
class Dogapi::Client
  # @return [Client] a new instance of Client
  #
  # source://dogapi//lib/dogapi/facade.rb#68
  def initialize(api_key, application_key = T.unsafe(nil), host = T.unsafe(nil), device = T.unsafe(nil), silent = T.unsafe(nil), timeout = T.unsafe(nil), endpoint = T.unsafe(nil), skip_ssl_validation = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#406
  def add_items_to_dashboard_list(dashboard_list_id, dashboards); end

  # Add the tags to the given host
  #
  # +host_id+ can be the host's numeric id or string name
  #
  # +tags+ is and Array of Strings
  #
  # source://dogapi//lib/dogapi/facade.rb#298
  def add_tags(host_id, tags, source = T.unsafe(nil)); end

  # ALERTS
  #
  # source://dogapi//lib/dogapi/facade.rb#426
  def alert(query, options = T.unsafe(nil)); end

  # Get all tags and their associated hosts at your org
  #
  # source://dogapi//lib/dogapi/facade.rb#282
  def all_tags(source = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#818
  def aws_integration_create(config); end

  # source://dogapi//lib/dogapi/facade.rb#822
  def aws_integration_delete(config); end

  # source://dogapi//lib/dogapi/facade.rb#830
  def aws_integration_generate_external_id(config); end

  # AWS INTEGRATION
  #
  # source://dogapi//lib/dogapi/facade.rb#814
  def aws_integration_list; end

  # source://dogapi//lib/dogapi/facade.rb#826
  def aws_integration_list_namespaces; end

  # source://dogapi//lib/dogapi/facade.rb#834
  def aws_integration_update(config, new_config); end

  # AWS Logs Integration
  #
  # source://dogapi//lib/dogapi/facade.rb#842
  def aws_logs_add_lambda(config); end

  # source://dogapi//lib/dogapi/facade.rb#862
  def aws_logs_check_lambda(config); end

  # source://dogapi//lib/dogapi/facade.rb#866
  def aws_logs_check_services(config); end

  # source://dogapi//lib/dogapi/facade.rb#858
  def aws_logs_integration_delete(config); end

  # source://dogapi//lib/dogapi/facade.rb#854
  def aws_logs_integrations_list; end

  # source://dogapi//lib/dogapi/facade.rb#846
  def aws_logs_list_services; end

  # source://dogapi//lib/dogapi/facade.rb#850
  def aws_logs_save_services(config); end

  # source://dogapi//lib/dogapi/facade.rb#878
  def azure_integration_create(config); end

  # source://dogapi//lib/dogapi/facade.rb#882
  def azure_integration_delete(config); end

  # AZURE INTEGRATION
  #
  # source://dogapi//lib/dogapi/facade.rb#874
  def azure_integration_list; end

  # source://dogapi//lib/dogapi/facade.rb#890
  def azure_integration_update(config); end

  # source://dogapi//lib/dogapi/facade.rb#886
  def azure_integration_update_host_filters(config); end

  # source://dogapi//lib/dogapi/facade.rb#176
  def batch_metrics; end

  # source://dogapi//lib/dogapi/facade.rb#597
  def can_delete_monitors(monitor_ids); end

  # source://dogapi//lib/dogapi/facade.rb#705
  def can_delete_service_level_objective(slo_ids); end

  # source://dogapi//lib/dogapi/facade.rb#657
  def cancel_downtime(downtime_id); end

  # source://dogapi//lib/dogapi/facade.rb#661
  def cancel_downtime_by_scope(scope); end

  # Post a comment
  #
  # source://dogapi//lib/dogapi/facade.rb#254
  def comment(message, options = T.unsafe(nil)); end

  # Create a dashboard.
  #
  # source://dogapi//lib/dogapi/facade.rb#358
  def create_board(title, widgets, layout_type, options = T.unsafe(nil)); end

  # Create a dashboard.
  #
  # source://dogapi//lib/dogapi/facade.rb#329
  def create_dashboard(title, description, graphs, template_variables = T.unsafe(nil), read_only = T.unsafe(nil)); end

  # DASHBOARD LISTS
  #
  # source://dogapi//lib/dogapi/facade.rb#386
  def create_dashboard_list(name); end

  # source://dogapi//lib/dogapi/facade.rb#495
  def create_embed(graph_json, description = T.unsafe(nil)); end

  # INTEGRATIONS
  #
  # source://dogapi//lib/dogapi/facade.rb#795
  def create_integration(source_type_name, config); end

  # LOGS PIPELINES
  #
  # source://dogapi//lib/dogapi/facade.rb#725
  def create_logs_pipeline(name, filter, options = T.unsafe(nil)); end

  # SCREENBOARD
  #
  # source://dogapi//lib/dogapi/facade.rb#510
  def create_screenboard(description); end

  # SERVICE LEVEL OBJECTIVES
  #
  # source://dogapi//lib/dogapi/facade.rb#685
  def create_service_level_objective(type, slo_name, thresholds, options = T.unsafe(nil)); end

  # SYNTHETICS
  #
  # source://dogapi//lib/dogapi/facade.rb#541
  def create_synthetics_test(type, config, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#459
  def create_user(description = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#63
  def datadog_host; end

  # source://dogapi//lib/dogapi/facade.rb#63
  def datadog_host=(_arg0); end

  # source://dogapi//lib/dogapi/facade.rb#438
  def delete_alert(alert_id); end

  # Delete the given dashboard.
  #
  # source://dogapi//lib/dogapi/facade.rb#378
  def delete_board(dashboard_id); end

  # source://dogapi//lib/dogapi/facade.rb#263
  def delete_comment(comment_id); end

  # Delete the given dashboard.
  #
  # source://dogapi//lib/dogapi/facade.rb#349
  def delete_dashboard(dash_id); end

  # source://dogapi//lib/dogapi/facade.rb#402
  def delete_dashboard_list(dashboard_list_id); end

  # Delete an event
  #
  # +id+ of the event to delete
  #
  # source://dogapi//lib/dogapi/facade.rb#217
  def delete_event(id); end

  # source://dogapi//lib/dogapi/facade.rb#807
  def delete_integration(source_type_name); end

  # source://dogapi//lib/dogapi/facade.rb#414
  def delete_items_from_dashboard_list(dashboard_list_id, dashboards); end

  # source://dogapi//lib/dogapi/facade.rb#741
  def delete_logs_pipeline(pipeline_id); end

  # source://dogapi//lib/dogapi/facade.rb#713
  def delete_many_service_level_objective(slo_ids); end

  # source://dogapi//lib/dogapi/facade.rb#601
  def delete_monitor(monitor_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#526
  def delete_screenboard(board_id); end

  # source://dogapi//lib/dogapi/facade.rb#709
  def delete_service_level_objective(slo_id); end

  # source://dogapi//lib/dogapi/facade.rb#549
  def delete_synthetics_tests(test_ids); end

  # source://dogapi//lib/dogapi/facade.rb#717
  def delete_timeframes_service_level_objective(ops); end

  # Remove all tags from the given host
  #
  # +host_id+ can be the host's numeric id or string name
  #
  # source://dogapi//lib/dogapi/facade.rb#320
  def detach_tags(host_id, source = T.unsafe(nil)); end

  # <b>DEPRECATED:</b> Spelling mistake temporarily preserved as an alias.
  #
  # source://dogapi//lib/dogapi/facade.rb#312
  def detatch_tags(host_id); end

  # source://dogapi//lib/dogapi/facade.rb#475
  def disable_user(handle); end

  # Record an event
  #
  # Optional arguments:
  #  :host        => String
  #  :device      => String
  #
  # source://dogapi//lib/dogapi/facade.rb#201
  def emit_event(event, options = T.unsafe(nil)); end

  # Record a single point of metric data
  #
  # Optional arguments:
  #  :timestamp => Ruby stdlib Time
  #  :host      => String
  #  :device    => String
  #  :options   => Map
  #
  # options[:type] = "count" to specify a counter metric
  # options[:tags] = ["tag1", "tag2"] to tag the point
  #
  # source://dogapi//lib/dogapi/facade.rb#132
  def emit_point(metric, value, options = T.unsafe(nil)); end

  # Record a set of points of metric data
  #
  # +points+ is an array of <tt>[Time, value]</tt> doubles
  #
  # Optional arguments:
  #  :host   => String
  #  :device => String
  #  :options   => Map
  #
  # options[:type] = "count" to specify a counter metric
  # options[:tags] = ["tag1", "tag2"] to tag the point
  #
  # source://dogapi//lib/dogapi/facade.rb#154
  def emit_points(metric, points, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#499
  def enable_embed(embed_id); end

  # source://dogapi//lib/dogapi/facade.rb#905
  def gcp_integration_create(config); end

  # source://dogapi//lib/dogapi/facade.rb#901
  def gcp_integration_delete(config); end

  # GCP INTEGRATION
  #
  # source://dogapi//lib/dogapi/facade.rb#897
  def gcp_integration_list; end

  # source://dogapi//lib/dogapi/facade.rb#909
  def gcp_integration_update(config); end

  # Get a list of active metrics since a given time
  # +from+ The seconds since the unix epoch <tt>[Time, Integer]</tt>
  #
  # source://dogapi//lib/dogapi/facade.rb#189
  def get_active_metrics(from); end

  # source://dogapi//lib/dogapi/facade.rb#434
  def get_alert(alert_id); end

  # source://dogapi//lib/dogapi/facade.rb#442
  def get_all_alerts; end

  # Fetch all dashboards.
  #
  # source://dogapi//lib/dogapi/facade.rb#373
  def get_all_boards; end

  # source://dogapi//lib/dogapi/facade.rb#398
  def get_all_dashboard_lists; end

  # source://dogapi//lib/dogapi/facade.rb#665
  def get_all_downtimes(options = T.unsafe(nil)); end

  # EMBEDS
  #
  # source://dogapi//lib/dogapi/facade.rb#487
  def get_all_embeds; end

  # source://dogapi//lib/dogapi/facade.rb#733
  def get_all_logs_pipelines; end

  # source://dogapi//lib/dogapi/facade.rb#605
  def get_all_monitors(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#522
  def get_all_screenboards; end

  # source://dogapi//lib/dogapi/facade.rb#557
  def get_all_synthetics_tests; end

  # source://dogapi//lib/dogapi/facade.rb#463
  def get_all_users; end

  # Fetch the given dashboard.
  #
  # source://dogapi//lib/dogapi/facade.rb#368
  def get_board(dashboard_id); end

  # source://dogapi//lib/dogapi/facade.rb#932
  def get_custom_metrics_usage(start_hr, end_hr = T.unsafe(nil)); end

  # Fetch the given dashboard.
  #
  # source://dogapi//lib/dogapi/facade.rb#339
  def get_dashboard(dash_id); end

  # source://dogapi//lib/dogapi/facade.rb#394
  def get_dashboard_list(dashboard_list_id); end

  # Fetch all of the dashboards.
  #
  # source://dogapi//lib/dogapi/facade.rb#344
  def get_dashboards; end

  # source://dogapi//lib/dogapi/facade.rb#653
  def get_downtime(downtime_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#491
  def get_embed(embed_id, description = T.unsafe(nil)); end

  # Get the details of an event
  #
  # +id+ of the event to get
  #
  # source://dogapi//lib/dogapi/facade.rb#210
  def get_event(id); end

  # source://dogapi//lib/dogapi/facade.rb#944
  def get_fargate_usage(start_hr, end_hr = T.unsafe(nil)); end

  # Get hourly usage information for different datadog service
  # Usage data is delayed by up to 72 hours from when it was incurred. It is retained for the past 15 months.#
  # format of dates is ISO-8601 UTC YYYY-MM-DDThh
  # ex:
  #   require 'time'
  #   Time.now.utc.strftime('%Y-%m-%dT%H')
  # => "2019-05-05T13"
  #
  # source://dogapi//lib/dogapi/facade.rb#924
  def get_hosts_usage(start_hr, end_hr = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#803
  def get_integration(source_type_name); end

  # source://dogapi//lib/dogapi/facade.rb#418
  def get_items_of_dashboard_list(dashboard_list_id); end

  # source://dogapi//lib/dogapi/facade.rb#729
  def get_logs_pipeline(pipeline_id); end

  # source://dogapi//lib/dogapi/facade.rb#928
  def get_logs_usage(start_hr, end_hr = T.unsafe(nil)); end

  # Get metadata information on an existing Datadog metric
  #
  # source://dogapi//lib/dogapi/facade.rb#758
  def get_metadata(metric); end

  # source://dogapi//lib/dogapi/facade.rb#593
  def get_monitor(monitor_id, options = T.unsafe(nil)); end

  # Get a set of points by query between from and to
  #
  # +from+ The seconds since the unix epoch <tt>[Time, Integer]</tt>
  # +to+ The seconds since the unix epoch <tt>[Time, Integer]</tt>
  # +query+ The query string <tt>[String]</tt>
  #
  # source://dogapi//lib/dogapi/facade.rb#172
  def get_points(query, from, to); end

  # source://dogapi//lib/dogapi/facade.rb#518
  def get_screenboard(board_id); end

  # source://dogapi//lib/dogapi/facade.rb#693
  def get_service_level_objective(slo_id); end

  # source://dogapi//lib/dogapi/facade.rb#697
  def get_service_level_objective_history(slo_id, from_ts, to_ts); end

  # source://dogapi//lib/dogapi/facade.rb#573
  def get_synthetics_devices; end

  # source://dogapi//lib/dogapi/facade.rb#577
  def get_synthetics_locations; end

  # source://dogapi//lib/dogapi/facade.rb#569
  def get_synthetics_result(test_id, result_id); end

  # source://dogapi//lib/dogapi/facade.rb#565
  def get_synthetics_results(test_id); end

  # source://dogapi//lib/dogapi/facade.rb#561
  def get_synthetics_test(test_id); end

  # source://dogapi//lib/dogapi/facade.rb#940
  def get_synthetics_usage(start_hr, end_hr = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#936
  def get_traces_usage(start_hr, end_hr = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#467
  def get_user(handle); end

  # Graph snapshot
  #
  # source://dogapi//lib/dogapi/facade.rb#480
  def graph_snapshot(metric_query, start_ts, end_ts, event_query = T.unsafe(nil)); end

  # Get all tags for the given host
  #
  # +host_id+ can be the host's numeric id or string name
  #
  # source://dogapi//lib/dogapi/facade.rb#289
  def host_tags(host_id, source = T.unsafe(nil), by_source = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#787
  def host_totals; end

  # User invite
  #
  # source://dogapi//lib/dogapi/facade.rb#455
  def invite(emails, options = T.unsafe(nil)); end

  # MONITORS
  #
  # source://dogapi//lib/dogapi/facade.rb#585
  def monitor(type, query, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#446
  def mute_alerts; end

  # HOST MUTING
  #
  # source://dogapi//lib/dogapi/facade.rb#673
  def mute_host(hostname, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#621
  def mute_monitor(monitor_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#613
  def mute_monitors; end

  # source://dogapi//lib/dogapi/facade.rb#629
  def resolve_monitors(monitor_groups = T.unsafe(nil), options = T.unsafe(nil), version = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#503
  def revoke_embed(embed_id); end

  # source://dogapi//lib/dogapi/facade.rb#534
  def revoke_screenboard(board_id); end

  # MONITOR DOWNTIME
  #
  # source://dogapi//lib/dogapi/facade.rb#645
  def schedule_downtime(scope, options = T.unsafe(nil)); end

  # Run the given search query.
  #
  # source://dogapi//lib/dogapi/facade.rb#272
  def search(query); end

  # HOSTS
  #
  # source://dogapi//lib/dogapi/facade.rb#783
  def search_hosts(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#637
  def search_monitor_groups(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#633
  def search_monitors(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#701
  def search_service_level_objective(slo_ids = T.unsafe(nil), query = T.unsafe(nil), offset = T.unsafe(nil), limit = T.unsafe(nil)); end

  # SERVICE CHECKS
  #
  # source://dogapi//lib/dogapi/facade.rb#749
  def service_check(check, host, status, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#530
  def share_screenboard(board_id); end

  # <b>DEPRECATED:</b> Recording events with a duration has been deprecated.
  # The functionality will be removed in a later release.
  #
  # source://dogapi//lib/dogapi/facade.rb#237
  def start_event(event, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#553
  def start_pause_synthetics_test(test_id, new_status); end

  # Get an optionally filtered event stream
  #
  # +start+ is a Time object for when to start the stream
  #
  # +stop+ is a Time object for when to end the stream
  #
  # Optional arguments:
  #   :priority   => "normal" or "low"
  #   :sources    => String, see https://github.com/DataDog/dogapi/wiki/Event for a current list of sources
  #   :tags       => Array of Strings
  #
  # source://dogapi//lib/dogapi/facade.rb#231
  def stream(start, stop, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#450
  def unmute_alerts; end

  # source://dogapi//lib/dogapi/facade.rb#677
  def unmute_host(hostname); end

  # source://dogapi//lib/dogapi/facade.rb#625
  def unmute_monitor(monitor_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#617
  def unmute_monitors; end

  # source://dogapi//lib/dogapi/facade.rb#430
  def update_alert(alert_id, query, options = T.unsafe(nil)); end

  # Update a dashboard.
  #
  # source://dogapi//lib/dogapi/facade.rb#363
  def update_board(dashboard_id, title, widgets, layout_type, options = T.unsafe(nil)); end

  # Post a comment
  #
  # source://dogapi//lib/dogapi/facade.rb#259
  def update_comment(comment_id, options = T.unsafe(nil)); end

  # Update a dashboard.
  #
  # source://dogapi//lib/dogapi/facade.rb#334
  def update_dashboard(dash_id, title, description, graphs, template_variables = T.unsafe(nil), read_only = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#390
  def update_dashboard_list(dashboard_list_id, name); end

  # source://dogapi//lib/dogapi/facade.rb#649
  def update_downtime(downtime_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#799
  def update_integration(source_type_name, config); end

  # source://dogapi//lib/dogapi/facade.rb#410
  def update_items_of_dashboard_list(dashboard_list_id, dashboards); end

  # source://dogapi//lib/dogapi/facade.rb#737
  def update_logs_pipeline(pipeline_id, name, filter, options = T.unsafe(nil)); end

  # Update metadata fields for an existing Datadog metric.
  # If the metadata does not exist for the metric it is created by
  # the update.
  # Optional arguments:
  #   :type             => String, type of the metric (ex. "gauge", "rate", etc.)
  #                        see http://docs.datadoghq.com/metrictypes/
  #   :description      => String, description of the metric
  #   :short_name       => String, short name of the metric
  #   :unit             => String, unit type associated with the metric (ex. "byte", "operation")
  #                        see http://docs.datadoghq.com/units/ for full list
  #   :per_unit         => String, per unit type (ex. "second" as in "queries per second")
  #                        see http://docs.datadoghq.com/units/ for full
  #   :statsd_interval  => Integer, statsd flush interval for metric in seconds (if applicable)
  #
  # source://dogapi//lib/dogapi/facade.rb#775
  def update_metadata(metric, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#589
  def update_monitor(monitor_id, query, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#514
  def update_screenboard(board_id, description); end

  # source://dogapi//lib/dogapi/facade.rb#689
  def update_service_level_objective(slo_id, type, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#545
  def update_synthetics_test(test_id, type, config, options = T.unsafe(nil)); end

  # Replace the tags on the given host
  #
  # +host_id+ can be the host's numeric id or string name
  #
  # +tags+ is and Array of Strings
  #
  # source://dogapi//lib/dogapi/facade.rb#307
  def update_tags(host_id, tags, source = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#471
  def update_user(handle, description = T.unsafe(nil)); end

  # Returns the value of attribute v2.
  #
  # source://dogapi//lib/dogapi/facade.rb#64
  def v2; end

  # Sets the attribute v2
  #
  # @param value the value to set the attribute v2 to.
  #
  # source://dogapi//lib/dogapi/facade.rb#64
  def v2=(_arg0); end

  # source://dogapi//lib/dogapi/facade.rb#609
  def validate_monitor(type, query, options = T.unsafe(nil)); end

  private

  # source://dogapi//lib/dogapi/facade.rb#950
  def override_scope(options = T.unsafe(nil)); end
end

# A simple DogAPI client supporting the version 2.
#
# See Dogapi::V2  for the thick underlying clients
#
# source://dogapi//lib/dogapi/facade.rb#14
class Dogapi::ClientV2
  # @return [ClientV2] a new instance of ClientV2
  #
  # source://dogapi//lib/dogapi/facade.rb#16
  def initialize(api_key, application_key = T.unsafe(nil), host = T.unsafe(nil), device = T.unsafe(nil), silent = T.unsafe(nil), timeout = T.unsafe(nil), endpoint = T.unsafe(nil), skip_ssl_validation = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/facade.rb#36
  def add_items_to_dashboard_list(dashboard_list_id, dashboards); end

  # Returns the value of attribute datadog_host.
  #
  # source://dogapi//lib/dogapi/facade.rb#15
  def datadog_host; end

  # Sets the attribute datadog_host
  #
  # @param value the value to set the attribute datadog_host to.
  #
  # source://dogapi//lib/dogapi/facade.rb#15
  def datadog_host=(_arg0); end

  # source://dogapi//lib/dogapi/facade.rb#44
  def delete_items_from_dashboard_list(dashboard_list_id, dashboards); end

  # source://dogapi//lib/dogapi/facade.rb#48
  def get_items_of_dashboard_list(dashboard_list_id); end

  # source://dogapi//lib/dogapi/facade.rb#40
  def update_items_of_dashboard_list(dashboard_list_id, dashboards); end
end

# Metadata class for storing the details of an event
#
# source://dogapi//lib/dogapi/event.rb#13
class Dogapi::Event
  # Optional arguments:
  #  :date_happened => time in seconds since the epoch (defaults to now)
  #  :msg_title     => String
  #  :priority      => String
  #  :parent        => event ID (integer)
  #  :tags          => array of Strings
  #  :event_object  => String
  #  :alert_type    => 'success', 'error'
  #  :event_type    => String
  #  :source_type_name => String
  #  :aggregation_key => String
  #
  # @return [Event] a new instance of Event
  #
  # source://dogapi//lib/dogapi/event.rb#33
  def initialize(msg_text, options = T.unsafe(nil)); end

  # Returns the value of attribute aggregation_key.
  #
  # source://dogapi//lib/dogapi/event.rb#14
  def aggregation_key; end

  # Returns the value of attribute date_happened.
  #
  # source://dogapi//lib/dogapi/event.rb#14
  def date_happened; end

  # Returns the value of attribute msg_text.
  #
  # source://dogapi//lib/dogapi/event.rb#14
  def msg_text; end

  # Returns the value of attribute msg_title.
  #
  # source://dogapi//lib/dogapi/event.rb#14
  def msg_title; end

  # Returns the value of attribute parent.
  #
  # source://dogapi//lib/dogapi/event.rb#14
  def parent; end

  # Returns the value of attribute priority.
  #
  # source://dogapi//lib/dogapi/event.rb#14
  def priority; end

  # Returns the value of attribute tags.
  #
  # source://dogapi//lib/dogapi/event.rb#14
  def tags; end

  # Copy and pasted from the internets
  # http://stackoverflow.com/a/5031637/25276
  #
  # source://dogapi//lib/dogapi/event.rb#58
  def to_hash; end
end

# <b>DEPRECATED:</b> Going forward, use the V1 services. This legacy service will be
# removed in an upcoming release.
#
# source://dogapi//lib/dogapi/event.rb#67
class Dogapi::EventService < ::Dogapi::Service
  # <b>DEPRECATED:</b> Going forward, use the V1 services. This legacy service will be
  # removed in an upcoming release.
  #
  # source://dogapi//lib/dogapi/event.rb#105
  def start(api_key, event, scope, source_type = T.unsafe(nil)); end

  # <b>DEPRECATED:</b> Going forward, use the V1 services. This legacy service will be
  # removed in an upcoming release.
  #
  # source://dogapi//lib/dogapi/event.rb#75
  def submit(api_key, event, scope = T.unsafe(nil), source_type = T.unsafe(nil)); end

  private

  # source://dogapi//lib/dogapi/event.rb#124
  def finish(api_key, event_id, successful = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/event.rb#69
Dogapi::EventService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/event.rb#70
Dogapi::EventService::MAX_BODY_LENGTH = T.let(T.unsafe(nil), Integer)

# source://dogapi//lib/dogapi/event.rb#71
Dogapi::EventService::MAX_TITLE_LENGTH = T.let(T.unsafe(nil), Integer)

# <b>DEPRECATED:</b> Going forward, use the V1 services. This legacy service will be
# removed in an upcoming release.
#
# source://dogapi//lib/dogapi/metric.rb#14
class Dogapi::MetricService < ::Dogapi::Service
  # <b>DEPRECATED:</b> Going forward, use the V1 services. This legacy service will be
  # removed in an upcoming release.
  #
  # source://dogapi//lib/dogapi/metric.rb#20
  def submit(api_key, scope, metric, points); end
end

# source://dogapi//lib/dogapi/metric.rb#16
Dogapi::MetricService::API_VERSION = T.let(T.unsafe(nil), String)

# Metadata class to hold the scope of an API call
#
# source://dogapi//lib/dogapi/common.rb#29
class Dogapi::Scope
  # @return [Scope] a new instance of Scope
  #
  # source://dogapi//lib/dogapi/common.rb#31
  def initialize(host = T.unsafe(nil), device = T.unsafe(nil)); end

  # Returns the value of attribute device.
  #
  # source://dogapi//lib/dogapi/common.rb#30
  def device; end

  # Returns the value of attribute host.
  #
  # source://dogapi//lib/dogapi/common.rb#30
  def host; end
end

# <b>DEPRECATED:</b> Going forward, use the newer APIService.
#
# source://dogapi//lib/dogapi/common.rb#38
class Dogapi::Service
  # <b>DEPRECATED:</b> Going forward, use the newer APIService.
  #
  # @return [Service] a new instance of Service
  #
  # source://dogapi//lib/dogapi/common.rb#40
  def initialize(api_key, api_host = T.unsafe(nil)); end

  # <b>DEPRECATED:</b> Going forward, use the newer APIService.
  #
  # source://dogapi//lib/dogapi/common.rb#46
  def connect; end

  # <b>DEPRECATED:</b> Going forward, use the newer APIService.
  #
  # source://dogapi//lib/dogapi/common.rb#59
  def request(method, url, params); end
end

# source://dogapi//lib/dogapi/common.rb#20
Dogapi::USER_AGENT = T.let(T.unsafe(nil), String)

# for namespacing
#
# source://dogapi//lib/dogapi/v1/alert.rb#6
class Dogapi::V1; end

# source://dogapi//lib/dogapi/v1/alert.rb#8
class Dogapi::V1::AlertService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/alert.rb#12
  def alert(query, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/alert.rb#32
  def delete_alert(alert_id); end

  # source://dogapi//lib/dogapi/v1/alert.rb#28
  def get_alert(alert_id); end

  # source://dogapi//lib/dogapi/v1/alert.rb#36
  def get_all_alerts; end

  # source://dogapi//lib/dogapi/v1/alert.rb#40
  def mute_alerts; end

  # source://dogapi//lib/dogapi/v1/alert.rb#44
  def unmute_alerts; end

  # source://dogapi//lib/dogapi/v1/alert.rb#20
  def update_alert(alert_id, query, options); end
end

# source://dogapi//lib/dogapi/v1/alert.rb#10
Dogapi::V1::AlertService::API_VERSION = T.let(T.unsafe(nil), String)

# AwsIntegrationService for user interaction with AWS configs.
#
# source://dogapi//lib/dogapi/v1/aws_integration.rb#9
class Dogapi::V1::AwsIntegrationService < ::Dogapi::APIService
  # Create an AWS integration
  # :config => Hash: integration config.
  # config = {
  #   :account_id => '<AWS_ACCOUNT>',
  #   :host_tags => ['api:example'],
  #   :role_name => '<AWS_ROLE_NAME>'
  # }
  #
  # Access Key/Secret Access Key based accounts (GovCloud and China only)
  #
  # config = {
  #   :access_key_id => '<AWS_ACCESS_KEY_ID>',
  #   :host_tags => ['api:example'],
  #   :secret_access_key => '<AWS_SECRET_ACCESS_KEY>'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.aws_integration_create(config)
  #
  # source://dogapi//lib/dogapi/v1/aws_integration.rb#37
  def aws_integration_create(config); end

  # Delete an integration
  # :config => Hash: integration config.
  # config = {
  #   :account_id => '<AWS_ACCOUNT>',
  #   :role_name => '<AWS_ROLE_NAME>'
  # }
  # Access Key/Secret Access Key based accounts (GovCloud and China only)
  #
  # config = {
  #   :access_key_id => '<AWS_ACCESS_KEY_ID>',
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.aws_integration_delete(config)
  #
  # source://dogapi//lib/dogapi/v1/aws_integration.rb#56
  def aws_integration_delete(config); end

  # Generate new AWS external ID for a specific integrated account
  # :config => Hash: integration config.
  # config = {
  #   :account_id => '<AWS_ACCOUNT>',
  #   :role_name => '<AWS_ROLE_NAME>'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.aws_integration_generate_external_id(config)
  #
  # source://dogapi//lib/dogapi/v1/aws_integration.rb#75
  def aws_integration_generate_external_id(config); end

  # Retrieve AWS integration information
  #
  # source://dogapi//lib/dogapi/v1/aws_integration.rb#14
  def aws_integration_list; end

  # List available AWS namespaces
  #
  # source://dogapi//lib/dogapi/v1/aws_integration.rb#61
  def aws_integration_list_namespaces; end

  # puts dog.aws_integration_update(config, new_config)
  #
  # source://dogapi//lib/dogapi/v1/aws_integration.rb#108
  def aws_integration_update(config, new_config); end
end

# source://dogapi//lib/dogapi/v1/aws_integration.rb#11
Dogapi::V1::AwsIntegrationService::API_VERSION = T.let(T.unsafe(nil), String)

# AwsLogsService for user interaction with AWS configs.
#
# source://dogapi//lib/dogapi/v1/aws_logs.rb#9
class Dogapi::V1::AwsLogsService < ::Dogapi::APIService
  # Create an AWS integration
  # :config => Hash: integration config.
  # config = {
  #   :account_id => '<AWS_ACCOUNT>',
  #   :lambda_arn => '<LAMBDA_ARN>'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.aws_logs_add_lambda(config)
  #
  # source://dogapi//lib/dogapi/v1/aws_logs.rb#30
  def aws_logs_add_lambda(config); end

  # contents of config should be
  # >>> :account_id => '<AWS_ACCOUNT_ID>'
  # >>> :lambda_arn => '<AWS_LAMBDA_ARN>'
  #
  # source://dogapi//lib/dogapi/v1/aws_logs.rb#81
  def aws_logs_check_lambda(config); end

  # contents of config should be
  # :account_id => '<AWS_ACCOUNT_ID>'
  # :services => ['s3', 'elb', 'elbv2', 'cloudfront', 'redshift', 'lambda']
  #
  # source://dogapi//lib/dogapi/v1/aws_logs.rb#98
  def aws_logs_check_services(config); end

  # Delete an AWS Logs integration
  # :config => Hash: integration config.
  # config = {
  #   :account_id => '<AWS_ACCOUNT>',
  #   :lambda_arn => '<LAMBDA_ARN>'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.aws_logs_integration_delete(config)
  #
  # source://dogapi//lib/dogapi/v1/aws_logs.rb#63
  def aws_logs_integration_delete(config); end

  # List all Datadog-AWS Logs integrations configured in your Datadog account.
  #
  # source://dogapi//lib/dogapi/v1/aws_logs.rb#35
  def aws_logs_integrations_list; end

  # Get the list of current AWS services for which Datadog offers automatic log collection.
  # Use returned service IDs with the services parameter for the Enable
  # an AWS service log collection API endpoint.
  #
  # source://dogapi//lib/dogapi/v1/aws_logs.rb#16
  def aws_logs_list_services; end

  # Enable automatic log collection for a list of services.
  # This should be run after running 'aws_logs_add_lambda' to save the config.
  # config = {
  #   :account_id => '<AWS_ACCOUNT>',
  #   :services => ['s3', 'elb', 'elbv2', 'cloudfront', 'redshift', 'lambda']
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.aws_logs_save_services(config)
  #
  # source://dogapi//lib/dogapi/v1/aws_logs.rb#49
  def aws_logs_save_services(config); end
end

# source://dogapi//lib/dogapi/v1/aws_logs.rb#11
Dogapi::V1::AwsLogsService::API_VERSION = T.let(T.unsafe(nil), String)

# AzureIntegrationService for user interaction with Azure configs.
#
# source://dogapi//lib/dogapi/v1/azure_integration.rb#9
class Dogapi::V1::AzureIntegrationService < ::Dogapi::APIService
  # Create an Azure integration
  # :config => Hash: integration config.
  # config = {
  #   :tenant_name => '<TENANT_NAME>',
  #   :host_filters => 'new:filter',
  #   :client_id => '<CLIENT_ID>',
  #   :client_secret => '<CLIENT_SECRET>'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.azure_integration_create(config)
  #
  # source://dogapi//lib/dogapi/v1/azure_integration.rb#44
  def azure_integration_create(config); end

  # Delete an Azure integration
  # :config => Hash: integration config.
  # config = {
  #   :tenant_name => '<TENANT_NAME>',
  #   :client_id => '<CLIENT_ID>'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.azure_integration_delete(config)
  #
  # source://dogapi//lib/dogapi/v1/azure_integration.rb#28
  def azure_integration_delete(config); end

  # Retrieve Azure integration information
  #
  # source://dogapi//lib/dogapi/v1/azure_integration.rb#14
  def azure_integration_list; end

  # Update a configured Azure account.
  # :config => Hash: integration config.
  # config = {
  #   :tenant_name => '<TENANT_NAME>',
  #   :new_tenant_name => '<NEW_TENANT_NAME>',
  #   :host_filters => '<KEY>:<VALUE>,<KEY>:<VALUE>',
  #   :client_id => '<CLIENT_ID>',
  #   :new_client_id => '<NEW_CLIENT_ID>'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.azure_integration_update(config)
  #
  # source://dogapi//lib/dogapi/v1/azure_integration.rb#76
  def azure_integration_update(config); end

  # Update an Azure integrations host filters
  # :config => Hash: integration config.
  # config = {
  #   :tenant_name => '<TENANT_NAME>',
  #   :host_filters => 'new:filter',
  #   :client_id => '<CLIENT_ID>'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.azure_integration_update_host_filters(config)
  #
  # source://dogapi//lib/dogapi/v1/azure_integration.rb#59
  def azure_integration_update_host_filters(config); end
end

# source://dogapi//lib/dogapi/v1/azure_integration.rb#11
Dogapi::V1::AzureIntegrationService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/comment.rb#8
class Dogapi::V1::CommentService < ::Dogapi::APIService
  # Submit a comment.
  #
  # source://dogapi//lib/dogapi/v1/comment.rb#13
  def comment(message, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/comment.rb#26
  def delete_comment(comment_id); end

  # Update a comment.
  #
  # source://dogapi//lib/dogapi/v1/comment.rb#22
  def update_comment(comment_id, options = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/comment.rb#10
Dogapi::V1::CommentService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/dash.rb#8
class Dogapi::V1::DashService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/dash.rb#12
  def create_dashboard(title, description, graphs, template_variables = T.unsafe(nil), read_only = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/dash.rb#44
  def delete_dashboard(dash_id); end

  # source://dogapi//lib/dogapi/v1/dash.rb#36
  def get_dashboard(dash_id); end

  # source://dogapi//lib/dogapi/v1/dash.rb#40
  def get_dashboards; end

  # source://dogapi//lib/dogapi/v1/dash.rb#24
  def update_dashboard(dash_id, title, description, graphs, template_variables = T.unsafe(nil), read_only = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/dash.rb#10
Dogapi::V1::DashService::API_VERSION = T.let(T.unsafe(nil), String)

# Dashboard List API
#
# source://dogapi//lib/dogapi/v1/dashboard_list.rb#9
class Dogapi::V1::DashboardListService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#53
  def add_items(resource_id, dashboards); end

  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#35
  def all; end

  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#15
  def create(name); end

  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#39
  def delete(resource_id); end

  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#81
  def delete_items(resource_id, dashboards); end

  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#31
  def get(resource_id); end

  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#43
  def get_items(resource_id); end

  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#23
  def update(resource_id, name); end

  # source://dogapi//lib/dogapi/v1/dashboard_list.rb#67
  def update_items(resource_id, dashboards); end
end

# source://dogapi//lib/dogapi/v1/dashboard_list.rb#11
Dogapi::V1::DashboardListService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/dashboard_list.rb#12
Dogapi::V1::DashboardListService::RESOURCE_NAME = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/dashboard_list.rb#13
Dogapi::V1::DashboardListService::SUB_RESOURCE_NAME = T.let(T.unsafe(nil), String)

# Dashboard API
#
# source://dogapi//lib/dogapi/v1/dashboard.rb#9
class Dogapi::V1::DashboardService < ::Dogapi::APIService
  # Create new dashboard
  #
  # Required arguments:
  # :title                 => String: Title of the dashboard
  # :widgets               => JSON: List of widgets to display on the dashboard
  # :layout_type           => String: Layout type of the dashboard.
  #                             Allowed values: 'ordered' or 'free'
  # Optional arguments:
  # :description           => String: Description of the dashboard
  # :is_read_only          => Boolean: Whether this dashboard is read-only.
  #                           If True, only the author and admins can make changes to it.
  # :notify_list           => JSON: List of handles of users to notify when changes are made to this dashboard
  #                           e.g. '["user1@domain.com", "user2@domain.com"]'
  # :template_variables    => JSON: List of template variables for this dashboard.
  #                           e.g. [{"name": "host", "prefix": "host", "default": "my-host"}]
  # :template_variable_presets => JSON: List of template variables saved views
  #                           e.g. {
  #                                  "name": "my_template_variable_preset",
  #                                  "template_variables": [{"name": "host", "prefix": "host", "default": "my-host"}]
  #                                }
  #
  # source://dogapi//lib/dogapi/v1/dashboard.rb#34
  def create_board(title, widgets, layout_type, options); end

  # Delete the given dashboard
  #
  # Required argument:
  # :dashboard_id          => String: ID of the dashboard
  #
  # source://dogapi//lib/dogapi/v1/dashboard.rb#106
  def delete_board(dashboard_id); end

  # Fetch all custom dashboards
  #
  # source://dogapi//lib/dogapi/v1/dashboard.rb#98
  def get_all_boards; end

  # Fetch the given dashboard
  #
  # Required argument:
  # :dashboard_id          => String: ID of the dashboard
  #
  # source://dogapi//lib/dogapi/v1/dashboard.rb#93
  def get_board(dashboard_id); end

  # Update a dashboard
  #
  # Required arguments:
  # :dashboard_id          => String: ID of the dashboard
  # :title                 => String: Title of the dashboard
  # :widgets               => JSON: List of widgets to display on the dashboard
  # :layout_type           => String: Layout type of the dashboard.
  #                             Allowed values: 'ordered' or 'free'
  # Optional arguments:
  # :description           => String: Description of the dashboard
  # :is_read_only          => Boolean: Whether this dashboard is read-only.
  #                           If True, only the author and admins can make changes to it.
  # :notify_list           => JSON: List of handles of users to notify when changes are made to this dashboard
  #                           e.g. '["user1@domain.com", "user2@domain.com"]'
  # :template_variables    => JSON: List of template variables for this dashboard.
  #                           e.g. [{"name": "host", "prefix": "host", "default": "my-host"}]
  # :template_variable_presets => JSON: List of template variables saved views
  #                           e.g. {
  #                                  "name": "my_template_variable_preset",
  #                                  "template_variables": [{"name": "host", "prefix": "host", "default": "my-host"}]
  #                                }
  #
  # source://dogapi//lib/dogapi/v1/dashboard.rb#72
  def update_board(dashboard_id, title, widgets, layout_type, options); end
end

# source://dogapi//lib/dogapi/v1/dashboard.rb#11
Dogapi::V1::DashboardService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/dashboard.rb#12
Dogapi::V1::DashboardService::RESOURCE_NAME = T.let(T.unsafe(nil), String)

# ================
#    EMBED API
# ================
#
# source://dogapi//lib/dogapi/v1/embed.rb#11
class Dogapi::V1::EmbedService < ::Dogapi::APIService
  # Create an embeddable graph
  #
  # :graph_json  => JSON: graph definition
  # :timeframe   => String: representing the interval of the graph. Default is "1_hour"
  # :size        => String: representing the size of the graph. Default is "medium".
  # :legend      => String: flag representing whether a legend is displayed. Default is "no".
  # :title       => String: represents title of the graph. Default is "Embed created through API."
  #
  # source://dogapi//lib/dogapi/v1/embed.rb#37
  def create_embed(graph_json, description = T.unsafe(nil)); end

  # Enable a specific embed
  #
  # :embed_id  => String: embed token for a specific embed
  #
  # source://dogapi//lib/dogapi/v1/embed.rb#48
  def enable_embed(embed_id); end

  # Get all embeds for the API user's org
  #
  # source://dogapi//lib/dogapi/v1/embed.rb#16
  def get_all_embeds; end

  # Get a specific embed
  #
  # :embed_id       => String: embed token for a specific embed
  # :size           => String: "small", "medium"(defualt), "large", or "xlarge".
  # :legend         => String: "yes" or "no"(default)
  # :template_vars  => String: variable name => variable value (any number of template vars)
  #
  # source://dogapi//lib/dogapi/v1/embed.rb#26
  def get_embed(embed_id, description = T.unsafe(nil)); end

  # Revoke a specific embed
  #
  # :embed_id  => String: embed token for a specific embed
  #
  # source://dogapi//lib/dogapi/v1/embed.rb#55
  def revoke_embed(embed_id); end
end

# source://dogapi//lib/dogapi/v1/embed.rb#13
Dogapi::V1::EmbedService::API_VERSION = T.let(T.unsafe(nil), String)

# Event-specific client affording more granular control than the simple Dogapi::Client
#
# source://dogapi//lib/dogapi/v1/event.rb#9
class Dogapi::V1::EventService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/event.rb#34
  def delete(id); end

  # source://dogapi//lib/dogapi/v1/event.rb#30
  def get(id); end

  # Records an Event with no duration
  #
  # source://dogapi//lib/dogapi/v1/event.rb#16
  def post(event, scope = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/event.rb#38
  def stream(start, stop, options = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/event.rb#11
Dogapi::V1::EventService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/event.rb#12
Dogapi::V1::EventService::MAX_BODY_LENGTH = T.let(T.unsafe(nil), Integer)

# source://dogapi//lib/dogapi/v1/event.rb#13
Dogapi::V1::EventService::MAX_TITLE_LENGTH = T.let(T.unsafe(nil), Integer)

# GcpIntegrationService for user interaction with gcp configs.
#
# source://dogapi//lib/dogapi/v1/gcp_integration.rb#9
class Dogapi::V1::GcpIntegrationService < ::Dogapi::APIService
  # Create an gcp integration
  # :config => Hash: integration config.
  # config = {
  #   :type => 'service_account',
  #   :project_id => '<PROJECT_ID>',
  #   :private_key_id => '<PRIVATE_KEY_ID>',
  #   :private_key => '<PRIVATE_KEY>',
  #   :client_email => '<CLIENT_EMAIL>',
  #   :client_id => '<CLIENT_ID>',
  #   :auth_uri => '<AUTH_URI>',
  #   :token_uri => '<TOKEN_URI>',
  #   :auth_provider_x509_cert_url => '<AUTH_PROVIDER_X509_CERT_URL>',
  #   :client_x509_cert_url => '<CLIENT_X509_CERT_URL>',
  #   :host_filters => '<KEY>:<VALUE>,<KEY>:<VALUE>,'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.gcp_integration_create(config)
  #
  # source://dogapi//lib/dogapi/v1/gcp_integration.rb#51
  def gcp_integration_create(config); end

  # Delete an gcp integration
  # :config => Hash: integration config.
  # config = {
  #   :project_id => 'datadog-sandbox',
  #   :client_email => 'email@example.com'
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.gcp_integration_delete(config)
  #
  # source://dogapi//lib/dogapi/v1/gcp_integration.rb#28
  def gcp_integration_delete(config); end

  # Retrieve gcp integration information
  #
  # source://dogapi//lib/dogapi/v1/gcp_integration.rb#14
  def gcp_integration_list; end

  # Update a configured gcp account.
  # :config => Hash: integration config.
  # config = {
  #   :project_id => '<PROJECT_ID>',
  #   :client_email => '<CLIENT_EMAIL>',
  #   :host_filters => '<KEY>:<VALUE>,<KEY>:<VALUE>,'
  #   :automute => true # takes a boolean and toggles GCE automuting
  # }
  #
  # dog = Dogapi::Client.new(api_key, app_key)
  #
  # puts dog.gcp_integration_update(config)
  #
  # source://dogapi//lib/dogapi/v1/gcp_integration.rb#67
  def gcp_integration_update(config); end
end

# source://dogapi//lib/dogapi/v1/gcp_integration.rb#11
Dogapi::V1::GcpIntegrationService::API_VERSION = T.let(T.unsafe(nil), String)

# Hosts API
#
# source://dogapi//lib/dogapi/v1/hosts.rb#9
class Dogapi::V1::HostsService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/hosts.rb#13
  def search(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/hosts.rb#17
  def totals; end
end

# source://dogapi//lib/dogapi/v1/hosts.rb#11
Dogapi::V1::HostsService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/integration.rb#8
class Dogapi::V1::IntegrationService < ::Dogapi::APIService
  # Create an integration
  #
  # :source_type_name => String: the name of an integration source
  # :config => Hash: integration config that varies based on the source type.
  # See https://docs.datadoghq.com/api/#integrations.
  #
  # source://dogapi//lib/dogapi/v1/integration.rb#17
  def create_integration(source_type_name, config); end

  # Delete an integration
  #
  # :source_type_name => String: the name of an integration source
  #
  # source://dogapi//lib/dogapi/v1/integration.rb#40
  def delete_integration(source_type_name); end

  # Retrieve integration information
  #
  # :source_type_name => String: the name of an integration source
  #
  # source://dogapi//lib/dogapi/v1/integration.rb#33
  def get_integration(source_type_name); end

  # Update an integration
  #
  # :source_type_name => String: the name of an integration source
  # :config => Hash: integration config that varies based on the source type.
  # source type (https://docs.datadoghq.com/api/#integrations)
  #
  # source://dogapi//lib/dogapi/v1/integration.rb#26
  def update_integration(source_type_name, config); end
end

# source://dogapi//lib/dogapi/v1/integration.rb#10
Dogapi::V1::IntegrationService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/logs_pipeline.rb#7
class Dogapi::V1::LogsPipelineService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/logs_pipeline.rb#10
  def create_logs_pipeline(name, filter, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/logs_pipeline.rb#36
  def delete_logs_pipeline(pipeline_id); end

  # source://dogapi//lib/dogapi/v1/logs_pipeline.rb#23
  def get_all_logs_pipelines; end

  # source://dogapi//lib/dogapi/v1/logs_pipeline.rb#19
  def get_logs_pipeline(pipeline_id); end

  # source://dogapi//lib/dogapi/v1/logs_pipeline.rb#27
  def update_logs_pipeline(pipeline_id, name, filter, options = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/logs_pipeline.rb#8
Dogapi::V1::LogsPipelineService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/metadata.rb#8
class Dogapi::V1::MetadataService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/metadata.rb#12
  def get(metric_name); end

  # source://dogapi//lib/dogapi/v1/metadata.rb#16
  def update(metric_name, options = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/metadata.rb#10
Dogapi::V1::MetadataService::API_VERSION = T.let(T.unsafe(nil), String)

# Event-specific client affording more granular control than the simple Dogapi::Client
#
# source://dogapi//lib/dogapi/v1/metric.rb#9
class Dogapi::V1::MetricService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/metric.rb#40
  def flush_buffer; end

  # source://dogapi//lib/dogapi/v1/metric.rb#13
  def get(query, from, to); end

  # source://dogapi//lib/dogapi/v1/metric.rb#89
  def get_active_metrics(from); end

  # source://dogapi//lib/dogapi/v1/metric.rb#62
  def make_metric_payload(metric, points, scope, options); end

  # source://dogapi//lib/dogapi/v1/metric.rb#46
  def submit(*args); end

  # source://dogapi//lib/dogapi/v1/metric.rb#29
  def submit_to_api(metric, points, scope, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/metric.rb#34
  def submit_to_buffer(metric, points, scope, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/metric.rb#54
  def switch_to_batched; end

  # source://dogapi//lib/dogapi/v1/metric.rb#58
  def switch_to_single; end

  # source://dogapi//lib/dogapi/v1/metric.rb#22
  def upload(metrics); end
end

# source://dogapi//lib/dogapi/v1/metric.rb#11
Dogapi::V1::MetricService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/monitor.rb#7
class Dogapi::V1::MonitorService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/monitor.rb#45
  def can_delete_monitors(monitor_ids); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#140
  def cancel_downtime(downtime_id); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#144
  def cancel_downtime_by_scope(scope); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#56
  def delete_monitor(monitor_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#148
  def get_all_downtimes(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#60
  def get_all_monitors(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#136
  def get_downtime(downtime_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#32
  def get_monitor(monitor_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#10
  def monitor(type, query, options = T.unsafe(nil)); end

  # HOST MUTING
  #
  # source://dogapi//lib/dogapi/v1/monitor.rb#155
  def mute_host(hostname, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#94
  def mute_monitor(monitor_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#86
  def mute_monitors; end

  # source://dogapi//lib/dogapi/v1/monitor.rb#102
  def resolve_monitors(monitor_groups = T.unsafe(nil), options = T.unsafe(nil), version = T.unsafe(nil)); end

  # DOWNTIMES
  #
  # source://dogapi//lib/dogapi/v1/monitor.rb#124
  def schedule_downtime(scope, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#117
  def search_monitor_groups(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#113
  def search_monitors(options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#159
  def unmute_host(hostname); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#98
  def unmute_monitor(monitor_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#90
  def unmute_monitors; end

  # source://dogapi//lib/dogapi/v1/monitor.rb#132
  def update_downtime(downtime_id, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#19
  def update_monitor(monitor_id, query = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/monitor.rb#77
  def validate_monitor(type, query, options = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/monitor.rb#8
Dogapi::V1::MonitorService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/screenboard.rb#8
class Dogapi::V1::ScreenboardService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/screenboard.rb#12
  def create_screenboard(description); end

  # source://dogapi//lib/dogapi/v1/screenboard.rb#28
  def delete_screenboard(board_id); end

  # source://dogapi//lib/dogapi/v1/screenboard.rb#24
  def get_all_screenboards; end

  # source://dogapi//lib/dogapi/v1/screenboard.rb#20
  def get_screenboard(board_id); end

  # source://dogapi//lib/dogapi/v1/screenboard.rb#36
  def revoke_screenboard(board_id); end

  # source://dogapi//lib/dogapi/v1/screenboard.rb#32
  def share_screenboard(board_id); end

  # source://dogapi//lib/dogapi/v1/screenboard.rb#16
  def update_screenboard(board_id, description); end
end

# source://dogapi//lib/dogapi/v1/screenboard.rb#10
Dogapi::V1::ScreenboardService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/search.rb#8
class Dogapi::V1::SearchService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/search.rb#12
  def search(query); end
end

# source://dogapi//lib/dogapi/v1/search.rb#10
Dogapi::V1::SearchService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/service_check.rb#8
class Dogapi::V1::ServiceCheckService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/service_check.rb#12
  def service_check(check, host, status, options = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/service_check.rb#10
Dogapi::V1::ServiceCheckService::API_VERSION = T.let(T.unsafe(nil), String)

# Implements Service Level Objectives endpoints
#
# source://dogapi//lib/dogapi/v1/service_level_objective.rb#9
class Dogapi::V1::ServiceLevelObjectiveService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#103
  def can_delete_service_level_objective(slo_ids); end

  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#13
  def create_service_level_objective(type, slo_name, thresholds, options = T.unsafe(nil)); end

  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#83
  def delete_many_service_level_objective(slo_ids); end

  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#79
  def delete_service_level_objective(slo_id); end

  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#90
  def delete_timeframes_service_level_objective(ops); end

  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#62
  def get_service_level_objective(slo_id); end

  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#95
  def get_service_level_objective_history(slo_id, from_ts, to_ts); end

  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#66
  def search_service_level_objective(slo_ids, query, offset, limit); end

  # source://dogapi//lib/dogapi/v1/service_level_objective.rb#37
  def update_service_level_objective(slo_id, type, options = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/service_level_objective.rb#11
Dogapi::V1::ServiceLevelObjectiveService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/snapshot.rb#8
class Dogapi::V1::SnapshotService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v1/snapshot.rb#12
  def snapshot(metric_query, start_ts, end_ts, event_query = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/snapshot.rb#10
Dogapi::V1::SnapshotService::API_VERSION = T.let(T.unsafe(nil), String)

# SyntheticsService is the class responsible for dealing with the synthetics
#
# source://dogapi//lib/dogapi/v1/synthetics.rb#8
class Dogapi::V1::SyntheticsService < ::Dogapi::APIService
  # Create a synthetics test: POST /v1/synthetics/tests/
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#13
  def create_synthetics_test(type, config, options = T.unsafe(nil)); end

  # Delete synthetics tests
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#33
  def delete_synthetics_tests(test_ids); end

  # Get all synthetics tests: GET /v1/synthetics/tests
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#49
  def get_all_synthetics_tests; end

  # Get devices for browser checks: GET /v1/synthetics/browser/devices
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#70
  def get_synthetics_devices; end

  # Get available locations: GET /v1/synthetics/locations
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#75
  def get_synthetics_locations; end

  # Get a specific result for a synthetics test:
  # GET /v1/synthetics/tests/<SYNTHETICS_TEST_PUBLIC_ID>/results/<RESULT_ID>
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#65
  def get_synthetics_result(test_id, result_id); end

  # Get the most recent results for a synthetics test: GET /v1/synthetics/tests/<SYNTHETICS_TEST_PUBLIC_ID>/results
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#59
  def get_synthetics_results(test_id); end

  # Get info on a synthetics test: GET /v1/synthetics/tests/<SYNTHETICS_TEST_PUBLIC_ID>
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#54
  def get_synthetics_test(test_id); end

  # Start of pause a synthetics test: POST /v1/synthetics/tests/<SYNTHETICS_TEST_PUBLIC_ID>/status
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#41
  def start_pause_synthetics_test(test_id, new_status); end

  # Edit a synthetics test: PUT /v1/synthetics/tests/<SYNTHETICS_TEST_PUBLIC_ID>
  #
  # source://dogapi//lib/dogapi/v1/synthetics.rb#23
  def update_synthetics_test(test_id, type, config, options = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/synthetics.rb#10
Dogapi::V1::SyntheticsService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/tag.rb#9
class Dogapi::V1::TagService < ::Dogapi::APIService
  # Adds a list of tags to a host
  #
  # source://dogapi//lib/dogapi/v1/tag.rb#37
  def add(host_id, tags, source = T.unsafe(nil)); end

  # Remove all tags from a host
  #
  # source://dogapi//lib/dogapi/v1/tag.rb#71
  def detach(host_id, source = T.unsafe(nil)); end

  # <b>DEPRECATED:</b> Spelling mistake temporarily preserved as an alias.
  #
  # source://dogapi//lib/dogapi/v1/tag.rb#65
  def detatch(host_id); end

  # Gets all tags for a given host
  #
  # source://dogapi//lib/dogapi/v1/tag.rb#24
  def get(host_id, source = T.unsafe(nil), by_source = T.unsafe(nil)); end

  # Gets all tags in your org and the hosts tagged with them
  #
  # source://dogapi//lib/dogapi/v1/tag.rb#14
  def get_all(source = T.unsafe(nil)); end

  # Remove all tags from a host and replace them with a new list
  #
  # source://dogapi//lib/dogapi/v1/tag.rb#51
  def update(host_id, tags, source = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/tag.rb#11
Dogapi::V1::TagService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/usage.rb#8
class Dogapi::V1::UsageService < ::Dogapi::APIService
  # Retrieve hourly custom metrics usage information
  #
  # :start_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, for usage beginning at this hour
  # :end_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, default start_hr+1d, for usage ending BEFORE this hour
  #
  # source://dogapi//lib/dogapi/v1/usage.rb#44
  def get_custom_metrics_usage(start_hr, end_hr = T.unsafe(nil)); end

  # Retrieve hourly fargate usage information
  #
  # :start_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, for usage beginning at this hour
  # :end_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, default start_hr+1d, for usage ending BEFORE this hour
  #
  # source://dogapi//lib/dogapi/v1/usage.rb#86
  def get_fargate_usage(start_hr, end_hr = T.unsafe(nil)); end

  # Retrieve hourly host usage information
  #
  # :start_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, for usage beginning at this hour
  # :end_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, default start_hr+1d, for usage ending BEFORE this hour
  #
  # source://dogapi//lib/dogapi/v1/usage.rb#16
  def get_hosts_usage(start_hr, end_hr = T.unsafe(nil)); end

  # Retrieve hourly logs usage information
  #
  # :start_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, for usage beginning at this hour
  # :end_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, default start_hr+1d, for usage ending BEFORE this hour
  #
  # source://dogapi//lib/dogapi/v1/usage.rb#30
  def get_logs_usage(start_hr, end_hr = T.unsafe(nil)); end

  # Retrieve hourly synthetics usage information
  #
  # :start_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, for usage beginning at this hour
  # :end_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, default start_hr+1d, for usage ending BEFORE this hour
  #
  # source://dogapi//lib/dogapi/v1/usage.rb#72
  def get_synthetics_usage(start_hr, end_hr = T.unsafe(nil)); end

  # Retrieve hourly trace search usage information
  #
  # :start_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, for usage beginning at this hour
  # :end_hr => String: Datetime ISO-8601 UTC YYYY-MM-DDThh, default start_hr+1d, for usage ending BEFORE this hour
  #
  # source://dogapi//lib/dogapi/v1/usage.rb#58
  def get_traces_usage(start_hr, end_hr = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/usage.rb#10
Dogapi::V1::UsageService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v1/user.rb#8
class Dogapi::V1::UserService < ::Dogapi::APIService
  # Create a user
  #
  # :description => Hash: user description containing 'handle' and 'name' properties
  #
  # source://dogapi//lib/dogapi/v1/user.rb#27
  def create_user(description = T.unsafe(nil)); end

  # Disable a user
  #
  # :handle => String: user handle
  #
  # source://dogapi//lib/dogapi/v1/user.rb#55
  def disable_user(handle); end

  # Retrieve all users
  #
  # source://dogapi//lib/dogapi/v1/user.rb#39
  def get_all_users; end

  # Retrieve user information
  #
  # :handle => String: user handle
  #
  # source://dogapi//lib/dogapi/v1/user.rb#34
  def get_user(handle); end

  # <b>DEPRECATED:</b> Going forward, we're using a new and more restful API,
  # the new methods are get_user, create_user, update_user, disable_user
  #
  # source://dogapi//lib/dogapi/v1/user.rb#14
  def invite(emails, options = T.unsafe(nil)); end

  # Update a user
  #
  # :handle => String: user handle
  # :description => Hash: user description optionally containing 'name', 'email',
  # 'is_admin', 'disabled' properties
  #
  # source://dogapi//lib/dogapi/v1/user.rb#48
  def update_user(handle, description = T.unsafe(nil)); end
end

# source://dogapi//lib/dogapi/v1/user.rb#10
Dogapi::V1::UserService::API_VERSION = T.let(T.unsafe(nil), String)

# for namespacing
#
# source://dogapi//lib/dogapi/v2/dashboard_list.rb#6
class Dogapi::V2; end

# Dashboard List API
#
# source://dogapi//lib/dogapi/v2/dashboard_list.rb#9
class Dogapi::V2::DashboardListService < ::Dogapi::APIService
  # source://dogapi//lib/dogapi/v2/dashboard_list.rb#25
  def add_items(resource_id, dashboards); end

  # source://dogapi//lib/dogapi/v2/dashboard_list.rb#53
  def delete_items(resource_id, dashboards); end

  # source://dogapi//lib/dogapi/v2/dashboard_list.rb#15
  def get_items(resource_id); end

  # source://dogapi//lib/dogapi/v2/dashboard_list.rb#39
  def update_items(resource_id, dashboards); end
end

# source://dogapi//lib/dogapi/v2/dashboard_list.rb#11
Dogapi::V2::DashboardListService::API_VERSION = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v2/dashboard_list.rb#12
Dogapi::V2::DashboardListService::RESOURCE_NAME = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/v2/dashboard_list.rb#13
Dogapi::V2::DashboardListService::SUB_RESOURCE_NAME = T.let(T.unsafe(nil), String)

# source://dogapi//lib/dogapi/version.rb#6
Dogapi::VERSION = T.let(T.unsafe(nil), String)
