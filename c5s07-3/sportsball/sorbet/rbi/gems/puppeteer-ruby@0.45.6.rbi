# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `puppeteer-ruby` gem.
# Please instead update this file by running `bin/tapioca gem puppeteer-ruby`.


# source://puppeteer-ruby//lib/puppeteer/events.rb#61
module BrowserContextEmittedEvents
  class << self
    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetChanged; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetCreated; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetDestroyed; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#17
    def keys; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#18
    def values; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
BrowserContextEmittedEvents::TargetChanged = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
BrowserContextEmittedEvents::TargetCreated = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
BrowserContextEmittedEvents::TargetDestroyed = T.let(T.unsafe(nil), String)

# All the events a Browser may emit.
#
# source://puppeteer-ruby//lib/puppeteer/events.rb#40
module BrowserEmittedEvents
  class << self
    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Disconnected; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetChanged; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetCreated; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetDestroyed; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#17
    def keys; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#18
    def values; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
BrowserEmittedEvents::Disconnected = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
BrowserEmittedEvents::TargetChanged = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
BrowserEmittedEvents::TargetCreated = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
BrowserEmittedEvents::TargetDestroyed = T.let(T.unsafe(nil), String)

# Internal events that the CDPSession class emits.
#
# source://puppeteer-ruby//lib/puppeteer/events.rb#33
module CDPSessionEmittedEvents
  class << self
    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Disconnected; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#17
    def keys; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#18
    def values; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
CDPSessionEmittedEvents::Disconnected = T.let(T.unsafe(nil), String)

# Internal events that the Connection class emits.
#
# source://puppeteer-ruby//lib/puppeteer/events.rb#26
module ConnectionEmittedEvents
  class << self
    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Disconnected; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#17
    def keys; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#18
    def values; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
ConnectionEmittedEvents::Disconnected = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#3
module EventsDefinitionUtils
  private

  # symbol is used to prevent external parties listening to these events
  #
  # source://puppeteer-ruby//lib/puppeteer/events.rb#5
  def symbol(str); end

  class << self
    # symbol is used to prevent external parties listening to these events
    #
    # source://puppeteer-ruby//lib/puppeteer/events.rb#5
    def symbol(str); end
  end
end

# We use symbols to prevent external parties listening to these events.
# They are internal to Puppeteer.
#
# source://puppeteer-ruby//lib/puppeteer/events.rb#93
module FrameManagerEmittedEvents
  class << self
    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def ExecutionContextCreated; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def ExecutionContextDestroyed; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def FrameAttached; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def FrameDetached; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def FrameNavigated; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def FrameNavigatedWithinDocument; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def FrameSwapped; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def LifecycleEvent; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#17
    def keys; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#18
    def values; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
FrameManagerEmittedEvents::ExecutionContextCreated = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
FrameManagerEmittedEvents::ExecutionContextDestroyed = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
FrameManagerEmittedEvents::FrameAttached = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
FrameManagerEmittedEvents::FrameDetached = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
FrameManagerEmittedEvents::FrameNavigated = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
FrameManagerEmittedEvents::FrameNavigatedWithinDocument = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
FrameManagerEmittedEvents::FrameSwapped = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
FrameManagerEmittedEvents::LifecycleEvent = T.let(T.unsafe(nil), String)

# We use symbols to prevent any external parties listening to these events.
# They are internal to Puppeteer.
#
# source://puppeteer-ruby//lib/puppeteer/events.rb#80
module NetworkManagerEmittedEvents
  class << self
    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Request; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def RequestFailed; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def RequestFinished; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def RequestServedFromCache; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Response; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#17
    def keys; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#18
    def values; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
NetworkManagerEmittedEvents::Request = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
NetworkManagerEmittedEvents::RequestFailed = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
NetworkManagerEmittedEvents::RequestFinished = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
NetworkManagerEmittedEvents::RequestServedFromCache = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
NetworkManagerEmittedEvents::Response = T.let(T.unsafe(nil), String)

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::Puppeteer::ConcurrentRubyUtils
end

# All the events that a page instance may emit.
#
# source://puppeteer-ruby//lib/puppeteer/events.rb#107
module PageEmittedEvents
  class << self
    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Close; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Console; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def DOMContentLoaded; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Dialog; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Error; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def FrameAttached; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def FrameDetached; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def FrameNavigated; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Load; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Metrics; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def PageError; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Popup; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Request; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def RequestFailed; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def RequestFinished; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def Response; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def WorkerCreated; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def WorkerDestroyed; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#17
    def keys; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#18
    def values; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Close = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Console = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::DOMContentLoaded = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Dialog = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Error = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::FrameAttached = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::FrameDetached = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::FrameNavigated = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Load = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Metrics = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::PageError = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Popup = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Request = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::RequestFailed = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::RequestFinished = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::Response = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::WorkerCreated = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
PageEmittedEvents::WorkerDestroyed = T.let(T.unsafe(nil), String)

# ref: https://github.com/puppeteer/puppeteer/blob/master/lib/Puppeteer.js
#
# source://puppeteer-ruby//lib/puppeteer.rb#3
module Puppeteer
  private

  # source://puppeteer-ruby//lib/puppeteer/env.rb#24
  def env; end

  class << self
    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def connect(*args, **kwargs, &block); end

    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def default_args(*args, **kwargs, &block); end

    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def devices(*args, **kwargs, &block); end

    # source://puppeteer-ruby//lib/puppeteer/env.rb#24
    def env; end

    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def executable_path(*args, **kwargs, &block); end

    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def launch(*args, **kwargs, &block); end

    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def network_conditions(*args, **kwargs, &block); end

    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def product(*args, **kwargs, &block); end

    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def register_custom_query_handler(*args, **kwargs, &block); end

    # source://puppeteer-ruby//lib/puppeteer.rb#82
    def with_custom_query_handler(*args, **kwargs, &block); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/aria_query_handler.rb#1
class Puppeteer::AriaQueryHandler
  # source://puppeteer-ruby//lib/puppeteer/aria_query_handler.rb#96
  def query_all(element, selector); end

  # source://puppeteer-ruby//lib/puppeteer/aria_query_handler.rb#110
  def query_all_array(element, selector); end

  # source://puppeteer-ruby//lib/puppeteer/aria_query_handler.rb#41
  def query_one(element, selector); end

  # source://puppeteer-ruby//lib/puppeteer/aria_query_handler.rb#51
  def wait_for(element_or_frame, selector, visible: T.unsafe(nil), hidden: T.unsafe(nil), timeout: T.unsafe(nil)); end

  private

  # source://puppeteer-ruby//lib/puppeteer/aria_query_handler.rb#2
  def normalize(value); end

  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/aria_query_handler.rb#7
  def parse_aria_selector(selector); end

  # @param element [Puppeteer::ElementHandle]
  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/aria_query_handler.rb#30
  def query_one_id(element, selector); end
end

# source://puppeteer-ruby//lib/puppeteer/browser.rb#4
class Puppeteer::Browser
  include ::Puppeteer::DebugPrint
  include ::Puppeteer::EventCallbackable
  include ::Puppeteer::IfPresent

  # @param product [String|nil] 'chrome' or 'firefox'
  # @param connection [!Puppeteer.Connection]
  # @param contextIds [!Array<string>]
  # @param ignoreHTTPSErrors [boolean]
  # @param defaultViewport [?Puppeteer.Viewport]
  # @param process [?Puppeteer.ChildProcess]
  # @param closeCallback [(function():Promise)=]
  # @return [Browser] a new instance of Browser
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#48
  def initialize(product:, connection:, context_ids:, ignore_https_errors:, default_viewport:, process:, close_callback:, target_filter_callback:, is_page_target_callback:); end

  # @param predicate [Proc(Puppeteer::Target -> Boolean] ]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_target(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#161
  def browser_contexts; end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#337
  def close; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#347
  def connected?; end

  # @return [Puppeteer::BrowserContext]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#155
  def create_incognito_browser_context; end

  # @param contextId [?string]
  # @return [!Promise<!Puppeteer.Page>]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#250
  def create_page_in_context(context_id); end

  # @param target_info [Puppeteer::Target::TargetInfo]
  # @param session [CDPSession|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#181
  def create_target(target_info, session); end

  # @return [Puppeteer::BrowserContext]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#166
  def default_browser_context; end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#342
  def disconnect; end

  # @param context_id [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#171
  def dispose_context(context_id); end

  # Returns the value of attribute is_page_target_callback.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#95
  def is_page_target_callback; end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#241
  def new_page; end

  # @param event_name [Symbol] either of :disconnected, :targetcreated, :targetchanged, :targetdestroyed
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#98
  def on(event_name, &block); end

  # @param event_name [Symbol]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#107
  def once(event_name, &block); end

  # @return [!Promise<!Array<!Puppeteer.Page>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#323
  def pages; end

  # @return [Puppeteer::BrowserRunner::BrowserProcess]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#146
  def process; end

  # The target associated with the browser.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#279
  def target; end

  # All active targets inside the Browser. In case of multiple browser contexts, returns
  # an array with all the targets in all browser contexts.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#273
  def targets; end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#333
  def user_agent; end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#328
  def version; end

  # @param predicate [Proc(Puppeteer::Target -> Boolean] ]
  # @return [Puppeteer::Target]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_target(*args, **kwargs, &block); end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#237
  def ws_endpoint; end

  private

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#115
  def attach; end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#91
  def default_is_page_target_callback(target_info); end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#87
  def default_target_filter_callback(target_info); end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#140
  def detach; end

  # used only in Target#opener
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#284
  def find_target_by_id(target_id); end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#206
  def handle_attached_to_target(target); end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#213
  def handle_detached_from_target(target); end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#222
  def handle_target_changed(target, target_info); end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#232
  def handle_target_discovered(target_info); end

  # source://puppeteer-ruby//lib/puppeteer/browser.rb#150
  def target_manager; end

  class << self
    # @param product [String|nil] 'chrome' or 'firefox'
    # @param connection [!Puppeteer.Connection]
    # @param contextIds [!Array<string>]
    # @param ignoreHTTPSErrors [boolean]
    # @param defaultViewport [?Puppeteer.Viewport]
    # @param process [Puppeteer::BrowserRunner::BrowserProcess|NilClass]
    # @param closeCallback [function()=]
    #
    # source://puppeteer-ruby//lib/puppeteer/browser.rb#17
    def create(product:, connection:, context_ids:, ignore_https_errors:, default_viewport:, process:, close_callback:, target_filter_callback:, is_page_target_callback:); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/browser.rb#246
class Puppeteer::Browser::CreatePageError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/browser.rb#177
class Puppeteer::Browser::MissingBrowserContextError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/browser.rb#245
class Puppeteer::Browser::MissingTargetError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/browser.rb#351
class Puppeteer::Browser::Version
  # @return [Version] a new instance of Version
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#356
  def initialize(hash); end

  # Returns the value of attribute js_version.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#364
  def js_version; end

  # Returns the value of attribute product.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#364
  def product; end

  # Returns the value of attribute protocol_version.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#364
  def protocol_version; end

  # Returns the value of attribute revision.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#364
  def revision; end

  # Returns the value of attribute user_agent.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser.rb#364
  def user_agent; end

  class << self
    # source://puppeteer-ruby//lib/puppeteer/browser.rb#352
    def fetch(connection); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/browser_connector.rb#4
class Puppeteer::BrowserConnector
  # @return [BrowserConnector] a new instance of BrowserConnector
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_connector.rb#5
  def initialize(options); end

  # @return [Puppeteer::Browser]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_connector.rb#13
  def connect_to_browser; end

  private

  # @return [Puppeteer::Connection]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_connector.rb#53
  def connect_with_browser_url(browser_url); end

  # @return [Puppeteer::Connection]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_connector.rb#47
  def connect_with_browser_ws_endpoint(browser_ws_endpoint); end

  # @return [Puppeteer::Connection]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_connector.rb#64
  def connect_with_transport(transport); end

  # source://puppeteer-ruby//lib/puppeteer/browser_connector.rb#33
  def connection; end
end

# source://puppeteer-ruby//lib/puppeteer/browser_context.rb#1
class Puppeteer::BrowserContext
  include ::Puppeteer::EventCallbackable

  # @param connection [!Puppeteer.Connection]
  # @param browser [!Browser]
  # @param contextId [?string]
  # @return [BrowserContext] a new instance of BrowserContext
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#8
  def initialize(connection, browser, context_id); end

  # @param predicate [Proc(Puppeteer::Target -> Boolean] ]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_target(*args, **kwargs); end

  # @return [Browser]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#114
  def browser; end

  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#100
  def clear_permission_overrides; end

  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#118
  def close; end

  # Returns the value of attribute id.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#14
  def id; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#60
  def incognito?; end

  # @return [Future<Puppeteer::Page>]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#109
  def new_page; end

  # @param event_name [Symbol] either of :disconnected, :targetcreated, :targetchanged, :targetdestroyed
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#17
  def on(event_name, &block); end

  # @param event_name [Symbol]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#26
  def once(event_name, &block); end

  # @param origin [String]
  # @param permissions [Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#89
  def override_permissions(origin, permissions); end

  # @return [!Promise<!Array<!Puppeteer.Page>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#54
  def pages; end

  # @return [!Array<!Target>] target
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_context.rb#35
  def targets; end

  # @param predicate [Proc(Puppeteer::Target -> Boolean] ]
  # @return [Puppeteer::Target]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_target(*args, **kwargs, &block); end
end

# source://puppeteer-ruby//lib/puppeteer/browser_context.rb#64
Puppeteer::BrowserContext::WEB_PERMISSION_TO_PROTOCOL = T.let(T.unsafe(nil), Hash)

# https://github.com/puppeteer/puppeteer/blob/master/lib/Launcher.js
#
# source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#6
class Puppeteer::BrowserRunner
  include ::Puppeteer::DebugPrint

  # @param executablePath [string]
  # @param processArguments [!Array<string>]
  # @param tempDirectory [string=]
  # @return [BrowserRunner] a new instance of BrowserRunner
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#12
  def initialize(for_firefox, executable_path, process_arguments, user_data_dir, using_temp_user_data_dir); end

  # @return [Promise]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#128
  def close; end

  # Returns the value of attribute connection.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#23
  def connection; end

  # @return [Promise]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#145
  def kill; end

  # Returns the value of attribute proc.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#23
  def proc; end

  # @param options [!({usePipe?: boolean, timeout: number, slowMo: number, preferredRevision: string})]
  # @return [!Promise<!Connection>]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#164
  def setup_connection(use_pipe:, timeout:, slow_mo:, preferred_revision:); end

  # @param options [!(Launcher.LaunchOptions)=]
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#64
  def start(executable_path: T.unsafe(nil), ignore_default_args: T.unsafe(nil), handle_SIGINT: T.unsafe(nil), handle_SIGTERM: T.unsafe(nil), handle_SIGHUP: T.unsafe(nil), timeout: T.unsafe(nil), dumpio: T.unsafe(nil), env: T.unsafe(nil), pipe: T.unsafe(nil)); end

  private

  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#176
  def wait_for_ws_endpoint(browser_process, timeout, preferred_revision); end
end

# source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#25
class Puppeteer::BrowserRunner::BrowserProcess
  # @return [BrowserProcess] a new instance of BrowserProcess
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#26
  def initialize(env, executable_path, args); end

  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#49
  def dispose; end

  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#43
  def kill; end

  # Returns the value of attribute spawnargs.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#54
  def spawnargs; end

  # Returns the value of attribute stderr.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#54
  def stderr; end

  # Returns the value of attribute stdout.
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#54
  def stdout; end
end

# source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#57
class Puppeteer::BrowserRunner::LaunchError < ::StandardError
  # @return [LaunchError] a new instance of LaunchError
  #
  # source://puppeteer-ruby//lib/puppeteer/browser_runner.rb#58
  def initialize(reason); end
end

# source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#1
class Puppeteer::CDPSession
  include ::Puppeteer::DebugPrint
  include ::Puppeteer::EventCallbackable

  # @param connection [!Connection]
  # @param targetType [string]
  # @param sessionId [string]
  # @return [CDPSession] a new instance of CDPSession
  #
  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#11
  def initialize(connection, target_type, session_id); end

  # @param method [String]
  # @param params [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#35
  def async_send_message(method, params = T.unsafe(nil)); end

  # Returns the value of attribute connection.
  #
  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#23
  def connection; end

  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#75
  def detach; end

  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#82
  def handle_closed; end

  # @param object [{id?: number, method: string, params: Object, error: {message: string, data: any}, result?: *}]
  #
  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#51
  def handle_message(message); end

  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#19
  def id; end

  # @param event_name [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#95
  def on(event_name, &block); end

  # @param event_name [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#100
  def once(event_name, &block); end

  # @param method [String]
  # @param params [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#28
  def send_message(method, params = T.unsafe(nil)); end

  private

  # source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#63
  def callback_with_message(callback, message); end
end

# source://puppeteer-ruby//lib/puppeteer/cdp_session.rb#6
class Puppeteer::CDPSession::Error < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#3
class Puppeteer::CSSCoverage
  include ::Puppeteer::Coverage::UtilFunctions

  # @param client [Puppeteer::CDPSession]
  # @return [CSSCoverage] a new instance of CSSCoverage
  #
  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#16
  def initialize(client); end

  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#23
  def start(reset_on_navigation: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#74
  def stop; end

  private

  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#50
  def on_execution_contexts_cleared; end

  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#56
  def on_stylesheet(event); end
end

# source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#6
class Puppeteer::CSSCoverage::Item
  # @return [Item] a new instance of Item
  #
  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#7
  def initialize(url:, ranges:, text:); end

  # Returns the value of attribute ranges.
  #
  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#12
  def ranges; end

  # Returns the value of attribute text.
  #
  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#12
  def text; end

  # Returns the value of attribute url.
  #
  # source://puppeteer-ruby//lib/puppeteer/css_coverage.rb#12
  def url; end
end

# source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#1
class Puppeteer::ChromeTargetManager
  include ::Puppeteer::DebugPrint
  include ::Puppeteer::EventCallbackable

  # @return [ChromeTargetManager] a new instance of ChromeTargetManager
  #
  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#5
  def initialize(connection:, target_factory:, target_filter_callback:); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#77
  def add_target_interceptor(client, interceptor); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#73
  def available_targets; end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#68
  def dispose; end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#58
  def init; end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#83
  def remove_target_interceptor(client, interceptor); end

  private

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#256
  def finish_initialization_if_ready(target_id = T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#162
  def handle_attached_to_target(parent_session, event); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#263
  def handle_detached_from_target(parent_session, event); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#107
  def handle_session_detached(session); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#112
  def handle_target_created(event); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#136
  def handle_target_destroyed(event); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#149
  def handle_target_info_changed(event); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#100
  def remove_attachment_listeners(session); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#87
  def setup_attachment_listeners(session); end

  # source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#50
  def store_existing_targets_for_init; end
end

# source://puppeteer-ruby//lib/puppeteer/chrome_target_manager.rb#160
class Puppeteer::ChromeTargetManager::SessionNotCreatedError < ::StandardError; end

# utility methods for Concurrent::Promises.
#
# source://puppeteer-ruby//lib/puppeteer/concurrent_ruby_utils.rb#2
module Puppeteer::ConcurrentRubyUtils
  # blocking get value of Future.
  #
  # source://puppeteer-ruby//lib/puppeteer/concurrent_ruby_utils.rb#52
  def await(future_or_value); end

  # wait for all promises.
  # REMARK: This method doesn't assure the order of calling.
  # for example, await_all(async1, async2) calls calls2 -> calls1 often.
  #
  # source://puppeteer-ruby//lib/puppeteer/concurrent_ruby_utils.rb#24
  def await_all(*args); end

  # wait for first promises.
  # REMARK: This method doesn't assure the order of calling.
  # for example, await_all(async1, async2) calls calls2 -> calls1 often.
  #
  # source://puppeteer-ruby//lib/puppeteer/concurrent_ruby_utils.rb#39
  def await_any(*args); end

  # source://puppeteer-ruby//lib/puppeteer/concurrent_ruby_utils.rb#60
  def future(*args, &block); end

  # source://puppeteer-ruby//lib/puppeteer/concurrent_ruby_utils.rb#72
  def resolvable_future(&block); end
end

# source://puppeteer-ruby//lib/puppeteer/concurrent_ruby_utils.rb#3
module Puppeteer::ConcurrentRubyUtils::ConcurrentPromisesFutureExtension
  # Extension for describing 2 concurrent tasks smartly.
  #
  # page.async_wait_for_navigation.with_waiting_for_complete do
  #   page.click('#submit')
  # end
  #
  # source://puppeteer-ruby//lib/puppeteer/concurrent_ruby_utils.rb#9
  def with_waiting_for_complete(&block); end
end

# source://puppeteer-ruby//lib/puppeteer/connection.rb#3
class Puppeteer::Connection
  include ::Puppeteer::DebugPrint
  include ::Puppeteer::EventCallbackable

  # @return [Connection] a new instance of Connection
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#39
  def initialize(url, transport, delay = T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#133
  def async_send_message(method, params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#323
  def auto_attached?(target_id); end

  # used only in Browser#connected?
  #
  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#65
  def closed?; end

  # @param targetInfo [Protocol.Target.TargetInfo]
  # @return [CDPSession]
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#329
  def create_session(target_info, auto_attach_emulated: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#318
  def dispose; end

  # package private. not intended to use externally.
  #
  # ```usage
  # connection.generate_id do |generated_id|
  #   # play with generated_id
  # end
  # ````
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#152
  def generate_id(&block); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#310
  def on_close(&block); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#314
  def on_message(&block); end

  # package private. not intended to use externally.
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#157
  def raw_send(id:, message:); end

  # @param method [string]
  # @param params [!Object=]
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#129
  def send_message(method, params = T.unsafe(nil)); end

  # @param sessionId [string]
  # @return [?CDPSession]
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#119
  def session(session_id); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#123
  def url; end

  private

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_handle_message(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#291
  def handle_close; end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#237
  def handle_message(message); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#229
  def request_debug_printer; end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#233
  def response_debug_printer; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#79
  def should_handle_synchronously?(message); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#69
  def sleep_before_handling_message(message); end

  class << self
    # source://puppeteer-ruby//lib/puppeteer/connection.rb#113
    def from_session(session); end
  end
end

# callback object stored in @callbacks.
#
# source://puppeteer-ruby//lib/puppeteer/connection.rb#20
class Puppeteer::Connection::MessageCallback
  # @param method [String]
  # @param promise [Concurrent::Promises::ResolvableFuture]
  # @return [MessageCallback] a new instance of MessageCallback
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#23
  def initialize(method:, promise:); end

  # Returns the value of attribute method.
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#36
  def method; end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#32
  def reject(error); end

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#28
  def resolve(result); end
end

# source://puppeteer-ruby//lib/puppeteer/connection.rb#8
class Puppeteer::Connection::ProtocolError < ::StandardError
  # @return [ProtocolError] a new instance of ProtocolError
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#9
  def initialize(method:, error_message:, error_data: T.unsafe(nil)); end
end

# Just for effective debugging :)
#
# source://puppeteer-ruby//lib/puppeteer/connection.rb#172
class Puppeteer::Connection::RequestDebugPrinter
  include ::Puppeteer::DebugPrint

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#175
  def handle_payload(payload); end

  private

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#179
  def decorate(payload); end
end

# source://puppeteer-ruby//lib/puppeteer/connection.rb#184
class Puppeteer::Connection::ResponseDebugPrinter
  include ::Puppeteer::DebugPrint

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#200
  def handle_message(message); end

  private

  # source://puppeteer-ruby//lib/puppeteer/connection.rb#215
  def decorate(message); end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/connection.rb#211
  def skip_debug_print?(method); end
end

# source://puppeteer-ruby//lib/puppeteer/connection.rb#187
Puppeteer::Connection::ResponseDebugPrinter::NON_DEBUG_PRINT_METHODS = T.let(T.unsafe(nil), Array)

# source://puppeteer-ruby//lib/puppeteer/console_message.rb#1
class Puppeteer::ConsoleMessage
  # @param log_type [String]
  # @param text [String]
  # @param args [Array<Puppeteer::JSHandle>]
  # @param stack_trace_locations [Array<Location>]
  # @return [ConsoleMessage] a new instance of ConsoleMessage
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#16
  def initialize(log_type, text, args, stack_trace_locations); end

  # Returns the value of attribute args.
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#23
  def args; end

  # @return [Location]
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#26
  def location; end

  # Returns the value of attribute log_type.
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#23
  def log_type; end

  # @return [Array<Location>]
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#31
  def stack_trace; end

  # Returns the value of attribute text.
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#23
  def text; end
end

# source://puppeteer-ruby//lib/puppeteer/console_message.rb#2
class Puppeteer::ConsoleMessage::Location
  # @return [Location] a new instance of Location
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#3
  def initialize(url:, line_number:, column_number: T.unsafe(nil)); end

  # Returns the value of attribute column_number.
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#9
  def column_number; end

  # Returns the value of attribute line_number.
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#9
  def line_number; end

  # Returns the value of attribute url.
  #
  # source://puppeteer-ruby//lib/puppeteer/console_message.rb#9
  def url; end
end

# source://puppeteer-ruby//lib/puppeteer/coverage.rb#1
class Puppeteer::Coverage
  # @param client [Puppeteer::CDPSession]
  # @return [Coverage] a new instance of Coverage
  #
  # source://puppeteer-ruby//lib/puppeteer/coverage.rb#3
  def initialize(client); end

  # source://puppeteer-ruby//lib/puppeteer/coverage.rb#53
  def css_coverage(reset_on_navigation: T.unsafe(nil), &block); end

  # source://puppeteer-ruby//lib/puppeteer/coverage.rb#25
  def js_coverage(reset_on_navigation: T.unsafe(nil), report_anonymous_scripts: T.unsafe(nil), include_raw_script_coverage: T.unsafe(nil), use_block_coverage: T.unsafe(nil), &block); end

  # source://puppeteer-ruby//lib/puppeteer/coverage.rb#45
  def start_css_coverage(reset_on_navigation: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/coverage.rb#8
  def start_js_coverage(reset_on_navigation: T.unsafe(nil), report_anonymous_scripts: T.unsafe(nil), include_raw_script_coverage: T.unsafe(nil), use_block_coverage: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/coverage.rb#49
  def stop_css_coverage; end

  # source://puppeteer-ruby//lib/puppeteer/coverage.rb#21
  def stop_js_coverage; end
end

# source://puppeteer-ruby//lib/puppeteer/coverage.rb#63
module Puppeteer::Coverage::UtilFunctions
  private

  # source://puppeteer-ruby//lib/puppeteer/coverage.rb#64
  def convert_to_disjoint_ranges(nested_ranges); end
end

# source://puppeteer-ruby//lib/puppeteer/custom_query_handler.rb#1
class Puppeteer::CustomQueryHandler
  # @param query_one [String] JS function (element: Element | Document, selector: string) => Element | null;
  # @param query_all [String] JS function (element: Element | Document, selector: string) => Element[] | NodeListOf<Element>;
  # @return [CustomQueryHandler] a new instance of CustomQueryHandler
  #
  # source://puppeteer-ruby//lib/puppeteer/custom_query_handler.rb#4
  def initialize(query_one: T.unsafe(nil), query_all: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/custom_query_handler.rb#59
  def query_all(element, selector); end

  # source://puppeteer-ruby//lib/puppeteer/custom_query_handler.rb#70
  def query_all_array(element, selector); end

  # source://puppeteer-ruby//lib/puppeteer/custom_query_handler.rb#9
  def query_one(element, selector); end

  # source://puppeteer-ruby//lib/puppeteer/custom_query_handler.rb#24
  def wait_for(element_or_frame, selector, visible: T.unsafe(nil), hidden: T.unsafe(nil), timeout: T.unsafe(nil)); end
end

# source://puppeteer-ruby//lib/puppeteer/devices.rb#3
Puppeteer::DEVICES = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/debug_print.rb#3
module Puppeteer::DebugPrint
  # source://puppeteer-ruby//lib/puppeteer/debug_print.rb#17
  def debug_print(*args); end

  # source://puppeteer-ruby//lib/puppeteer/debug_print.rb#14
  def debug_puts(*args, **kwargs); end
end

# source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#1
module Puppeteer::DefineAsyncMethod; end

# source://puppeteer-ruby//lib/puppeteer/device.rb#1
class Puppeteer::Device
  # @param name [String]
  # @param user_agent [String]
  # @param viewport [Viewport]
  # @return [Device] a new instance of Device
  #
  # source://puppeteer-ruby//lib/puppeteer/device.rb#5
  def initialize(name:, user_agent:, viewport:); end

  # Returns the value of attribute name.
  #
  # source://puppeteer-ruby//lib/puppeteer/device.rb#11
  def name; end

  # Returns the value of attribute user_agent.
  #
  # source://puppeteer-ruby//lib/puppeteer/device.rb#11
  def user_agent; end

  # Returns the value of attribute viewport.
  #
  # source://puppeteer-ruby//lib/puppeteer/device.rb#11
  def viewport; end
end

# Instead of Puppeteer::DEVICES["iPhone X"], Puppeteer::DEVICES["iPad Pro"],
# - Puppeteer::Devices.iPhone_X
# - Puppeteer::Devices.iPad_Pro
# etc...
#
# source://puppeteer-ruby//lib/puppeteer/devices.rb#1523
class Puppeteer::Devices
  class << self
    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def BlackBerry_Z30; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def BlackBerry_Z30_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Blackberry_PlayBook; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Blackberry_PlayBook_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_Note_3; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_Note_3_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_Note_II; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_Note_II_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_S5; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_S5_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_S8; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_S8_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_S9_; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_S9__landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_S_III; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_S_III_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_Tab_S4; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Galaxy_Tab_S4_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def JioPhone_2; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def JioPhone_2_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Kindle_Fire_HDX; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Kindle_Fire_HDX_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def LG_Optimus_L70; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def LG_Optimus_L70_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Microsoft_Lumia_550; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Microsoft_Lumia_950; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Microsoft_Lumia_950_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Moto_G4; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Moto_G4_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_10; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_10_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_4; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_4_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_5; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_5X; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_5X_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_5_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_6; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_6P; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_6P_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_6_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_7; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nexus_7_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nokia_Lumia_520; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nokia_Lumia_520_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nokia_N9; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Nokia_N9_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_2; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_2_XL; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_2_XL_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_2_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_3; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_3_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_4; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_4_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_4a__5G_; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_4a__5G__landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_5; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def Pixel_5_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad_Mini; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad_Mini_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad_Pro; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad_Pro_11; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad_Pro_11_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad_Pro_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad__gen_6_; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad__gen_6__landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad__gen_7_; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad__gen_7__landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPad_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_11; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_11_Pro; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_11_Pro_Max; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_11_Pro_Max_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_11_Pro_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_11_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_12; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_12_Mini; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_12_Mini_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_12_Pro; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_12_Pro_Max; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_12_Pro_Max_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_12_Pro_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_12_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_13; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_13_Mini; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_13_Mini_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_13_Pro; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_13_Pro_Max; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_13_Pro_Max_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_13_Pro_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_13_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_4; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_4_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_5; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_5_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_6; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_6_Plus; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_6_Plus_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_6_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_7; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_7_Plus; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_7_Plus_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_7_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_8; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_8_Plus; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_8_Plus_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_8_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_SE; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_SE_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_X; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_XR; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_XR_landscape; end

    # source://puppeteer-ruby//lib/puppeteer/devices.rb#1526
    def iPhone_X_landscape; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/dialog.rb#1
class Puppeteer::Dialog
  # @return [Dialog] a new instance of Dialog
  #
  # source://puppeteer-ruby//lib/puppeteer/dialog.rb#2
  def initialize(client, type:, message:, default_value:); end

  # prompt. Has no effect if the dialog's type is not `prompt`.
  #
  # @param prompt_text - optional text that will be entered in the dialog
  #
  # source://puppeteer-ruby//lib/puppeteer/dialog.rb#15
  def accept(prompt_text = T.unsafe(nil)); end

  # Returns the value of attribute default_value.
  #
  # source://puppeteer-ruby//lib/puppeteer/dialog.rb#9
  def default_value; end

  # source://puppeteer-ruby//lib/puppeteer/dialog.rb#27
  def dismiss; end

  # Returns the value of attribute message.
  #
  # source://puppeteer-ruby//lib/puppeteer/dialog.rb#9
  def message; end

  # Returns the value of attribute type.
  #
  # source://puppeteer-ruby//lib/puppeteer/dialog.rb#9
  def type; end
end

# source://puppeteer-ruby//lib/puppeteer/element_handle/bounding_box.rb#1
class Puppeteer::ElementHandle < ::Puppeteer::JSHandle
  include ::Puppeteer::DebugPrint

  # @param context [Puppeteer::ExecutionContext]
  # @param client [Puppeteer::CDPSession]
  # @param remote_object [Puppeteer::RemoteObject]
  # @param frame [Puppeteer::Frame]
  # @return [ElementHandle] a new instance of ElementHandle
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#15
  def initialize(context:, client:, remote_object:, frame:); end

  # `$()` in JavaScript.
  #
  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#576
  def S(selector); end

  # `$$()` in JavaScript.
  #
  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#583
  def SS(selector); end

  # `$$eval()` in JavaScript.
  #
  # @param selector [String]
  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#616
  def SSeval(selector, page_function, *args); end

  # `$eval()` in JavaScript.
  #
  # @param selector [String]
  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#598
  def Seval(selector, page_function, *args); end

  # `$x()` in JavaScript. $ is not allowed to use as a method name in Ruby.
  #
  # @param expression [String]
  # @return [Array<ElementHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#630
  def Sx(expression); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#136
  def as_element; end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_Sx(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_click(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_eval_on_selector(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_eval_on_selector_all(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_focus(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_press(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_tap(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_type_text(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_selector(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_xpath(*args, **kwargs); end

  # @return [BoundingBox|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#478
  def bounding_box; end

  # @return [BoxModel|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#495
  def box_model; end

  # @param delay [Number]
  # @param button [String] "left"|"right"|"middle"
  # @param click_count [Number]
  # @param offset [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#324
  def click(delay: T.unsafe(nil), button: T.unsafe(nil), click_count: T.unsafe(nil), offset: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#238
  def clickable_point(offset = T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#140
  def content_frame; end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#338
  def drag(x:, y:); end

  # @param target [ElementHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#366
  def drag_and_drop(target, delay: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#347
  def drag_enter(data); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#353
  def drag_over(data); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#359
  def drop(data); end

  # `$eval()` in JavaScript.
  #
  # @param selector [String]
  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#598
  def eval_on_selector(selector, page_function, *args); end

  # `$$eval()` in JavaScript.
  #
  # @param selector [String]
  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#616
  def eval_on_selector_all(selector, page_function, *args); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#452
  def focus; end

  # Returns the value of attribute frame.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#23
  def frame; end

  # Returns the value of attribute frame_manager.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#23
  def frame_manager; end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#314
  def hover; end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#25
  def inspect; end

  # in JS, #isIntersectingViewport.
  #
  # @param threshold [Float|nil]
  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#646
  def intersecting_viewport?(threshold: T.unsafe(nil)); end

  # Returns the value of attribute page.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#23
  def page; end

  # @param key [String]
  # @param text [String]
  # @param delay [number|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#470
  def press(key, delay: T.unsafe(nil), text: T.unsafe(nil)); end

  # used in AriaQueryHandler
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#673
  def query_ax_tree(accessible_name: T.unsafe(nil), role: T.unsafe(nil)); end

  # `$()` in JavaScript.
  #
  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#576
  def query_selector(selector); end

  # `$$()` in JavaScript.
  #
  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#583
  def query_selector_all(selector); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#501
  def screenshot(type: T.unsafe(nil), path: T.unsafe(nil), full_page: T.unsafe(nil), clip: T.unsafe(nil), quality: T.unsafe(nil), omit_background: T.unsafe(nil), encoding: T.unsafe(nil), capture_beyond_viewport: T.unsafe(nil), from_surface: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#152
  def scroll_into_view_if_needed; end

  # @return [Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#374
  def select(*values); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#442
  def tap(&block); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#129
  def to_element(tag_name); end

  # @param text [String]
  # @param delay [number|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#460
  def type_text(text, delay: T.unsafe(nil)); end

  # @param file_paths [Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#415
  def upload_file(*file_paths); end

  # Wait for the `selector` to appear within the element. If at the moment of calling the
  # method the `selector` already exists, the method will return immediately. If
  # the `selector` doesn't appear after the `timeout` milliseconds of waiting, the
  # function will throw.
  #
  # This method does not work across navigations or if the element is detached from DOM.
  #
  # {@link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors | selector}
  # of an element to wait for
  # is added to DOM. Resolves to `null` if waiting for hidden: `true` and
  # selector is not found in DOM.
  # The optional parameters in `options` are:
  #
  # - `visible`: wait for the selected element to be present in DOM and to be
  # visible, i.e. to not have `display: none` or `visibility: hidden` CSS
  # properties. Defaults to `false`.
  #
  # - `hidden`: wait for the selected element to not be found in the DOM or to be hidden,
  # i.e. have `display: none` or `visibility: hidden` CSS properties. Defaults to
  # `false`.
  #
  # - `timeout`: maximum time to wait in milliseconds. Defaults to `30000`
  # (30 seconds). Pass `0` to disable timeout. The default value can be changed
  # by using the {@link Page.setDefaultTimeout} method.
  #
  # @param selector - A
  # @param options - Optional waiting parameters
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_selector(*args, **kwargs, &block); end

  # Wait for the `xpath` within the element. If at the moment of calling the
  # method the `xpath` already exists, the method will return immediately. If
  # the `xpath` doesn't appear after the `timeout` milliseconds of waiting, the
  # function will throw.
  #
  # If `xpath` starts with `//` instead of `.//`, the dot will be appended automatically.
  #
  # This method works across navigation
  # ```js
  # const puppeteer = require('puppeteer');
  # (async () => {
  # const browser = await puppeteer.launch();
  # const page = await browser.newPage();
  # let currentURL;
  # page
  # .waitForXPath('//img')
  # .then(() => console.log('First URL with image: ' + currentURL));
  # for (currentURL of [
  # 'https://example.com',
  # 'https://google.com',
  # 'https://bbc.com',
  # ]) {
  # await page.goto(currentURL);
  # }
  # await browser.close();
  # })();
  # ```
  # {@link https://developer.mozilla.org/en-US/docs/Web/XPath | xpath} of an
  # element to wait for
  # added to DOM. Resolves to `null` if waiting for `hidden: true` and xpath is
  # not found in DOM.
  # The optional Argument `options` have properties:
  #
  # - `visible`: A boolean to wait for element to be present in DOM and to be
  # visible, i.e. to not have `display: none` or `visibility: hidden` CSS
  # properties. Defaults to `false`.
  #
  # - `hidden`: A boolean wait for element to not be found in the DOM or to be
  # hidden, i.e. have `display: none` or `visibility: hidden` CSS properties.
  # Defaults to `false`.
  #
  # - `timeout`: A number which is maximum time to wait for in milliseconds.
  # Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default
  # value can be changed by using the {@link Page.setDefaultTimeout} method.
  #
  # @param xpath - A
  # @param options - Optional waiting parameters
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_xpath(*args, **kwargs, &block); end

  private

  # @param quad [Array<Array<Point>>] ]
  # @param offset [Point]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#215
  def apply_offsets_to_quad(quad, offset); end

  # @param quad [Array<Point>]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#666
  def compute_quad_area(quad); end

  # @param quad [Array<number>]
  # @return [Array<Point>]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#295
  def from_protocol_quad(quad); end

  # @param quad [Array<Point>]
  # @param width [number]
  # @param height [number]
  # @return [Array<Point>]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#305
  def intersect_quad_with_viewport(quad, width, height); end

  # @param frame [Puppeteer::Frame]
  # @return [Point]
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#221
  def oopif_offsets(frame); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#570
  def query_handler_manager; end
end

# source://puppeteer-ruby//lib/puppeteer/element_handle/bounding_box.rb#2
class Puppeteer::ElementHandle::BoundingBox
  # @return [BoundingBox] a new instance of BoundingBox
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/bounding_box.rb#3
  def initialize(x:, y:, width:, height:); end

  # Returns the value of attribute height.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/bounding_box.rb#10
  def height; end

  # Returns the value of attribute width.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/bounding_box.rb#10
  def width; end

  # Returns the value of attribute x.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/bounding_box.rb#10
  def x; end

  # Returns the value of attribute y.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/bounding_box.rb#10
  def y; end
end

# source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#2
class Puppeteer::ElementHandle::BoxModel
  # @param result [Hash]
  # @param offset [Point]
  # @return [BoxModel] a new instance of BoxModel
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#6
  def initialize(result_model, offset:); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#17
  def border; end

  # source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#17
  def content; end

  # Returns the value of attribute height.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#18
  def height; end

  # source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#17
  def margin; end

  # source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#17
  def padding; end

  # Returns the value of attribute width.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#18
  def width; end
end

# source://puppeteer-ruby//lib/puppeteer/element_handle/box_model.rb#3
Puppeteer::ElementHandle::BoxModel::QUAD_ATTRIBUTE_NAMES = T.let(T.unsafe(nil), Array)

# source://puppeteer-ruby//lib/puppeteer/element_handle.rb#332
class Puppeteer::ElementHandle::DragInterceptionNotEnabledError < ::StandardError
  # @return [DragInterceptionNotEnabledError] a new instance of DragInterceptionNotEnabledError
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#333
  def initialize; end
end

# source://puppeteer-ruby//lib/puppeteer/element_handle.rb#207
class Puppeteer::ElementHandle::ElementNotClickableError < ::StandardError
  # @return [ElementNotClickableError] a new instance of ElementNotClickableError
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#208
  def initialize; end
end

# source://puppeteer-ruby//lib/puppeteer/element_handle.rb#588
class Puppeteer::ElementHandle::ElementNotFoundError < ::StandardError
  # @return [ElementNotFoundError] a new instance of ElementNotFoundError
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#589
  def initialize(selector); end
end

# source://puppeteer-ruby//lib/puppeteer/element_handle.rb#201
class Puppeteer::ElementHandle::ElementNotVisibleError < ::StandardError
  # @return [ElementNotVisibleError] a new instance of ElementNotVisibleError
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle.rb#202
  def initialize; end
end

# A class to represent (x, y)-offset coordinates
#
# source://puppeteer-ruby//lib/puppeteer/element_handle/offset.rb#3
class Puppeteer::ElementHandle::Offset
  # @return [Offset] a new instance of Offset
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/offset.rb#4
  def initialize(x:, y:); end

  # Returns the value of attribute x.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/offset.rb#26
  def x; end

  # Returns the value of attribute y.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/offset.rb#26
  def y; end

  class << self
    # source://puppeteer-ruby//lib/puppeteer/element_handle/offset.rb#9
    def from(offset); end
  end
end

# A class to represent (x, y)-coordinates
# supporting + and / operators.
#
# source://puppeteer-ruby//lib/puppeteer/element_handle/point.rb#4
class Puppeteer::ElementHandle::Point
  # @return [Point] a new instance of Point
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/point.rb#5
  def initialize(x:, y:); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle/point.rb#10
  def +(other); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle/point.rb#17
  def /(num); end

  # source://puppeteer-ruby//lib/puppeteer/element_handle/point.rb#24
  def ==(other); end

  # Returns the value of attribute x.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/point.rb#35
  def x; end

  # Returns the value of attribute y.
  #
  # source://puppeteer-ruby//lib/puppeteer/element_handle/point.rb#35
  def y; end
end

# source://puppeteer-ruby//lib/puppeteer/element_handle.rb#150
class Puppeteer::ElementHandle::ScrollIntoViewError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/emulation_manager.rb#1
class Puppeteer::EmulationManager
  # @param client [!Puppeteer.CDPSession]
  # @return [EmulationManager] a new instance of EmulationManager
  #
  # source://puppeteer-ruby//lib/puppeteer/emulation_manager.rb#5
  def initialize(client); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_emulate_viewport(*args, **kwargs); end

  # @param viewport [Puppeteer::Viewport]
  # @return [true|false]
  #
  # source://puppeteer-ruby//lib/puppeteer/emulation_manager.rb#13
  def emulate_viewport(viewport); end
end

# source://puppeteer-ruby//lib/puppeteer/env.rb#1
class Puppeteer::Env
  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/env.rb#9
  def ci?; end

  # check if running on macOS
  #
  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/env.rb#14
  def darwin?; end

  # indicates whether DEBUG=1 is specified.
  #
  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/env.rb#5
  def debug?; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/env.rb#18
  def windows?; end
end

# source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#3
module Puppeteer::EventCallbackable
  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#29
  def add_event_listener(event_name, &block); end

  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#62
  def emit_event(event_name, *args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#44
  def observe_first(event_name, &block); end

  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#29
  def on(event_name, &block); end

  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#57
  def on_event(event_name, &block); end

  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#44
  def once(event_name, &block); end

  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#36
  def remove_event_listener(*id_args); end
end

# source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#4
class Puppeteer::EventCallbackable::EventListeners
  include ::Enumerable

  # @return [EventListeners] a new instance of EventListeners
  #
  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#7
  def initialize; end

  # @return [String] Listener ID
  #
  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#12
  def add(&block); end

  # @param id [String] Listener ID returned on #add
  #
  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#19
  def delete(id); end

  # source://puppeteer-ruby//lib/puppeteer/event_callbackable.rb#24
  def each(&block); end
end

# Original implementation, helpers.getExceptionMessage
#
# source://puppeteer-ruby//lib/puppeteer/exception_details.rb#2
class Puppeteer::ExceptionDetails
  # @param exception_details [Hash]
  # @return [ExceptionDetails] a new instance of ExceptionDetails
  #
  # source://puppeteer-ruby//lib/puppeteer/exception_details.rb#4
  def initialize(exception_details); end

  # source://puppeteer-ruby//lib/puppeteer/exception_details.rb#8
  def message; end

  private

  # source://puppeteer-ruby//lib/puppeteer/exception_details.rb#35
  def exception_description_or_value(exception); end
end

# source://puppeteer-ruby//lib/puppeteer/executable_path_finder.rb#1
class Puppeteer::ExecutablePathFinder
  # @param executable_names [Array<String>] executable file names to find.
  # @return [ExecutablePathFinder] a new instance of ExecutablePathFinder
  #
  # source://puppeteer-ruby//lib/puppeteer/executable_path_finder.rb#3
  def initialize(*executable_names); end

  # source://puppeteer-ruby//lib/puppeteer/executable_path_finder.rb#7
  def find_executables_in_path; end

  # source://puppeteer-ruby//lib/puppeteer/executable_path_finder.rb#21
  def find_first; end

  private

  # source://puppeteer-ruby//lib/puppeteer/executable_path_finder.rb#25
  def paths; end
end

# source://puppeteer-ruby//lib/puppeteer/execution_context.rb#1
class Puppeteer::ExecutionContext
  include ::Puppeteer::IfPresent

  # @param client [Puppeteer::CDPSession]
  # @param context_payload [Hash]
  # @param world [Puppeteer::IsolaatedWorld?]
  # @return [ExecutionContext] a new instance of ExecutionContext
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#11
  def initialize(client, context_payload, world); end

  # Returns the value of attribute client.
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#18
  def client; end

  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#32
  def evaluate(page_function, *args); end

  # @param page_function [String]
  # @return [Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#38
  def evaluate_handle(page_function, *args); end

  # Returns the value of attribute world.
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#18
  def world; end

  private

  # only used in IsolaatedWorld
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#21
  def _context_id; end

  # only used in IsolaatedWorld::BindingFunction#add_binding_to_context
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#26
  def _context_name; end

  # @param return_by_value [Boolean]
  # @param page_function [String]
  # @return [Object|Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#188
  def evaluate_internal(return_by_value, page_function, *args); end
end

# source://puppeteer-ruby//lib/puppeteer/execution_context.rb#5
Puppeteer::ExecutionContext::EVALUATION_SCRIPT_URL = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/execution_context.rb#183
class Puppeteer::ExecutionContext::EvaluationError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/execution_context.rb#42
class Puppeteer::ExecutionContext::JavaScriptExpression
  # @return [JavaScriptExpression] a new instance of JavaScriptExpression
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#43
  def initialize(execution_context, expression, return_by_value); end

  # @param client [Puppeteer::CDPSession]
  # @param context_id [String]
  # @return [Object|JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#52
  def evaluate_with(client:, context_id:); end

  private

  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#82
  def expression_with_source_url; end

  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#78
  def suffix; end
end

# source://puppeteer-ruby//lib/puppeteer/execution_context.rb#91
class Puppeteer::ExecutionContext::JavaScriptFunction
  include ::Puppeteer::IfPresent

  # @return [JavaScriptFunction] a new instance of JavaScriptFunction
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#94
  def initialize(execution_context, expression, args, return_by_value); end

  # @param client [Puppeteer::CDPSession]
  # @param context_id [String]
  # @return [Object|JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#104
  def evaluate_with(client:, context_id:); end

  private

  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#137
  def converted_args; end

  # if (error.message.endsWith('Cannot find context with specified id') || error.message.endsWith('Inspected target navigated or closed'))
  #       throw new Error('Execution context was destroyed, most likely because of a navigation.');
  #     throw error;
  #   }
  #
  # source://puppeteer-ruby//lib/puppeteer/execution_context.rb#178
  def suffix; end
end

# source://puppeteer-ruby//lib/puppeteer/execution_context.rb#6
Puppeteer::ExecutionContext::SOURCE_URL_REGEX = T.let(T.unsafe(nil), Regexp)

# source://puppeteer-ruby//lib/puppeteer/file_chooser.rb#1
class Puppeteer::FileChooser
  # @param element [Puppeteer::ElementHandle]
  # @param event [Hash]
  # @return [FileChooser] a new instance of FileChooser
  #
  # source://puppeteer-ruby//lib/puppeteer/file_chooser.rb#4
  def initialize(element, event); end

  # @param file_paths [Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/file_chooser.rb#15
  def accept(file_paths); end

  # source://puppeteer-ruby//lib/puppeteer/file_chooser.rb#23
  def cancel; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/file_chooser.rb#10
  def multiple?; end
end

# FirefoxTargetManager implements target management using
# `Target.setDiscoverTargets` without using auto-attach. It, therefore, creates
# targets that lazily establish their CDP sessions.
#
# Although the approach is potentially flaky, there is no other way for Firefox
# because Firefox's CDP implementation does not support auto-attach.
#
# Firefox does not support targetInfoChanged and detachedFromTarget events:
# - https://bugzilla.mozilla.org/show_bug.cgi?id=1610855
# - https://bugzilla.mozilla.org/show_bug.cgi?id=1636979
#
# source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#11
class Puppeteer::FirefoxTargetManager
  include ::Puppeteer::EventCallbackable

  # @return [FirefoxTargetManager] a new instance of FirefoxTargetManager
  #
  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#14
  def initialize(connection:, target_factory:, target_filter_callback:); end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#44
  def add_target_interceptor(client, interceptor); end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#74
  def available_targets; end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#78
  def dispose; end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#83
  def init; end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#50
  def remove_target_interceptor(client, interceptor); end

  private

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#151
  def finish_initialization_if_ready(target_id); end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#123
  def handle_attached_to_target(parent_session, event); end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#63
  def handle_session_detached(session); end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#89
  def handle_target_created(event); end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#112
  def handle_target_destroyed(event); end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#68
  def remove_session_listeners(session); end

  # source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#54
  def setup_attachment_listeners(session); end
end

# source://puppeteer-ruby//lib/puppeteer/firefox_target_manager.rb#121
class Puppeteer::FirefoxTargetManager::SessionNotCreatedError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/frame.rb#1
class Puppeteer::Frame
  # @param frame_manager [Puppeteer::FrameManager]
  # @param parent_frame [Puppeteer::Frame|nil]
  # @param frame_id [String]
  # @param client [Puppeteer::CDPSession]
  # @return [Frame] a new instance of Frame
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#8
  def initialize(frame_manager, parent_frame, frame_id, client); end

  # `$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<?Puppeteer.ElementHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#98
  def S(selector); end

  # `$$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#148
  def SS(selector); end

  # `$$eval()` in JavaScript.
  #
  # @param selector [string]
  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<(!Object|undefined)>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#138
  def SSeval(selector, page_function, *args); end

  # `$eval()` in JavaScript.
  #
  # @param selector [string]
  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<(!Object|undefined)>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#126
  def Seval(selector, page_function, *args); end

  # `$x()` in JavaScript. $ is not allowed to use as a method name in Ruby.
  #
  # @param expression [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#108
  def Sx(expression); end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#33
  def _client; end

  # @param url [String?]
  # @param path [String?]
  # @param content [String?]
  # @param type [String?]
  # @param id [String?]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#199
  def add_script_tag(url: T.unsafe(nil), path: T.unsafe(nil), content: T.unsafe(nil), type: T.unsafe(nil), id: T.unsafe(nil)); end

  # @param url [String?]
  # @param path [String?]
  # @param content [String?]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#206
  def add_style_tag(url: T.unsafe(nil), path: T.unsafe(nil), content: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_Sx(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_click(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_eval_on_selector(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_eval_on_selector_all(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_evaluate(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_evaluate_handle(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_focus(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_query_selector(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_query_selector_all(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_select(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_tap(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_type_text(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_function(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_navigation(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_selector(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_xpath(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#186
  def child_frames; end

  # @param selector [String]
  # @param delay [Number]
  # @param button [String] "left"|"right"|"middle"
  # @param click_count [Number]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#214
  def click(selector, delay: T.unsafe(nil), button: T.unsafe(nil), click_count: T.unsafe(nil)); end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#156
  def content; end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#338
  def detach; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#190
  def detached?; end

  # `$eval()` in JavaScript.
  #
  # @param selector [string]
  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<(!Object|undefined)>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#126
  def eval_on_selector(selector, page_function, *args); end

  # `$$eval()` in JavaScript.
  #
  # @param selector [string]
  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<(!Object|undefined)>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#138
  def eval_on_selector_all(selector, page_function, *args); end

  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#89
  def evaluate(page_function, *args); end

  # @param pageFunction [Function|string]
  # @return [!Promise<!Puppeteer.JSHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#81
  def evaluate_handle(page_function, *args); end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#75
  def execution_context; end

  # @param selector [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#221
  def focus(selector); end

  # Returns the value of attribute frame_manager.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def frame_manager; end

  # Sets the attribute frame_manager
  #
  # @param value the value to set the attribute frame_manager to.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def frame_manager=(_arg0); end

  # @param url [String]
  # @param rederer [String]
  # @param timeout [number|nil]
  # @param wait_until [string|nil] 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'
  # @return [Puppeteer::HTTPResponse]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#63
  def goto(url, referer: T.unsafe(nil), timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#321
  def handle_lifecycle_event(loader_id, name); end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#329
  def handle_loading_started; end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#333
  def handle_loading_stopped; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#54
  def has_started_loading?; end

  # @param selector [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#228
  def hover(selector); end

  # Returns the value of attribute id.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def id=(_arg0); end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#25
  def inspect; end

  # Returns the value of attribute lifecycle_events.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def lifecycle_events; end

  # Sets the attribute lifecycle_events
  #
  # @param value the value to set the attribute lifecycle_events to.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def lifecycle_events=(_arg0); end

  # Returns the value of attribute loader_id.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def loader_id; end

  # Sets the attribute loader_id
  #
  # @param value the value to set the attribute loader_id to.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def loader_id=(_arg0); end

  # Returns the value of attribute main_world.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def main_world; end

  # Sets the attribute main_world
  #
  # @param value the value to set the attribute main_world to.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def main_world=(_arg0); end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#168
  def name; end

  # @param frame_payload [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#307
  def navigated(frame_payload); end

  # @param url [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#317
  def navigated_within_document(url); end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#48
  def oop_frame?; end

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#44
  def page; end

  # @return [Frame?]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#178
  def parent_frame; end

  # Returns the value of attribute puppeteer_world.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def puppeteer_world; end

  # Sets the attribute puppeteer_world
  #
  # @param value the value to set the attribute puppeteer_world to.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#52
  def puppeteer_world=(_arg0); end

  # `$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<?Puppeteer.ElementHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#98
  def query_selector(selector); end

  # `$$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#148
  def query_selector_all(selector); end

  # @param selector [string]
  # @param values [!Array<string>]
  # @return [!Promise<!Array<string>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#235
  def select(selector, *values); end

  # @param html [String]
  # @param timeout [Integer]
  # @param wait_until [String|Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#163
  def set_content(html, timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # @param selector [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#242
  def tap(selector); end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#302
  def title; end

  # @param selector [String]
  # @param text [String]
  # @param delay [Number]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#251
  def type_text(selector, text, delay: T.unsafe(nil)); end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#173
  def url; end

  # @param page_function [String]
  # @param args [Integer|Array]
  # @param polling [String]
  # @param timeout [Integer]
  # @return [Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_function(*args, **kwargs, &block); end

  # @param timeout [number|nil]
  # @param wait_until [string|nil] 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_navigation(*args, **kwargs, &block); end

  # @param selector [String]
  # @param visible [Boolean] Wait for element visible (not 'display: none' nor 'visibility: hidden') on true. default to false.
  # @param hidden [Boolean] Wait for element invisible ('display: none' nor 'visibility: hidden') on true. default to false.
  # @param timeout [Integer]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_selector(*args, **kwargs, &block); end

  # @param milliseconds [Integer] the number of milliseconds to wait.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#269
  def wait_for_timeout(milliseconds); end

  # @param xpath [String]
  # @param visible [Boolean] Wait for element visible (not 'display: none' nor 'visibility: hidden') on true. default to false.
  # @param hidden [Boolean] Wait for element invisible ('display: none' nor 'visibility: hidden') on true. default to false.
  # @param timeout [Integer]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_xpath(*args, **kwargs, &block); end

  protected

  # source://puppeteer-ruby//lib/puppeteer/frame.rb#182
  def _child_frames; end

  private

  # @param client [Puppeteer::CDPSession]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame.rb#38
  def update_client(client); end
end

# source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#3
class Puppeteer::FrameManager
  include ::Puppeteer::DebugPrint
  include ::Puppeteer::IfPresent
  include ::Puppeteer::EventCallbackable

  # @param client [!Puppeteer.CDPSession]
  # @param page [!Puppeteer.Page]
  # @param ignoreHTTPSErrors [boolean]
  # @param timeoutSettings [!Puppeteer.TimeoutSettings]
  # @return [FrameManager] a new instance of FrameManager
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#15
  def initialize(client, page, ignore_https_errors, timeout_settings); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_init(*args, **kwargs); end

  # Returns the value of attribute client.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#76
  def client; end

  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#469
  def execution_context_by_id(context_id, session); end

  # @param frameId [!string]
  # @return [?Frame]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#260
  def frame(frame_id); end

  # @return [!Array<!Frame>]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#254
  def frames; end

  # @param event [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#184
  def handle_attached_to_target(target); end

  # @param event [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#195
  def handle_detached_from_target(target); end

  # @param context_payload [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#409
  def handle_execution_context_created(context_payload, session); end

  # @param execution_context_id [Integer]
  # @param session [Puppeteer::CDPSEssion]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#443
  def handle_execution_context_destroyed(execution_context_id, session); end

  # @param session [Puppeteer::CDPSession]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#454
  def handle_execution_contexts_cleared(session); end

  # @param session [Puppeteer::CDPSession]
  # @param frameId [String]
  # @param parentFrameId [String]
  # @raise [FrameNotFoundError]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#267
  def handle_frame_attached(session, frame_id, parent_frame_id); end

  # @param frame_id [String]
  # @param reason [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#393
  def handle_frame_detached(frame_id, reason); end

  # @param frame_payload [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#310
  def handle_frame_navigated(frame_payload); end

  # @param frame_id [String]
  # @param url [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#383
  def handle_frame_navigated_within_document(frame_id, url); end

  # @param frame_id [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#213
  def handle_frame_started_loading(frame_id); end

  # @param frame_id [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#220
  def handle_frame_stopped_loading(frame_id); end

  # @param session [Puppeteer::CDPSession]
  # @param frame_tree [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#229
  def handle_frame_tree(session, frame_tree); end

  # @param event [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#205
  def handle_lifecycle_event(event); end

  # @return [!Frame]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#249
  def main_frame; end

  # @param frame [Puppeteer::Frame]
  # @param url [String]
  # @param options [!{referer?: string, timeout?: number, waitUntil?: string|!Array<string>}=]
  # @return [Puppeteer::HTTPResponse]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#114
  def navigate_frame(frame, url, referer: T.unsafe(nil), timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # Returns the value of attribute network_manager.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#106
  def network_manager; end

  # @return [!Puppeteer.Page]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#244
  def page; end

  # Returns the value of attribute timeout_settings.
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#76
  def timeout_settings; end

  # @param timeout [number|nil]
  # @param wait_until [string|nil] 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'
  # @return [Puppeteer::HTTPResponse]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#162
  def wait_for_frame_navigation(frame, timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  private

  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#484
  def assert_no_legacy_navigation_options(wait_until:); end

  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#298
  def attach_child_frame(parent_frame, parent_frame_id, frame_id, session); end

  # @param session [Puppeteer::CDPSession]
  # @param name [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#360
  def ensure_isolated_world(session, name); end

  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#78
  def init(target_id, cdp_session = T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#326
  def reattach_frame(frame, frame_id, is_main_frame, frame_payload); end

  # @param frame [!Frame]
  #
  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#475
  def remove_frame_recursively(frame); end

  # source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#42
  def setup_listeners(client); end
end

# source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#296
class Puppeteer::FrameManager::FrameNotFoundError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#108
class Puppeteer::FrameManager::NavigationError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/frame_manager.rb#9
Puppeteer::FrameManager::UTILITY_WORLD_NAME = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/geolocation.rb#1
class Puppeteer::Geolocation
  # @param latitude [Fixnum]
  # @param longitude [Fixnum]
  # @param accuracy [Fixnum]
  # @return [Geolocation] a new instance of Geolocation
  #
  # source://puppeteer-ruby//lib/puppeteer/geolocation.rb#5
  def initialize(latitude:, longitude:, accuracy: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/geolocation.rb#21
  def to_h; end
end

# source://puppeteer-ruby//lib/puppeteer/http_request.rb#1
class Puppeteer::HTTPRequest
  include ::Puppeteer::DebugPrint
  include ::Puppeteer::IfPresent

  # @param client [Puppeteer::CDPSession]
  # @param frame [Puppeteer::Frame]
  # @param interception_id [string|nil]
  # @param allow_interception [boolean]
  # @param event [Hash]
  # @param redirect_chain Array<Request>
  # @return [HTTPRequest] a new instance of HTTPRequest
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#86
  def initialize(client, frame, interception_id, allow_interception, event, redirect_chain); end

  # abort request on request interception.
  #
  # Example:
  #
  #   page.on 'request' do |req|
  #     if req.url.include?("porn")
  #       req.abort
  #     else
  #       req.continue
  #     end
  #   end
  #
  # @param error_code [String|Symbol]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#404
  def abort(error_code: T.unsafe(nil), priority: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#151
  def abort_error_reason; end

  # proceed request on request interception.
  #
  # Example:
  #
  #   page.on 'request' do |req|
  #     # Override headers
  #     headers = req.headers.merge(
  #       foo: 'bar', # set "foo" header
  #       origin: nil, # remove "origin" header
  #     )
  #     req.continue(headers: headers)
  #   end
  #
  # @param error_code [String|Symbol]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#257
  def continue(url: T.unsafe(nil), method: T.unsafe(nil), post_data: T.unsafe(nil), headers: T.unsafe(nil), priority: T.unsafe(nil)); end

  # if the interception is allowed to continue (ie, `abort()` and
  # `respond()` aren't called).
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#138
  def continue_request_overrides; end

  # Adds an async request handler to the processing queue.
  # Deferred handlers are not guaranteed to execute in any particular order,
  # but they are guarnateed to resolve before the request interception
  # is finalized.
  #
  # @param pending_handler [Proc]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#185
  def enqueue_intercept_action(pending_handler); end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#211
  def failure; end

  # Awaits pending interception handlers and then decides how to fulfill
  # the request interception.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#191
  def finalize_interceptions; end

  # Returns the value of attribute frame.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#113
  def frame; end

  # Returns the value of attribute headers.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#113
  def headers; end

  # Returns the value of attribute initiator.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#113
  def initiator; end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#115
  def inspect; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#175
  def intercept_resolution_handled?; end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#165
  def intercept_resolution_state; end

  # Returns the value of attribute internal.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#112
  def internal; end

  # Returns the value of attribute method.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#113
  def method; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#203
  def navigation_request?; end

  # Returns the value of attribute post_data.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#113
  def post_data; end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#207
  def redirect_chain; end

  # Returns the value of attribute resource_type.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#113
  def resource_type; end

  # Mocking response.
  #
  # Example:
  #
  #   page.on 'request' do |req|
  #     req.respond(
  #       status: 404,
  #       content_type: 'text/plain',
  #       body: 'Not Found!'
  #     )
  #   end
  #
  # @param status [Integer]
  # @param headers [Hash<String, String>]
  # @param content_type [String]
  # @param body [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#321
  def respond(status: T.unsafe(nil), headers: T.unsafe(nil), content_type: T.unsafe(nil), body: T.unsafe(nil), priority: T.unsafe(nil)); end

  # Returns the value of attribute response.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#113
  def response; end

  # interception is allowed to respond (ie, `abort()` is not called).
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#145
  def response_for_request; end

  # Returns the value of attribute url.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#113
  def url; end

  private

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#425
  def abort_impl(error_reason); end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#123
  def assert_interception_allowed; end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#129
  def assert_interception_not_handled; end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#290
  def continue_impl(overrides); end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#217
  def headers_to_array(headers); end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#353
  def respond_impl(status: T.unsafe(nil), headers: T.unsafe(nil), content_type: T.unsafe(nil), body: T.unsafe(nil)); end
end

# source://puppeteer-ruby//lib/puppeteer/http_request.rb#237
class Puppeteer::HTTPRequest::AlreadyHandledError < ::StandardError
  # @return [AlreadyHandledError] a new instance of AlreadyHandledError
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#238
  def initialize; end
end

# source://puppeteer-ruby//lib/puppeteer/http_request.rb#5
Puppeteer::HTTPRequest::DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = T.let(T.unsafe(nil), Integer)

# source://puppeteer-ruby//lib/puppeteer/http_request.rb#440
Puppeteer::HTTPRequest::ERROR_REASONS = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/http_request.rb#43
class Puppeteer::HTTPRequest::InterceptResolutionState
  # @return [InterceptResolutionState] a new instance of InterceptResolutionState
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#68
  def initialize(action:, priority:); end

  # Returns the value of attribute action.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#77
  def action; end

  # Returns the value of attribute priority.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#77
  def priority; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#73
  def priority_unspecified?; end

  class << self
    # source://puppeteer-ruby//lib/puppeteer/http_request.rb#44
    def abort(priority: T.unsafe(nil)); end

    # source://puppeteer-ruby//lib/puppeteer/http_request.rb#64
    def already_handled(priority: T.unsafe(nil)); end

    # source://puppeteer-ruby//lib/puppeteer/http_request.rb#52
    def continue(priority: T.unsafe(nil)); end

    # source://puppeteer-ruby//lib/puppeteer/http_request.rb#56
    def disabled(priority: T.unsafe(nil)); end

    # source://puppeteer-ruby//lib/puppeteer/http_request.rb#60
    def none(priority: T.unsafe(nil)); end

    # source://puppeteer-ruby//lib/puppeteer/http_request.rb#48
    def respond(priority: T.unsafe(nil)); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/http_request.rb#231
class Puppeteer::HTTPRequest::InterceptionNotEnabledError < ::StandardError
  # @return [InterceptionNotEnabledError] a new instance of InterceptionNotEnabledError
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#232
  def initialize; end
end

# defines some methods used only in NetworkManager, Response
#
# source://puppeteer-ruby//lib/puppeteer/http_request.rb#8
class Puppeteer::HTTPRequest::InternalAccessor
  # @return [InternalAccessor] a new instance of InternalAccessor
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#9
  def initialize(request); end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#30
  def failure_text=(failure_text); end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#34
  def from_memory_cache=(from_memory_cache); end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#38
  def from_memory_cache?; end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#17
  def interception_id; end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#26
  def redirect_chain; end

  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#13
  def request_id; end

  # @param response [Puppeteer::HTTPResponse]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_request.rb#22
  def response=(response); end
end

# List taken from https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml with extra 306 and 418 codes.
#
# source://puppeteer-ruby//lib/puppeteer/http_request.rb#458
Puppeteer::HTTPRequest::STATUS_TEXTS = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/http_response.rb#3
class Puppeteer::HTTPResponse
  include ::Puppeteer::IfPresent

  # @param client [Puppeteer::CDPSession]
  # @param request [Puppeteer::HTTPRequest]
  # @param response_payload [Hash]
  # @param extra_info [Hash|nil]
  # @return [HTTPResponse] a new instance of HTTPResponse
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#35
  def initialize(client, request, response_payload, extra_info); end

  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#91
  def buffer; end

  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#119
  def frame; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#111
  def from_cache?; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#115
  def from_service_worker?; end

  # Returns the value of attribute headers.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#65
  def headers; end

  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#67
  def inspect; end

  # Returns the value of attribute internal.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#63
  def internal; end

  # @param json [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#107
  def json; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#87
  def ok?; end

  # Returns the value of attribute remote_address.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#65
  def remote_address; end

  # Returns the value of attribute request.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#65
  def request; end

  # Returns the value of attribute security_details.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#65
  def security_details; end

  # Returns the value of attribute status.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#65
  def status; end

  # Returns the value of attribute status_text.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#65
  def status_text; end

  # @param text [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#102
  def text; end

  # Returns the value of attribute url.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#65
  def url; end

  private

  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#75
  def parse_štatus_text_from_extra_info(extra_info); end
end

# defines methods used only in NetworkManager
#
# source://puppeteer-ruby//lib/puppeteer/http_response.rb#13
class Puppeteer::HTTPResponse::InternalAccessor
  # @return [InternalAccessor] a new instance of InternalAccessor
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#14
  def initialize(response); end

  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#18
  def body_loaded_promise; end
end

# source://puppeteer-ruby//lib/puppeteer/http_response.rb#6
class Puppeteer::HTTPResponse::Redirected < ::StandardError
  # @return [Redirected] a new instance of Redirected
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#7
  def initialize; end
end

# source://puppeteer-ruby//lib/puppeteer/http_response.rb#23
class Puppeteer::HTTPResponse::RemoteAddress
  # @return [RemoteAddress] a new instance of RemoteAddress
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#24
  def initialize(ip:, port:); end

  # Returns the value of attribute ip.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#28
  def ip; end

  # Returns the value of attribute port.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#28
  def port; end
end

# source://puppeteer-ruby//lib/puppeteer/http_response.rb#123
class Puppeteer::HTTPResponse::SecurityDetails
  # @return [SecurityDetails] a new instance of SecurityDetails
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#124
  def initialize(security_payload); end

  # Returns the value of attribute issuer.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#132
  def issuer; end

  # Returns the value of attribute protocol.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#132
  def protocol; end

  # Returns the value of attribute subject_name.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#132
  def subject_name; end

  # Returns the value of attribute valid_from.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#132
  def valid_from; end

  # Returns the value of attribute valid_to.
  #
  # source://puppeteer-ruby//lib/puppeteer/http_response.rb#132
  def valid_to; end
end

# source://puppeteer-ruby//lib/puppeteer/if_present.rb#1
module Puppeteer::IfPresent
  # Similar to #try in ActiveSupport::CoreExt.
  #
  # Evaluate block with the target, only if target is not nil.
  # Returns nil if target is nil.
  #
  # --------
  # if_present(params['target']) do |target|
  #   Point.new(target['x'], target['y'])
  # end
  # --------
  #
  # @raise [ArgumentError]
  #
  # source://puppeteer-ruby//lib/puppeteer/if_present.rb#12
  def if_present(target, &block); end
end

# https://github.com/puppeteer/puppeteer/blob/master/src/IsolaatedWorld.js
#
# source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#4
class Puppeteer::IsolaatedWorld
  # @param client [Puppeteer::CDPSession]
  # @param frame_manager [Puppeteer::FrameManager]
  # @param frame [Puppeteer::Frame]
  # @param timeout_settings [Puppeteer::TimeoutSettings]
  # @return [IsolaatedWorld] a new instance of IsolaatedWorld
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#52
  def initialize(client, frame_manager, frame, timeout_settings); end

  # `$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<?Puppeteer.ElementHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#129
  def S(selector); end

  # `$$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#182
  def SS(selector); end

  # `$$eval()` in JavaScript.
  #
  # @param selector [string]
  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<(!Object|undefined)>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#174
  def SSeval(selector, page_function, *args); end

  # `$eval()` in JavaScript.
  #
  # @param selector [string]
  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<(!Object|undefined)>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#164
  def Seval(selector, page_function, *args); end

  # `$x()` in JavaScript. $ is not allowed to use as a method name in Ruby.
  #
  # @param expression [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#155
  def Sx(expression); end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#417
  def add_binding_to_context(context, binding_function); end

  # @param url [String?]
  # @param path [String?]
  # @param content [String?]
  # @param id [String?]
  # @param type [String?]
  # @raise [ArgumentError]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#235
  def add_script_tag(url: T.unsafe(nil), path: T.unsafe(nil), content: T.unsafe(nil), id: T.unsafe(nil), type: T.unsafe(nil)); end

  # @param url [String?]
  # @param path [String?]
  # @param content [String?]
  # @raise [ArgumentError]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#299
  def add_style_tag(url: T.unsafe(nil), path: T.unsafe(nil), content: T.unsafe(nil)); end

  # @param backend_node_id [Integer]
  # @return [Puppeteer::ElementHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#583
  def adopt_backend_node(backend_node_id); end

  # @param element_handle [Puppeteer::ElementHandle]
  # @return [Puppeteer::ElementHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#597
  def adopt_handle(element_handle); end

  # @param selector [String]
  # @param delay [Number]
  # @param button [String] "left"|"right"|"middle"
  # @param click_count [Number]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#363
  def click(selector, delay: T.unsafe(nil), button: T.unsafe(nil), click_count: T.unsafe(nil)); end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#188
  def content; end

  # @param context [Puppeteer::ExecutionContext]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#76
  def context=(context); end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#88
  def delete_context(execution_context_id); end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#97
  def detach; end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#148
  def document; end

  # `$eval()` in JavaScript.
  #
  # @param selector [string]
  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<(!Object|undefined)>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#164
  def eval_on_selector(selector, page_function, *args); end

  # `$$eval()` in JavaScript.
  #
  # @param selector [string]
  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<(!Object|undefined)>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#174
  def eval_on_selector_all(selector, page_function, *args); end

  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<*>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#122
  def evaluate(page_function, *args); end

  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<!Puppeteer.JSHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#115
  def evaluate_handle(page_function, *args); end

  # @return [!Promise<!Puppeteer.ExecutionContext>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#105
  def execution_context; end

  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#370
  def focus(selector); end

  # Returns the value of attribute frame.
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#68
  def frame; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#93
  def has_context?; end

  # `$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<?Puppeteer.ElementHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#129
  def query_selector(selector); end

  # `$$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#182
  def query_selector_all(selector); end

  # @param selector [String]
  # @return [Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#388
  def select(selector, *values); end

  # @param html [String]
  # @param timeout [Integer]
  # @param wait_until [String|Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#204
  def set_content(html, timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#397
  def tap(selector); end

  # Returns the value of attribute task_manager.
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#68
  def task_manager; end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#541
  def title; end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#606
  def transfer_handle(element_handle); end

  # @param selector [String]
  # @param text [String]
  # @param delay [Number]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#406
  def type_text(selector, text, delay: T.unsafe(nil)); end

  # @param page_function [String]
  # @param args [Array]
  # @param polling [Integer|String]
  # @param timeout [Integer]
  # @return [Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#525
  def wait_for_function(page_function, args: T.unsafe(nil), polling: T.unsafe(nil), timeout: T.unsafe(nil)); end

  private

  # only used in Puppeteer::WaitTask#initialize
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#71
  def _bound_functions; end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_adopt_backend_node(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#412
  def binding_identifier(name, context); end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#134
  def evaluate_document; end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#443
  def handle_binding_called(event); end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#545
  def make_predicate_string(predicate_arg_def:, predicate_body:, predicate_query_handler: T.unsafe(nil), async: T.unsafe(nil)); end

  # @param query_one [String] JS function (element: Element | Document, selector: string) => Element | null;
  # @param selector [String]
  # @param visible [Boolean] Wait for element visible (not 'display: none' nor 'visibility: hidden') on true. default to false.
  # @param hidden [Boolean] Wait for element invisible ('display: none' nor 'visibility: hidden') on true. default to false.
  # @param timeout [Integer]
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#483
  def wait_for_selector_in_page(query_one, root, selector, visible: T.unsafe(nil), hidden: T.unsafe(nil), timeout: T.unsafe(nil), binding_function: T.unsafe(nil)); end
end

# source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#281
Puppeteer::IsolaatedWorld::ADD_SCRIPT_CONTENT = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#265
Puppeteer::IsolaatedWorld::ADD_SCRIPT_URL = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#338
Puppeteer::IsolaatedWorld::ADD_STYLE_CONTENT = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#323
Puppeteer::IsolaatedWorld::ADD_STYLE_URL = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#7
class Puppeteer::IsolaatedWorld::BindingFunction
  # @return [BindingFunction] a new instance of BindingFunction
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#8
  def initialize(name:, proc:); end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#13
  def call(*args); end

  # Returns the value of attribute name.
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#17
  def name; end

  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#19
  def page_binding_init_string; end
end

# source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#102
class Puppeteer::IsolaatedWorld::DetachedError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#353
class Puppeteer::IsolaatedWorld::ElementNotFoundError < ::StandardError
  # @return [ElementNotFoundError] a new instance of ElementNotFoundError
  #
  # source://puppeteer-ruby//lib/puppeteer/isolated_world.rb#354
  def initialize(selector); end
end

# source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#3
class Puppeteer::JSCoverage
  include ::Puppeteer::Coverage::UtilFunctions

  # @param client [Puppeteer::CDPSession]
  # @return [JSCoverage] a new instance of JSCoverage
  #
  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#24
  def initialize(client); end

  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#31
  def start(reset_on_navigation: T.unsafe(nil), report_anonymous_scripts: T.unsafe(nil), include_raw_script_coverage: T.unsafe(nil), use_block_coverage: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#98
  def stop; end

  private

  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#73
  def on_execution_contexts_cleared; end

  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#79
  def on_script_parsed(event); end
end

# source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#6
class Puppeteer::JSCoverage::Item
  # @return [Item] a new instance of Item
  #
  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#7
  def initialize(url:, ranges:, text:); end

  # Returns the value of attribute ranges.
  #
  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#12
  def ranges; end

  # Returns the value of attribute text.
  #
  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#12
  def text; end

  # Returns the value of attribute url.
  #
  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#12
  def url; end
end

# source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#15
class Puppeteer::JSCoverage::ItemWithRawScriptCoverage < ::Puppeteer::JSCoverage::Item
  # @return [ItemWithRawScriptCoverage] a new instance of ItemWithRawScriptCoverage
  #
  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#16
  def initialize(url:, ranges:, text:, raw_script_coverage:); end

  # Returns the value of attribute raw_script_coverage.
  #
  # source://puppeteer-ruby//lib/puppeteer/js_coverage.rb#20
  def raw_script_coverage; end
end

# source://puppeteer-ruby//lib/puppeteer/js_handle.rb#1
class Puppeteer::JSHandle
  include ::Puppeteer::IfPresent

  # @param context [Puppeteer::ExecutionContext]
  # @param client [Puppeteer::CDPSession]
  # @param remote_object [Puppeteer::RemoteObject]
  # @return [JSHandle] a new instance of JSHandle
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#27
  def initialize(context:, client:, remote_object:); end

  # @param name [String]
  # @return [Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#86
  def [](name); end

  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#121
  def as_element; end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_evaluate(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_evaluate_handle(*args, **kwargs); end

  # Returns the value of attribute context.
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#34
  def context; end

  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#125
  def dispose; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#132
  def disposed?; end

  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#51
  def evaluate(page_function, *args); end

  # @param page_function [String]
  # @param args [Array<*>]
  # @return [Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#60
  def evaluate_handle(page_function, *args); end

  # @return [Puppeteer::ExecutionContext]
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#45
  def execution_context; end

  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#36
  def inspect; end

  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#103
  def json_value; end

  # getProperties in JavaScript.
  #
  # @return [Hash<String, JSHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#92
  def properties; end

  # getProperty(propertyName) in JavaScript
  #
  # @param name [String]
  # @return [Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#69
  def property(name); end

  # Returns the value of attribute remote_object.
  #
  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#34
  def remote_object; end

  # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#136
  def to_s; end

  class << self
    # @param context [Puppeteer::ExecutionContext]
    # @param remote_object [Puppeteer::RemoteObject]
    #
    # source://puppeteer-ruby//lib/puppeteer/js_handle.rb#7
    def create(context:, remote_object:); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/keyboard/key_description.rb#1
class Puppeteer::Keyboard
  # @param client [!Puppeteer.CDPSession]
  # @return [Keyboard] a new instance of Keyboard
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#8
  def initialize(client); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_down(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_press(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_send_character(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_type_text(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_up(*args, **kwargs); end

  # @param key [String]
  # @param text [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#18
  def down(key, text: T.unsafe(nil), commands: T.unsafe(nil)); end

  # Returns the value of attribute modifiers.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#14
  def modifiers; end

  # @param key [String]
  # @param text [String]
  # @return [Future]
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#155
  def press(key, delay: T.unsafe(nil), text: T.unsafe(nil), commands: T.unsafe(nil)); end

  # @param char [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#129
  def send_character(char); end

  # @param text [String]
  # @return [Future]
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#137
  def type_text(text, delay: T.unsafe(nil)); end

  # @param key [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#110
  def up(key); end

  private

  # @param keyString [string]
  # @return [KeyDescription]
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#63
  def key_description_for_string(key_string); end

  # @param key [string]
  # @return [number]
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard.rb#46
  def modifier_bit(key); end
end

# source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#26
Puppeteer::Keyboard::KEY_DEFINITIONS = T.let(T.unsafe(nil), Hash)

# * @typedef {Object} KeyDefinition
# * @property {number=} keyCode
# * @property {number=} shiftKeyCode
# * @property {string=} key
# * @property {string=} shiftKey
# * @property {string=} code
# * @property {string=} text
# * @property {string=} shiftText
# * @property {number=} location
#
# source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#11
class Puppeteer::Keyboard::KeyDefinition
  # @return [KeyDefinition] a new instance of KeyDefinition
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#12
  def initialize(hash); end

  # Returns the value of attribute code.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#23
  def code; end

  # Returns the value of attribute key.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#23
  def key; end

  # Returns the value of attribute key_code.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#23
  def key_code; end

  # Returns the value of attribute location.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#23
  def location; end

  # Returns the value of attribute shift_key.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#23
  def shift_key; end

  # Returns the value of attribute shift_key_code.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#23
  def shift_key_code; end

  # Returns the value of attribute shift_text.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#23
  def shift_text; end

  # Returns the value of attribute text.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/us_keyboard_layout.rb#23
  def text; end
end

# * @typedef {Object} KeyDescription
#  * @property {number} keyCode
#  * @property {string} key
#  * @property {string} text
#  * @property {string} code
#  * @property {number} location
#
# source://puppeteer-ruby//lib/puppeteer/keyboard/key_description.rb#8
class Puppeteer::Keyboard::KeyDescription
  # @return [KeyDescription] a new instance of KeyDescription
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/key_description.rb#9
  def initialize(key_code: T.unsafe(nil), key: T.unsafe(nil), text: T.unsafe(nil), code: T.unsafe(nil), location: T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/key_description.rb#17
  def code; end

  # Returns the value of attribute key.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/key_description.rb#17
  def key; end

  # Returns the value of attribute key_code.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/key_description.rb#17
  def key_code; end

  # Returns the value of attribute location.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/key_description.rb#17
  def location; end

  # Returns the value of attribute text.
  #
  # source://puppeteer-ruby//lib/puppeteer/keyboard/key_description.rb#17
  def text; end
end

# https://github.com/puppeteer/puppeteer/blob/main/src/node/Launcher.ts
#
# source://puppeteer-ruby//lib/puppeteer/launcher/browser_options.rb#24
module Puppeteer::Launcher
  private

  # @param project_root [String]
  # @param prefereed_revision [String]
  # @param is_puppeteer_core [String]
  # @param product [String] 'chrome' or 'firefox'
  # @return [Puppeteer::Launcher::Chrome]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher.rb#14
  def new(project_root:, preferred_revision:, is_puppeteer_core:, product:); end

  class << self
    # @param project_root [String]
    # @param prefereed_revision [String]
    # @param is_puppeteer_core [String]
    # @param product [String] 'chrome' or 'firefox'
    # @return [Puppeteer::Launcher::Chrome]
    #
    # source://puppeteer-ruby//lib/puppeteer/launcher.rb#14
    def new(project_root:, preferred_revision:, is_puppeteer_core:, product:); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/launcher/browser_options.rb#25
class Puppeteer::Launcher::BrowserOptions
  # @return [BrowserOptions] a new instance of BrowserOptions
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/browser_options.rb#29
  def initialize(options); end

  # Returns the value of attribute default_viewport.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/browser_options.rb#47
  def default_viewport; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/browser_options.rb#49
  def ignore_https_errors?; end

  # Returns the value of attribute is_page_target.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/browser_options.rb#47
  def is_page_target; end

  # Returns the value of attribute slow_mo.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/browser_options.rb#47
  def slow_mo; end

  # Returns the value of attribute target_filter.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/browser_options.rb#47
  def target_filter; end
end

# source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#5
class Puppeteer::Launcher::Chrome
  # @return [Chrome] a new instance of Chrome
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#6
  def initialize(project_root:, preferred_revision:, is_puppeteer_core:); end

  # @return [DefaultArgs]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#194
  def default_args(options = T.unsafe(nil)); end

  # @return [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#199
  def executable_path(channel: T.unsafe(nil)); end

  # @param options [!(Launcher.LaunchOptions & Launcher.ChromeArgOptions & Launcher.BrowserOptions)=]
  # @return [!Promise<!Browser>]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#14
  def launch(options = T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#269
  def product; end

  private

  # @param channel [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#243
  def executable_path_for_channel(channel); end

  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#207
  def fallback_executable_path; end
end

# source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#211
Puppeteer::Launcher::Chrome::CHROMIUM_CHANNELS = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#112
class Puppeteer::Launcher::Chrome::DefaultArgs
  include ::Enumerable

  # @param options [Launcher::ChromeArgOptions]
  # @return [DefaultArgs] a new instance of DefaultArgs
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#116
  def initialize(chrome_arg_options); end

  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome.rb#186
  def each(&block); end
end

# source://puppeteer-ruby//lib/puppeteer/launcher/chrome_arg_options.rb#24
class Puppeteer::Launcher::ChromeArgOptions
  # * @property {boolean=} headless
  # * @property {Array<string>=} args
  # * @property {string=} userDataDir
  # * @property {boolean=} devtools
  #
  # @return [ChromeArgOptions] a new instance of ChromeArgOptions
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome_arg_options.rb#29
  def initialize(options); end

  # Returns the value of attribute args.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome_arg_options.rb#40
  def args; end

  # Returns the value of attribute debugging_port.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome_arg_options.rb#40
  def debugging_port; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome_arg_options.rb#46
  def devtools?; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome_arg_options.rb#42
  def headless?; end

  # Returns the value of attribute user_data_dir.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/chrome_arg_options.rb#40
  def user_data_dir; end
end

# source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#5
class Puppeteer::Launcher::Firefox
  # @return [Firefox] a new instance of Firefox
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#6
  def initialize(project_root:, preferred_revision:, is_puppeteer_core:); end

  # @return [DefaultArgs]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#206
  def default_args(options = T.unsafe(nil)); end

  # @return [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#111
  def executable_path(channel: T.unsafe(nil)); end

  # @param options [!(Launcher.LaunchOptions & Launcher.ChromeArgOptions & Launcher.BrowserOptions)=]
  # @return [!Promise<!Browser>]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#14
  def launch(options = T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#159
  def product; end

  private

  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#446
  def create_profile(extra_prefs); end

  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#210
  def default_preferences(extra_prefs); end

  # @param channel [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#134
  def executable_path_for_channel(channel); end

  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#119
  def fallback_executable_path; end

  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#437
  def write_preferences(prefs, profile_path); end
end

# source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#163
class Puppeteer::Launcher::Firefox::DefaultArgs
  include ::Enumerable

  # @param options [Launcher::ChromeArgOptions]
  # @return [DefaultArgs] a new instance of DefaultArgs
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#167
  def initialize(chrome_arg_options); end

  # source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#198
  def each(&block); end
end

# source://puppeteer-ruby//lib/puppeteer/launcher/firefox.rb#123
Puppeteer::Launcher::Firefox::FIREFOX_EXECUTABLE_PATHS = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#24
class Puppeteer::Launcher::LaunchOptions
  # @return [LaunchOptions] a new instance of LaunchOptions
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#34
  def initialize(options); end

  # Returns the value of attribute channel.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#48
  def channel; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#62
  def dumpio?; end

  # Returns the value of attribute env.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#48
  def env; end

  # Returns the value of attribute executable_path.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#48
  def executable_path; end

  # Returns the value of attribute extra_prefs_firefox.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#48
  def extra_prefs_firefox; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#58
  def handle_SIGHUP?; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#50
  def handle_SIGINT?; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#54
  def handle_SIGTERM?; end

  # Returns the value of attribute ignore_default_args.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#48
  def ignore_default_args; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#66
  def pipe?; end

  # Returns the value of attribute timeout.
  #
  # source://puppeteer-ruby//lib/puppeteer/launcher/launch_options.rb#48
  def timeout; end
end

# https://github.com/puppeteer/puppeteer/blob/master/lib/LifecycleWatcher.js
#
# source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#4
class Puppeteer::LifecycleWatcher
  include ::Puppeteer::IfPresent

  # * @param {!Puppeteer.FrameManager} frameManager
  #  * @param {!Puppeteer.Frame} frame
  #  * @param {string|!Array<string>} waitUntil
  #  * @param {number} timeout
  #
  # @return [LifecycleWatcher] a new instance of LifecycleWatcher
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#64
  def initialize(frame_manager, frame, wait_until, timeout); end

  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#199
  def dispose; end

  # @param frame [Puppeteer::Frame]
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#126
  def handle_frame_detached(frame); end

  # @param request [Puppeteer::HTTPRequest]
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#98
  def handle_request(request); end

  # @param request [Puppeteer::HTTPRequest]
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#112
  def handle_request_failed(request); end

  # @param response [Puppeteer::HTTPResponse]
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#119
  def handle_response(response); end

  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#148
  def lifecycle_promise; end

  # @return [Puppeteer::HTTPResponse]
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#135
  def navigation_response; end

  # Returns the value of attribute new_document_navigation_promise.
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#148
  def new_document_navigation_promise; end

  # Returns the value of attribute same_document_navigation_promise.
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#148
  def same_document_navigation_promise; end

  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#154
  def timeout_or_termination_promise; end

  private

  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#187
  def check_lifecycle_complete; end

  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#181
  def handle_frame_swapped(frame); end

  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#175
  def navigated(frame); end

  # @param frame [Puppeteer::Frame]
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#169
  def navigated_within_document(frame); end

  # @param error [TerminatedError]
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#144
  def terminate(error); end
end

# source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#7
class Puppeteer::LifecycleWatcher::ExpectedLifecycle
  # @return [ExpectedLifecycle] a new instance of ExpectedLifecycle
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#15
  def initialize(wait_until); end

  # Check if navigation lifecycle has experienced the expected_lifecycle events.
  #
  # @param frame [Puppeteer::Frame]
  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#42
  def completed?(frame); end

  private

  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#33
  def expected_lifecycle; end
end

# source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#8
Puppeteer::LifecycleWatcher::ExpectedLifecycle::PUPPETEER_TO_PROTOCOL_LIFECYCLE = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#53
class Puppeteer::LifecycleWatcher::FrameDetachedError < ::StandardError
  # @return [FrameDetachedError] a new instance of FrameDetachedError
  #
  # source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#54
  def initialize; end
end

# source://puppeteer-ruby//lib/puppeteer/lifecycle_watcher.rb#58
class Puppeteer::LifecycleWatcher::TerminatedError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/mouse.rb#1
class Puppeteer::Mouse
  # @param client [Puppeteer.CDPSession]
  # @param keyboard [Puppeteer::Keyboard]
  # @return [Mouse] a new instance of Mouse
  #
  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#13
  def initialize(client, keyboard); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_click(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_down(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_move(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_up(*args, **kwargs); end

  # @param x [number]
  # @param y [number]
  # @param options [!{delay?: number, button?: "left"|"right"|"middle", clickCount?: number}=]
  #
  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#52
  def click(x, y, delay: T.unsafe(nil), button: T.unsafe(nil), click_count: T.unsafe(nil)); end

  # @param options [!{button?: "left"|"right"|"middle", clickCount?: number}=]
  #
  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#70
  def down(button: T.unsafe(nil), click_count: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#115
  def drag(start, target); end

  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#157
  def drag_and_drop(start, target, delay: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#127
  def drag_enter(target, data); end

  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#137
  def drag_over(target, data); end

  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#147
  def drop(target, data); end

  # @param x [number]
  # @param y [number]
  # @param steps [number]
  #
  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#25
  def move(x, y, steps: T.unsafe(nil)); end

  # @param options [!{button?: "left"|"right"|"middle", clickCount?: number}=]
  #
  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#85
  def up(button: T.unsafe(nil), click_count: T.unsafe(nil)); end

  # Dispatches a `mousewheel` event.
  #
  # @param delta_x [Integer]
  # @param delta_y [Integer]
  #
  # source://puppeteer-ruby//lib/puppeteer/mouse.rb#103
  def wheel(delta_x: T.unsafe(nil), delta_y: T.unsafe(nil)); end
end

# source://puppeteer-ruby//lib/puppeteer/mouse.rb#4
module Puppeteer::Mouse::Button; end

# source://puppeteer-ruby//lib/puppeteer/mouse.rb#6
Puppeteer::Mouse::Button::LEFT = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/mouse.rb#8
Puppeteer::Mouse::Button::MIDDLE = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/mouse.rb#5
Puppeteer::Mouse::Button::NONE = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/mouse.rb#7
Puppeteer::Mouse::Button::RIGHT = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/network_conditions.rb#3
Puppeteer::NETWORK_CONDITIONS = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/network_condition.rb#1
class Puppeteer::NetworkCondition
  # @param download [Number] Download speed (bytes/s)
  # @param upload [Number] Upload speed (bytes/s)
  # @param latency [Number] Latency (ms)
  # @return [NetworkCondition] a new instance of NetworkCondition
  #
  # source://puppeteer-ruby//lib/puppeteer/network_condition.rb#5
  def initialize(download:, upload:, latency:); end

  # Returns the value of attribute download.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_condition.rb#11
  def download; end

  # Returns the value of attribute latency.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_condition.rb#11
  def latency; end

  # Returns the value of attribute upload.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_condition.rb#11
  def upload; end
end

# source://puppeteer-ruby//lib/puppeteer/network_conditions.rb#16
module Puppeteer::NetworkConditions
  private

  # source://puppeteer-ruby//lib/puppeteer/network_conditions.rb#21
  def fast_3g; end

  # source://puppeteer-ruby//lib/puppeteer/network_conditions.rb#17
  def slow_3g; end

  class << self
    # source://puppeteer-ruby//lib/puppeteer/network_conditions.rb#21
    def fast_3g; end

    # source://puppeteer-ruby//lib/puppeteer/network_conditions.rb#17
    def slow_3g; end
  end
end

# Helper class to track network events by request ID
#
# source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#2
class Puppeteer::NetworkEventManager
  # @return [NetworkEventManager] a new instance of NetworkEventManager
  #
  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#3
  def initialize; end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#115
  def enqueue_event_group(network_request_id, queued_event_group); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#67
  def enqueue_redirect_info(fetch_request_id, redirect_info); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#51
  def forget(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#123
  def forget_queued_event_group(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#111
  def forget_request(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#99
  def forget_request_paused(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#87
  def forget_request_will_be_sent(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#119
  def get_queued_event_group(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#107
  def get_request(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#95
  def get_request_paused(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#83
  def get_request_will_be_sent(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#75
  def num_requests_in_progress; end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#59
  def response_extra_info(network_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#103
  def store_request(network_request_id, request); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#91
  def store_request_paused(network_request_id, event); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#79
  def store_request_will_be_sent(network_request_id, event); end

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#71
  def take_queued_redirect_info(fetch_request_id); end

  private

  # source://puppeteer-ruby//lib/puppeteer/network_event_manager.rb#63
  def queued_redirect_info(fetch_request_id); end
end

# source://puppeteer-ruby//lib/puppeteer/network_manager.rb#1
class Puppeteer::NetworkManager
  include ::Puppeteer::DebugPrint
  include ::Puppeteer::EventCallbackable
  include ::Puppeteer::IfPresent

  # @param client [!Puppeteer.CDPSession]
  # @param ignoreHTTPSErrors [boolean]
  # @param frameManager [!Puppeteer.FrameManager]
  # @return [NetworkManager] a new instance of NetworkManager
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#75
  def initialize(client, ignore_https_errors, frame_manager); end

  # @param username [String|NilClass]
  # @param password [String|NilClass]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#132
  def authenticate(username:, password:); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#179
  def cache_enabled=(enabled); end

  # @param network_condition [Puppeteer::NetworkCondition|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#165
  def emulate_network_conditions(network_condition); end

  # @return [!Object<string, string>]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#151
  def extra_http_headers; end

  # @param extraHTTPHeaders [!Object<string, string>]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#138
  def extra_http_headers=(headers); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#115
  def init; end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#122
  def inspect; end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#155
  def num_requests_in_progress; end

  # @param value [TrueClass|FalseClass]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#160
  def offline_mode=(value); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#184
  def request_interception=(enabled); end

  # @param user_agent [String]
  # @param user_agent_metadata [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#171
  def set_user_agent(user_agent, user_agent_metadata = T.unsafe(nil)); end

  # @param user_agent [String]
  # @param user_agent_metadata [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#171
  def user_agent=(user_agent, user_agent_metadata = T.unsafe(nil)); end

  private

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#462
  def emit_loading_failed(event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#435
  def emit_loading_finished(event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#355
  def emit_response_event(response_received_event, extra_info); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#413
  def forget_request(request, forget_events); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#230
  def handle_auth_required(event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#451
  def handle_loading_failed(event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#424
  def handle_loading_finished(event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#294
  def handle_request(event, fetch_request_id); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#256
  def handle_request_paused(event); end

  # @param request [Puppeteer::HTTPRequest]
  # @param response_payload [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#345
  def handle_request_redirect(request, response_payload, extra_info); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#335
  def handle_request_served_from_cache(event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#211
  def handle_request_will_be_sent(event); end

  # @param event [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#370
  def handle_response_received(event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#385
  def handle_response_received_extra_info(event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#288
  def patch_request_event_headers(request_will_be_sent_event, request_paused_event); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#206
  def update_protocol_cache_disabled; end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#189
  def update_protocol_request_interception; end
end

# source://puppeteer-ruby//lib/puppeteer/network_manager.rb#6
class Puppeteer::NetworkManager::Credentials
  # @param username [String|NilClass]
  # @param password [String|NilClass]
  # @return [Credentials] a new instance of Credentials
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#9
  def initialize(username:, password:); end

  # Returns the value of attribute password.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#13
  def password; end

  # Returns the value of attribute username.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#13
  def username; end
end

# source://puppeteer-ruby//lib/puppeteer/network_manager.rb#16
class Puppeteer::NetworkManager::InternalNetworkCondition
  # @return [InternalNetworkCondition] a new instance of InternalNetworkCondition
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#19
  def initialize(client); end

  # Sets the attribute download
  #
  # @param value the value to set the attribute download to.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#17
  def download=(_arg0); end

  # Sets the attribute latency
  #
  # @param value the value to set the attribute latency to.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#17
  def latency=(_arg0); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#33
  def network_condition=(network_condition); end

  # Sets the attribute offline
  #
  # @param value the value to set the attribute offline to.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#17
  def offline=(_arg0); end

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#27
  def offline_mode=(value); end

  # Sets the attribute upload
  #
  # @param value the value to set the attribute upload to.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#17
  def upload=(_arg0); end

  private

  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#46
  def update_network_conditions; end
end

# source://puppeteer-ruby//lib/puppeteer/network_manager.rb#64
class Puppeteer::NetworkManager::QueuedEventGroup
  # @return [QueuedEventGroup] a new instance of QueuedEventGroup
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#65
  def initialize(response_received_event:); end

  # Returns the value of attribute loading_failed_event.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#69
  def loading_failed_event; end

  # Sets the attribute loading_failed_event
  #
  # @param value the value to set the attribute loading_failed_event to.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#69
  def loading_failed_event=(_arg0); end

  # Returns the value of attribute loading_finished_event.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#69
  def loading_finished_event; end

  # Sets the attribute loading_finished_event
  #
  # @param value the value to set the attribute loading_finished_event to.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#69
  def loading_finished_event=(_arg0); end

  # Returns the value of attribute response_received_event.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#68
  def response_received_event; end
end

# source://puppeteer-ruby//lib/puppeteer/network_manager.rb#56
class Puppeteer::NetworkManager::RedirectInfo
  # @return [RedirectInfo] a new instance of RedirectInfo
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#57
  def initialize(event:, fetch_request_id:); end

  # Returns the value of attribute event.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#61
  def event; end

  # Returns the value of attribute fetch_request_id.
  #
  # source://puppeteer-ruby//lib/puppeteer/network_manager.rb#61
  def fetch_request_id; end
end

# source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#1
class Puppeteer::Page
  include ::Puppeteer::DebugPrint
  include ::Puppeteer::EventCallbackable
  include ::Puppeteer::IfPresent

  # @param client [!Puppeteer.CDPSession]
  # @param target [!Puppeteer.Target]
  # @param ignoreHTTPSErrors [boolean]
  # @return [Page] a new instance of Page
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#33
  def initialize(client, target, ignore_https_errors); end

  # `$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<?Puppeteer.ElementHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#330
  def S(selector); end

  # `$$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#340
  def SS(selector); end

  # `$$eval()` in JavaScript.
  #
  # @param selector [String]
  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#379
  def SSeval(selector, page_function, *args); end

  # `$eval()` in JavaScript.
  #
  # @param selector [String]
  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#368
  def Seval(selector, page_function, *args); end

  # `$x()` in JavaScript. $ is not allowed to use as a method name in Ruby.
  #
  # @param expression [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#389
  def Sx(expression); end

  # Returns the value of attribute accessibility.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#282
  def accessibility; end

  # @param url [String?]
  # @param path [String?]
  # @param content [String?]
  # @param type [String?]
  # @param id [String?]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#442
  def add_script_tag(url: T.unsafe(nil), path: T.unsafe(nil), content: T.unsafe(nil), type: T.unsafe(nil), id: T.unsafe(nil)); end

  # @param url [String?]
  # @param path [String?]
  # @param content [String?]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#449
  def add_style_tag(url: T.unsafe(nil), path: T.unsafe(nil), content: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_Sx(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_click(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_eval_on_selector(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_eval_on_selector_all(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_evaluate(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_evaluate_handle(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_focus(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_query_selector(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_query_selector_all(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_select(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_tap(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_type_text(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_file_chooser(*args, **kwargs); end

  # @param url [String]
  # @param predicate [Proc(Puppeteer::Frame -> Boolean] ]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_frame(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_function(*args, **kwargs); end

  # @param timeout [number|nil]
  # @param wait_until [string|nil] 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_navigation(*args, **kwargs); end

  # Waits until request URL matches or request matches the given predicate.
  #
  # Waits until request URL matches
  #  wait_for_request(url: 'https://example.com/awesome')
  #
  # Waits until request matches the given predicate
  #  wait_for_request(predicate: -> (req){ req.url.start_with?('https://example.com/search') })
  #
  # @param url [String]
  # @param predicate [Proc(Puppeteer::HTTPRequest -> Boolean] ]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_request(*args, **kwargs); end

  # @param url [String]
  # @param predicate [Proc(Puppeteer::HTTPRequest -> Boolean] ]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_response(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_selector(*args, **kwargs); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_wait_for_xpath(*args, **kwargs); end

  # @param username [String?]
  # @param password [String?]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#501
  def authenticate(username: T.unsafe(nil), password: T.unsafe(nil)); end

  # Brings page to front (activates tab).
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#867
  def bring_to_front; end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#241
  def browser; end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#245
  def browser_context; end

  # @param enabled [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#885
  def bypass_csp=(enabled); end

  # @param enabled [boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1020
  def cache_enabled=(enabled); end

  # @param selector [String]
  # @param delay [Number]
  # @param button [String] "left"|"right"|"middle"
  # @param click_count [Number]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1220
  def click(selector, delay: T.unsafe(nil), button: T.unsafe(nil), click_count: T.unsafe(nil)); end

  # Returns the value of attribute client.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#238
  def client; end

  # @param run_before_unload [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1190
  def close(run_before_unload: T.unsafe(nil)); end

  # @return [boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1210
  def closed?; end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#650
  def content; end

  # @param html [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#662
  def content=(html); end

  # @return [Array<Hash>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#396
  def cookies(*urls); end

  # Returns the value of attribute coverage.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#282
  def coverage; end

  # @return [Enumerable<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1139
  def create_pdf_stream(options = T.unsafe(nil)); end

  # @param timeout [number]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#318
  def default_navigation_timeout=(timeout); end

  # @param timeout [number]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#323
  def default_timeout=(timeout); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#409
  def delete_cookie(*cookies); end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#161
  def drag_interception_enabled; end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#303
  def drag_interception_enabled=(enabled); end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#161
  def drag_interception_enabled?; end

  # @param device [Device]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#872
  def emulate(device); end

  # @param factor [Number|nil] Factor at which the CPU will be throttled (2x, 2.5x. 3x, ...). Passing `nil` disables cpu throttling.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#899
  def emulate_cpu_throttling(factor); end

  # @param is_user_active [Boolean]
  # @param is_screen_unlocked [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#952
  def emulate_idle_state(is_user_active: T.unsafe(nil), is_screen_unlocked: T.unsafe(nil)); end

  # @param features [Array]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#908
  def emulate_media_features(features); end

  # @param media_type [String|Symbol|nil] either of (media, print, nil)
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#890
  def emulate_media_type(media_type); end

  # @param network_condition [Puppeteer::NetworkCondition|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#313
  def emulate_network_conditions(network_condition); end

  # @param timezone_id [String?]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#923
  def emulate_timezone(timezone_id); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#942
  def emulate_vision_deficiency(vision_deficiency_type); end

  # `$eval()` in JavaScript.
  #
  # @param selector [String]
  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#368
  def eval_on_selector(selector, page_function, *args); end

  # `$$eval()` in JavaScript.
  #
  # @param selector [String]
  # @param page_function [String]
  # @return [Object]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#379
  def eval_on_selector_all(selector, page_function, *args); end

  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<*>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#977
  def evaluate(page_function, *args); end

  # @param pageFunction [Function|string]
  # @param args [!Array<*>]
  # @return [!Promise<!Puppeteer.JSHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#350
  def evaluate_handle(page_function, *args); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#1008
  def evaluate_on_new_document(page_function, *args); end

  # @param name [String]
  # @param puppeteer_function [Proc]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#455
  def expose_function(name, puppeteer_function); end

  # @param headers [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#506
  def extra_http_headers=(headers); end

  # @param selector [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1227
  def focus(selector); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#290
  def frames; end

  # @param [Puppeteer::Geolocation]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#234
  def geolocation=(geolocation); end

  # @param timeout [number|nil]
  # @param wait_until [string|nil] 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#845
  def go_back(timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # @param timeout [number|nil]
  # @param wait_until [string|nil] 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#851
  def go_forward(timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # @param url [String]
  # @param rederer [String]
  # @param timeout [number|nil]
  # @param wait_until [string|nil] 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#670
  def goto(url, referer: T.unsafe(nil), timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#557
  def handle_binding_called(event); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#190
  def handle_file_chooser(event); end

  # @param selector [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1234
  def hover(selector); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#153
  def init; end

  # Returns the value of attribute javascript_enabled.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#238
  def javascript_enabled; end

  # @param enabled [boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#878
  def javascript_enabled=(enabled); end

  # Returns the value of attribute javascript_enabled.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#238
  def javascript_enabled?; end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#284
  def keyboard(&block); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#278
  def main_frame; end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#517
  def metrics; end

  # Returns the value of attribute mouse.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1214
  def mouse; end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#308
  def offline_mode=(enabled); end

  # @param event_name [Symbol]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#167
  def on(event_name, &block); end

  # @param event_name [Symbol]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#182
  def once(event_name, &block); end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1162
  def pdf(options = T.unsafe(nil)); end

  # @param prototypeHandle [!Puppeteer.JSHandle]
  # @return [!Promise<!Puppeteer.JSHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#359
  def query_objects(prototype_handle); end

  # `$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<?Puppeteer.ElementHandle>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#330
  def query_selector(selector); end

  # `$$()` in JavaScript.
  #
  # @param selector [string]
  # @return [!Promise<!Array<!Puppeteer.ElementHandle>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#340
  def query_selector_all(selector); end

  # @param timeout [number|nil]
  # @param wait_until [string|nil] 'load' | 'domcontentloaded' | 'networkidle0' | 'networkidle2'
  # @return [Puppeteer::HTTPResponse]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#677
  def reload(timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # @param value [Bool]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#299
  def request_interception=(value); end

  # @param type [String] "png"|"jpeg"|"webp"
  # @param path [String]
  # @param full_page [Boolean]
  # @param clip [Hash]
  # @param quality [Integer]
  # @param omit_background [Boolean]
  # @param encoding [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1036
  def screenshot(type: T.unsafe(nil), path: T.unsafe(nil), full_page: T.unsafe(nil), clip: T.unsafe(nil), quality: T.unsafe(nil), omit_background: T.unsafe(nil), encoding: T.unsafe(nil), capture_beyond_viewport: T.unsafe(nil), from_surface: T.unsafe(nil)); end

  # @param selector [string]
  # @param values [!Array<string>]
  # @return [!Promise<!Array<string>>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1241
  def select(selector, *values); end

  # @param html [String]
  # @param timeout [Integer]
  # @param wait_until [String|Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#657
  def set_content(html, timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#420
  def set_cookie(*cookies); end

  # @param user_agent [String]
  # @param user_agent_metadata [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#512
  def set_user_agent(user_agent, user_agent_metadata = T.unsafe(nil)); end

  # @param selector [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1248
  def tap(selector: T.unsafe(nil), &block); end

  # Returns the value of attribute target.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#238
  def target; end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1025
  def title; end

  # Returns the value of attribute touch_screen.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#282
  def touch_screen; end

  # Returns the value of attribute tracing.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#282
  def tracing; end

  # @param selector [String]
  # @param text [String]
  # @param delay [Number]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1268
  def type_text(selector, text, delay: T.unsafe(nil)); end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#645
  def url; end

  # @param user_agent [String]
  # @param user_agent_metadata [Hash]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#512
  def user_agent=(user_agent, user_agent_metadata = T.unsafe(nil)); end

  # Returns the value of attribute viewport.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#972
  def viewport; end

  # @param viewport [Viewport]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#966
  def viewport=(viewport); end

  # @param timeout [Integer]
  # @return [Puppeteer::FileChooser]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_file_chooser(*args, **kwargs, &block); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_frame(*args, **kwargs, &block); end

  # @param page_function [String]
  # @param args [Integer|Array]
  # @param polling [String]
  # @param timeout [Integer]
  # @return [Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_function(*args, **kwargs, &block); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_navigation(*args, **kwargs, &block); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_request(*args, **kwargs, &block); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_response(*args, **kwargs, &block); end

  # @param selector [String]
  # @param visible [Boolean] Wait for element visible (not 'display: none' nor 'visibility: hidden') on true. default to false.
  # @param hidden [Boolean] Wait for element invisible ('display: none' nor 'visibility: hidden') on true. default to false.
  # @param timeout [Integer]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_selector(*args, **kwargs, &block); end

  # @param milliseconds [Integer] the number of milliseconds to wait.
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1285
  def wait_for_timeout(milliseconds); end

  # @param xpath [String]
  # @param visible [Boolean] Wait for element visible (not 'display: none' nor 'visibility: hidden') on true. default to false.
  # @param hidden [Boolean] Wait for element invisible ('display: none' nor 'visibility: hidden') on true. default to false.
  # @param timeout [Integer]
  #
  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#24
  def wait_for_xpath(*args, **kwargs, &block); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#294
  def workers; end

  private

  # source://puppeteer-ruby//lib/puppeteer/page.rb#603
  def add_console_message(type, args, stack_trace); end

  # check if each cookie element has required fields ('name' and 'value')
  #
  # @raise [ArgumentError]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#401
  def assert_cookie_params(cookies, requires:); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#855
  def go(delta, timeout: T.unsafe(nil), wait_until: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#133
  def handle_attached_to_target(target, _); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#531
  def handle_console_api(event); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#124
  def handle_detached_from_target(target); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#622
  def handle_dialog_opening(event); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#524
  def handle_exception(exception_details); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#255
  def handle_log_entry_added(event); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#251
  def handle_target_crashed; end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#640
  def reset_default_background_color(&block); end

  # @param format ["png"|"jpeg"]
  # @param options [!ScreenshotOptions=]
  # @return [!Promise<!Buffer|!String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1066
  def screenshot_task(format, screenshot_options); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#743
  def session_close_promise; end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#634
  def set_transparent_background_color(&block); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#716
  def wait_for_frame_manager_event(*event_names, predicate:, timeout:); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#693
  def wait_for_network_manager_event(event_name, predicate:, timeout:); end

  class << self
    # @param client [!Puppeteer.CDPSession]
    # @param target [!Puppeteer.Target]
    # @param ignoreHTTPSErrors [boolean]
    # @param defaultViewport [?Puppeteer.Viewport]
    # @return [!Promise<!Page>]
    #
    # source://puppeteer-ruby//lib/puppeteer/page.rb#21
    def create(client, target, ignore_https_errors, default_viewport); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/page.rb#203
class Puppeteer::Page::FileChooserTimeoutError < ::StandardError
  # @return [FileChooserTimeoutError] a new instance of FileChooserTimeoutError
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#204
  def initialize(timeout:); end
end

# source://puppeteer-ruby//lib/puppeteer/page.rb#998
class Puppeteer::Page::JavaScriptExpression
  # @return [JavaScriptExpression] a new instance of JavaScriptExpression
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#999
  def initialize(expression); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#1003
  def source; end
end

# source://puppeteer-ruby//lib/puppeteer/page.rb#983
class Puppeteer::Page::JavaScriptFunction
  # @return [JavaScriptFunction] a new instance of JavaScriptFunction
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#984
  def initialize(expression, args); end

  # source://puppeteer-ruby//lib/puppeteer/page.rb#989
  def source; end

  private

  # source://puppeteer-ruby//lib/puppeteer/page.rb#993
  def arguments; end
end

# source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#2
class Puppeteer::Page::Metrics
  # @param metrics_result [Hash] response for Performance.getMetrics
  # @return [Metrics] a new instance of Metrics
  #
  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#24
  def initialize(metrics_response); end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def Documents; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def Frames; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def JSEventListeners; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def JSHeapTotalSize; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def JSHeapUsedSize; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def LayoutCount; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def LayoutDuration; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def Nodes; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def RecalcStyleCount; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def RecalcStyleDuration; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def ScriptDuration; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def TaskDuration; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#20
  def Timestamp; end

  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#32
  def [](key); end
end

# source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#3
Puppeteer::Page::Metrics::SUPPORTED_KEYS = T.let(T.unsafe(nil), Set)

# source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#41
class Puppeteer::Page::MetricsEvent
  # @return [MetricsEvent] a new instance of MetricsEvent
  #
  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#42
  def initialize(metrics_event); end

  # Returns the value of attribute metrics.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#47
  def metrics; end

  # Returns the value of attribute title.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/metrics.rb#47
  def title; end
end

# /**
# * @typedef {Object} PDFOptions
# * @property {number=} scale
# * @property {boolean=} displayHeaderFooter
# * @property {string=} headerTemplate
# * @property {string=} footerTemplate
# * @property {boolean=} printBackground
# * @property {boolean=} landscape
# * @property {string=} pageRanges
# * @property {string=} format
# * @property {string|number=} width
# * @property {string|number=} height
# * @property {boolean=} preferCSSPageSize
# * @property {!{top?: string|number, bottom?: string|number, left?: string|number, right?: string|number}=} margin
# */
#
# source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#19
class Puppeteer::Page::PDFOptions
  # @return [PDFOptions] a new instance of PDFOptions
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#21
  def initialize(options); end

  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#136
  def page_print_args; end

  private

  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#130
  def calc_margin; end

  # @return [PaperSize]
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#95
  def calc_paper_size; end

  # @param parameter [String|Integer|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#66
  def convert_print_parameter_to_inches(parameter); end

  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#126
  def margin; end

  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#90
  def paper_size; end
end

# source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#106
class Puppeteer::Page::PDFOptions::Margin
  # @return [Margin] a new instance of Margin
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#107
  def initialize(options); end

  # Returns the value of attribute bottom.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#123
  def bottom; end

  # Returns the value of attribute left.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#123
  def left; end

  # Returns the value of attribute right.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#123
  def right; end

  # Returns the value of attribute top.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#123
  def top; end

  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#114
  def translate(&block); end
end

# source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#44
Puppeteer::Page::PDFOptions::PAPER_FORMATS = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#36
class Puppeteer::Page::PDFOptions::PaperSize
  # @return [PaperSize] a new instance of PaperSize
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#37
  def initialize(width:, height:); end

  # Returns the value of attribute height.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#41
  def height; end

  # Returns the value of attribute width.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#41
  def width; end
end

# source://puppeteer-ruby//lib/puppeteer/page/pdf_options.rb#58
Puppeteer::Page::PDFOptions::UNIT_TO_PIXELS = T.let(T.unsafe(nil), Hash)

# source://puppeteer-ruby//lib/puppeteer/page.rb#522
class Puppeteer::Page::PageError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/page.rb#1132
class Puppeteer::Page::PrintToPdfIsNotImplementedError < ::StandardError
  # @return [PrintToPdfIsNotImplementedError] a new instance of PrintToPdfIsNotImplementedError
  #
  # source://puppeteer-ruby//lib/puppeteer/page.rb#1133
  def initialize; end
end

# /**
# * @defaultValue 'png'
# */
# type?: 'png' | 'jpeg' | 'webp';
# /**
# * The file path to save the image to. The screenshot type will be inferred
# * from file extension. If path is a relative path, then it is resolved
# * relative to current working directory. If no path is provided, the image
# * won't be saved to the disk.
# */
# path?: string;
# /**
# * When true, takes a screenshot of the full page.
# * @defaultValue false
# */
# fullPage?: boolean;
# /**
# * An object which specifies the clipping region of the page.
# */
# clip?: ScreenshotClip;
# /**
# * Quality of the image, between 0-100. Not applicable to `png` images.
# */
# quality?: number;
# /**
# * Hides default white background and allows capturing screenshots with transparency.
# * @defaultValue false
# */
# omitBackground?: boolean;
# /**
# * Encoding of the image.
# * @defaultValue 'binary'
# */
# encoding?: 'base64' | 'binary';
# /**
# * Capture the screenshot beyond the viewport.
# * @defaultValue true
# */
# captureBeyondViewport?: boolean;
# /**
# * Capture the screenshot from the surface, rather than the view.
# * @defaultValue true
# */
# fromSurface?: boolean;
#
# source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#48
class Puppeteer::Page::ScreenshotOptions
  # @return [ScreenshotOptions] a new instance of ScreenshotOptions
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#50
  def initialize(options); end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#121
  def capture_beyond_viewport?; end

  # Returns the value of attribute clip.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#111
  def clip; end

  # Returns the value of attribute encoding.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#111
  def encoding; end

  # Returns the value of attribute from_surface.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#111
  def from_surface; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#113
  def full_page?; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#117
  def omit_background?; end

  # Returns the value of attribute path.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#111
  def path; end

  # Returns the value of attribute quality.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#111
  def quality; end

  # Returns the value of attribute type.
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#111
  def type; end

  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_options.rb#125
  def unset_capture_beyond_viewport!; end
end

# source://puppeteer-ruby//lib/puppeteer/page/screenshot_task_queue.rb#2
class Puppeteer::Page::ScreenshotTaskQueue
  # @return [ScreenshotTaskQueue] a new instance of ScreenshotTaskQueue
  #
  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_task_queue.rb#3
  def initialize; end

  # source://puppeteer-ruby//lib/puppeteer/page/screenshot_task_queue.rb#7
  def post_task(&block); end
end

# source://puppeteer-ruby//lib/puppeteer/page.rb#249
class Puppeteer::Page::TargetCrashedError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/page.rb#933
Puppeteer::Page::VISION_DEFICIENCY_TYPES = T.let(T.unsafe(nil), Array)

# source://puppeteer-ruby//lib/puppeteer/protocol_stream_reader.rb#1
class Puppeteer::ProtocolStreamReader
  # @return [ProtocolStreamReader] a new instance of ProtocolStreamReader
  #
  # source://puppeteer-ruby//lib/puppeteer/protocol_stream_reader.rb#2
  def initialize(client:, handle:); end

  # source://puppeteer-ruby//lib/puppeteer/protocol_stream_reader.rb#8
  def read_as_chunks; end

  private

  # source://puppeteer-ruby//lib/puppeteer/protocol_stream_reader.rb#31
  def io_close; end

  # source://puppeteer-ruby//lib/puppeteer/protocol_stream_reader.rb#15
  def io_read(&block); end
end

# source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#1
class Puppeteer::Puppeteer
  # @param project_root [String]
  # @param prefereed_revision [String]
  # @param is_puppeteer_core [String]
  # @return [Puppeteer] a new instance of Puppeteer
  #
  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#5
  def initialize(project_root:, preferred_revision:, is_puppeteer_core:); end

  # @param browser_ws_endpoint [String]
  # @param browser_url [String]
  # @param transport [Puppeteer::WebSocketTransport]
  # @param ignore_https_errors [Boolean]
  # @param default_viewport [Puppeteer::Viewport|nil]
  # @param slow_mo [Integer]
  # @return [Puppeteer::Browser]
  #
  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#97
  def connect(browser_ws_endpoint: T.unsafe(nil), browser_url: T.unsafe(nil), transport: T.unsafe(nil), ignore_https_errors: T.unsafe(nil), default_viewport: T.unsafe(nil), slow_mo: T.unsafe(nil)); end

  # @param args [Array<String>]
  # @param user_data_dir [String]
  # @param devtools [Boolean]
  # @param headless [Boolean]
  # @return [Array<String>]
  #
  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#200
  def default_args(args: T.unsafe(nil), user_data_dir: T.unsafe(nil), devtools: T.unsafe(nil), headless: T.unsafe(nil)); end

  # @return [Puppeteer::Devices]
  #
  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#181
  def devices; end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#126
  def executable_path(channel: T.unsafe(nil)); end

  # @param product [String]
  # @param channel [String|Symbol]
  # @param executable_path [String]
  # @param ignore_default_args [Array<String>|nil]
  # @param handle_SIGINT [Boolean]
  # @param handle_SIGTERM [Boolean]
  # @param handle_SIGHUP [Boolean]
  # @param timeout [Integer]
  # @param dumpio [Boolean]
  # @param env [Hash]
  # @param pipe [Boolean]
  # @param args [Array<String>]
  # @param user_data_dir [String]
  # @param devtools [Boolean]
  # @param headless [Boolean]
  # @param ignore_https_errors [Boolean]
  # @param default_viewport [Puppeteer::Viewport|nil]
  # @param slow_mo [Integer]
  # @return [Puppeteer::Browser]
  #
  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#32
  def launch(product: T.unsafe(nil), channel: T.unsafe(nil), executable_path: T.unsafe(nil), ignore_default_args: T.unsafe(nil), handle_SIGINT: T.unsafe(nil), handle_SIGTERM: T.unsafe(nil), handle_SIGHUP: T.unsafe(nil), timeout: T.unsafe(nil), dumpio: T.unsafe(nil), env: T.unsafe(nil), pipe: T.unsafe(nil), args: T.unsafe(nil), user_data_dir: T.unsafe(nil), devtools: T.unsafe(nil), debugging_port: T.unsafe(nil), headless: T.unsafe(nil), ignore_https_errors: T.unsafe(nil), default_viewport: T.unsafe(nil), slow_mo: T.unsafe(nil)); end

  # @return [Puppeteer::NetworkConditions]
  #
  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#191
  def network_conditions; end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#140
  def product; end

  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#144
  def register_custom_query_handler(name:, query_one:, query_all:); end

  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#158
  def with_custom_query_handler(name:, query_one:, query_all:, &block); end

  private

  # source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#130
  def launcher; end
end

# source://puppeteer-ruby//lib/puppeteer/puppeteer.rb#11
class Puppeteer::Puppeteer::NoViewport; end

# source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#3
class Puppeteer::QueryHandlerManager
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#228
  def detect_query_handler(selector); end

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#6
  def query_handlers; end

  private

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#14
  def default_handler; end

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#55
  def text_query_handler; end

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#21
  def xpath_handler; end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#205
class Puppeteer::QueryHandlerManager::Result
  # @return [Result] a new instance of Result
  #
  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#206
  def initialize(query_handler:, selector:); end

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#219
  def query_all(element_handle); end

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#223
  def query_all_array(element_handle); end

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#211
  def query_one(element_handle); end

  # source://puppeteer-ruby//lib/puppeteer/query_handler_manager.rb#215
  def wait_for(element_or_frame, visible:, hidden:, timeout:); end
end

# providing #valueFromRemoteObject, #releaseObject
#
# source://puppeteer-ruby//lib/puppeteer/remote_object.rb#2
class Puppeteer::RemoteObject
  include ::Puppeteer::DebugPrint

  # @param payload [Hash]
  # @return [RemoteObject] a new instance of RemoteObject
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#7
  def initialize(payload); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_release(*args, **kwargs); end

  # used in ElementHandle#_box_model
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#82
  def box_model(client); end

  # used in ElementHandle#clickable_point
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#77
  def content_quads(client); end

  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#155
  def converted_arg; end

  # @return [Future<Puppeteer::RemoteObject|nil>]
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#18
  def evaluate_self(client); end

  # used in ElementHandle#content_frame, ElementHandle#upload_file
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#72
  def node_info(client); end

  # used in JSHandle#properties
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#62
  def properties(client); end

  # used in ElementHandle#query_ax_tree
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#101
  def query_ax_tree(client, accessible_name: T.unsafe(nil), role: T.unsafe(nil)); end

  # @param client [Puppeteer::CDPSession]
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#137
  def release(client); end

  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#180
  def scroll_into_view_if_needed(client); end

  # used in ElementHandle#upload_file
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#176
  def set_file_input_files(client, files, backend_node_id); end

  # Returns the value of attribute sub_type.
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#15
  def sub_type; end

  # @return [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#47
  def type_str; end

  # helper#valueFromRemoteObject
  #
  # source://puppeteer-ruby//lib/puppeteer/remote_object.rb#114
  def value; end
end

# https://github.com/puppeteer/puppeteer/blob/master/lib/Target.js
#
# source://puppeteer-ruby//lib/puppeteer/target.rb#2
class Puppeteer::Target
  # @param targetInfo [!Protocol.Target.TargetInfo]
  # @param browserContext [!Puppeteer.BrowserContext]
  # @param sessionFactory [!function():!Promise<!Puppeteer.CDPSession>]
  # @param ignoreHTTPSErrors [boolean]
  # @param defaultViewport [?Puppeteer.Viewport]
  # @return [Target] a new instance of Target
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#21
  def initialize(target_info:, session:, browser_context:, target_manager:, session_factory:, ignore_https_errors:, default_viewport:, is_page_target_callback:); end

  # @return [!Puppeteer.Browser]
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#146
  def browser; end

  # @return [!Puppeteer.BrowserContext]
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#151
  def browser_context; end

  # source://puppeteer-ruby//lib/puppeteer/target.rb#58
  def closed_callback; end

  # source://puppeteer-ruby//lib/puppeteer/target.rb#95
  def create_cdp_session; end

  # @param targetInfo [!Protocol.Target.TargetInfo]
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#163
  def handle_target_info_changed(target_info); end

  # source://puppeteer-ruby//lib/puppeteer/target.rb#64
  def ignore_initialize_callback_promise; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#86
  def initialized?; end

  # Returns the value of attribute initialized_promise.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#56
  def initialized_promise; end

  # Returns the value of attribute is_closed_promise.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#56
  def is_closed_promise; end

  # @return [?Puppeteer.Target]
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#156
  def opener; end

  # source://puppeteer-ruby//lib/puppeteer/target.rb#103
  def page; end

  # source://puppeteer-ruby//lib/puppeteer/target.rb#141
  def raw_type; end

  # @return [CDPSession|nil]
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#91
  def session; end

  # Returns the value of attribute target_id.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#56
  def target_id; end

  # Returns the value of attribute target_info.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#56
  def target_info; end

  # source://puppeteer-ruby//lib/puppeteer/target.rb#99
  def target_manager; end

  # @return ["page"|"background_page"|"service_worker"|"shared_worker"|"other"|"browser"]
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#131
  def type; end

  # @return [string]
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#126
  def url; end

  private

  # source://puppeteer-ruby//lib/puppeteer/target.rb#70
  def handle_initialized(success); end
end

# source://puppeteer-ruby//lib/puppeteer/target.rb#62
class Puppeteer::Target::InitializeFailure < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/target.rb#3
class Puppeteer::Target::TargetInfo
  # @return [TargetInfo] a new instance of TargetInfo
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#4
  def initialize(options); end

  # Returns the value of attribute attached.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#13
  def attached; end

  # Returns the value of attribute browser_context_id.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#13
  def browser_context_id; end

  # Returns the value of attribute opener_id.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#13
  def opener_id; end

  # Returns the value of attribute target_id.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#13
  def target_id; end

  # Returns the value of attribute title.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#13
  def title; end

  # Returns the value of attribute type.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#13
  def type; end

  # Returns the value of attribute url.
  #
  # source://puppeteer-ruby//lib/puppeteer/target.rb#13
  def url; end
end

# source://puppeteer-ruby//lib/puppeteer/task_manager.rb#1
class Puppeteer::TaskManager
  # @return [TaskManager] a new instance of TaskManager
  #
  # source://puppeteer-ruby//lib/puppeteer/task_manager.rb#2
  def initialize; end

  # source://puppeteer-ruby//lib/puppeteer/task_manager.rb#6
  def add(task); end

  # source://puppeteer-ruby//lib/puppeteer/task_manager.rb#21
  def async_rerun_all; end

  # source://puppeteer-ruby//lib/puppeteer/task_manager.rb#10
  def delete(task); end

  # source://puppeteer-ruby//lib/puppeteer/task_manager.rb#14
  def terminate_all(error); end
end

# ref: https://github.com/puppeteer/puppeteer/blob/master/src/Errors.ts
#
# source://puppeteer-ruby//lib/puppeteer/errors.rb#2
class Puppeteer::TimeoutError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/timeout_helper.rb#3
class Puppeteer::TimeoutHelper
  # @param timeout_ms [String|Integer|nil]
  # @param default_timeout_ms [Integer]
  # @return [TimeoutHelper] a new instance of TimeoutHelper
  #
  # source://puppeteer-ruby//lib/puppeteer/timeout_helper.rb#6
  def initialize(task_name, timeout_ms:, default_timeout_ms:); end

  # source://puppeteer-ruby//lib/puppeteer/timeout_helper.rb#11
  def with_timeout(&block); end
end

# source://puppeteer-ruby//lib/puppeteer/timeout_settings.rb#1
class Puppeteer::TimeoutSettings
  # Sets the attribute default_navigation_timeout
  #
  # @param value the value to set the attribute default_navigation_timeout to.
  #
  # source://puppeteer-ruby//lib/puppeteer/timeout_settings.rb#4
  def default_navigation_timeout=(_arg0); end

  # Sets the attribute default_timeout
  #
  # @param value the value to set the attribute default_timeout to.
  #
  # source://puppeteer-ruby//lib/puppeteer/timeout_settings.rb#4
  def default_timeout=(_arg0); end

  # @return [number]
  #
  # source://puppeteer-ruby//lib/puppeteer/timeout_settings.rb#7
  def navigation_timeout; end

  # @return [number]
  #
  # source://puppeteer-ruby//lib/puppeteer/timeout_settings.rb#12
  def timeout; end
end

# source://puppeteer-ruby//lib/puppeteer/timeout_settings.rb#2
Puppeteer::TimeoutSettings::DEFAULT_TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://puppeteer-ruby//lib/puppeteer/touch_screen.rb#1
class Puppeteer::TouchScreen
  # @param client [Puppeteer.CDPSession]
  # @param keyboard [Puppeteer::Keyboard]
  # @return [TouchScreen] a new instance of TouchScreen
  #
  # source://puppeteer-ruby//lib/puppeteer/touch_screen.rb#6
  def initialize(client, keyboard); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_tap(*args, **kwargs); end

  # @param x [number]
  # @param y [number]
  #
  # source://puppeteer-ruby//lib/puppeteer/touch_screen.rb#13
  def tap(x, y); end
end

# source://puppeteer-ruby//lib/puppeteer/tracing.rb#1
class Puppeteer::Tracing
  # @param client [Puppeteer::CDPSession]
  # @return [Tracing] a new instance of Tracing
  #
  # source://puppeteer-ruby//lib/puppeteer/tracing.rb#3
  def initialize(client); end

  # source://puppeteer-ruby//lib/puppeteer/tracing.rb#23
  def start(path: T.unsafe(nil), screenshots: T.unsafe(nil), categories: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/tracing.rb#43
  def stop; end
end

# source://puppeteer-ruby//lib/puppeteer/tracing.rb#8
Puppeteer::Tracing::DEFAULT_CATEGORIES = T.let(T.unsafe(nil), Array)

# source://puppeteer-ruby//lib/puppeteer/version.rb#2
Puppeteer::VERSION = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/viewport.rb#1
class Puppeteer::Viewport
  # @param width [int]
  # @param height [int]
  # @param device_scale_factor [double]
  # @param is_mobile [boolean]
  # @param has_touch [boolean]
  # @param is_landscape [boolean]
  # @return [Viewport] a new instance of Viewport
  #
  # source://puppeteer-ruby//lib/puppeteer/viewport.rb#8
  def initialize(width:, height:, device_scale_factor: T.unsafe(nil), is_mobile: T.unsafe(nil), has_touch: T.unsafe(nil), is_landscape: T.unsafe(nil)); end

  # Returns the value of attribute device_scale_factor.
  #
  # source://puppeteer-ruby//lib/puppeteer/viewport.rb#23
  def device_scale_factor; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/viewport.rb#29
  def has_touch?; end

  # Returns the value of attribute height.
  #
  # source://puppeteer-ruby//lib/puppeteer/viewport.rb#23
  def height; end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/viewport.rb#33
  def landscape?; end

  # source://puppeteer-ruby//lib/puppeteer/viewport.rb#37
  def merge(width: T.unsafe(nil), height: T.unsafe(nil), device_scale_factor: T.unsafe(nil), is_mobile: T.unsafe(nil), has_touch: T.unsafe(nil), is_landscape: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://puppeteer-ruby//lib/puppeteer/viewport.rb#25
  def mobile?; end

  # Returns the value of attribute width.
  #
  # source://puppeteer-ruby//lib/puppeteer/viewport.rb#23
  def width; end
end

# source://puppeteer-ruby//lib/puppeteer/wait_task.rb#1
class Puppeteer::WaitTask
  # @return [WaitTask] a new instance of WaitTask
  #
  # source://puppeteer-ruby//lib/puppeteer/wait_task.rb#12
  def initialize(dom_world:, predicate_body:, title:, polling:, timeout:, args: T.unsafe(nil), binding_function: T.unsafe(nil), root: T.unsafe(nil)); end

  # source://puppeteer-ruby//lib/puppeteer/define_async_method.rb#64
  def async_rerun(*args, **kwargs); end

  # @return [Puppeteer::JSHandle]
  #
  # source://puppeteer-ruby//lib/puppeteer/wait_task.rb#49
  def await_promise; end

  # source://puppeteer-ruby//lib/puppeteer/wait_task.rb#59
  def rerun; end

  # source://puppeteer-ruby//lib/puppeteer/wait_task.rb#53
  def terminate(error); end

  private

  # source://puppeteer-ruby//lib/puppeteer/wait_task.rb#118
  def cleanup; end
end

# source://puppeteer-ruby//lib/puppeteer/wait_task.rb#4
class Puppeteer::WaitTask::TerminatedError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/wait_task.rb#6
class Puppeteer::WaitTask::TimeoutError < ::Puppeteer::TimeoutError
  # @return [TimeoutError] a new instance of TimeoutError
  #
  # source://puppeteer-ruby//lib/puppeteer/wait_task.rb#7
  def initialize(title:, timeout:); end
end

# source://puppeteer-ruby//lib/puppeteer/wait_task.rb#125
Puppeteer::WaitTask::WAIT_FOR_PREDICATE_PAGE_FUNCTION = T.let(T.unsafe(nil), String)

# ref: https://github.com/rails/rails/blob/master/actioncable/lib/action_cable/connection/client_socket.rb
# ref: https://github.com/cavalle/chrome_remote/blob/master/lib/chrome_remote/web_socket_client.rb
#
# source://puppeteer-ruby//lib/puppeteer/web_socket.rb#7
class Puppeteer::WebSocket
  # @return [WebSocket] a new instance of WebSocket
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#59
  def initialize(url:, max_payload_size:); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#110
  def close(code: T.unsafe(nil), reason: T.unsafe(nil)); end

  # @param block [Proc(reason: String, code: Numeric)]
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#122
  def on_close(&block); end

  # @param block [Proc(error_message: String)]
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#127
  def on_error(&block); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#131
  def on_message(&block); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#117
  def on_open(&block); end

  # @param message [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#105
  def send_text(message); end

  private

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#139
  def handle_on_close(reason:, code:); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#143
  def handle_on_error(error_message:); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#150
  def handle_on_message(data); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#135
  def handle_on_open; end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#80
  def setup; end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#100
  def wait_for_data; end
end

# providing #url, #write(string)
#
# source://puppeteer-ruby//lib/puppeteer/web_socket.rb#8
class Puppeteer::WebSocket::DriverImpl
  # @return [DriverImpl] a new instance of DriverImpl
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#21
  def initialize(url); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#49
  def dispose; end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#43
  def readpartial(maxlen = T.unsafe(nil)); end

  # Returns the value of attribute url.
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#33
  def url; end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#35
  def write(data); end
end

# source://puppeteer-ruby//lib/puppeteer/web_socket.rb#9
class Puppeteer::WebSocket::DriverImpl::SecureSocketFactory
  # @return [SecureSocketFactory] a new instance of SecureSocketFactory
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#10
  def initialize(host, port); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket.rb#15
  def create; end
end

# source://puppeteer-ruby//lib/puppeteer/web_socket.rb#57
Puppeteer::WebSocket::STATE_CLOSED = T.let(T.unsafe(nil), Integer)

# source://puppeteer-ruby//lib/puppeteer/web_socket.rb#56
Puppeteer::WebSocket::STATE_CLOSING = T.let(T.unsafe(nil), Integer)

# source://puppeteer-ruby//lib/puppeteer/web_socket.rb#54
Puppeteer::WebSocket::STATE_CONNECTING = T.let(T.unsafe(nil), Integer)

# source://puppeteer-ruby//lib/puppeteer/web_socket.rb#55
Puppeteer::WebSocket::STATE_OPENED = T.let(T.unsafe(nil), Integer)

# source://puppeteer-ruby//lib/puppeteer/web_socket.rb#78
class Puppeteer::WebSocket::TransportError < ::StandardError; end

# source://puppeteer-ruby//lib/puppeteer/web_socket_transport.rb#1
class Puppeteer::WebSocketTransport
  # @param web_socket [!WebSocket::Driver]
  # @return [WebSocketTransport] a new instance of WebSocketTransport
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket_transport.rb#20
  def initialize(web_socket); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket_transport.rb#38
  def close; end

  # source://puppeteer-ruby//lib/puppeteer/web_socket_transport.rb#44
  def on_close(&block); end

  # source://puppeteer-ruby//lib/puppeteer/web_socket_transport.rb#48
  def on_message(&block); end

  # @param message [String]
  #
  # source://puppeteer-ruby//lib/puppeteer/web_socket_transport.rb#34
  def send_text(message); end

  class << self
    # @param url [string]
    # @return [Puppeteer::WebSocketTransport]
    #
    # source://puppeteer-ruby//lib/puppeteer/web_socket_transport.rb#4
    def create(url); end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#186
module TargetManagerEmittedEvents
  class << self
    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetAvailable; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetChanged; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetDiscovered; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#13
    def TargetGone; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#17
    def keys; end

    # source://puppeteer-ruby//lib/puppeteer/events.rb#18
    def values; end
  end
end

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
TargetManagerEmittedEvents::TargetAvailable = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
TargetManagerEmittedEvents::TargetChanged = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
TargetManagerEmittedEvents::TargetDiscovered = T.let(T.unsafe(nil), String)

# source://puppeteer-ruby//lib/puppeteer/events.rb#12
TargetManagerEmittedEvents::TargetGone = T.let(T.unsafe(nil), String)
