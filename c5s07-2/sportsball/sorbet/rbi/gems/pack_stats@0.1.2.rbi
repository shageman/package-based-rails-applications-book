# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pack_stats` gem.
# Please instead update this file by running `bin/tapioca gem pack_stats`.

# source://pack_stats//lib/pack_stats/private.rb#3
module PackStats
  class << self
    # source://pack_stats//lib/pack_stats.rb#91
    sig do
      params(
        source_code_pathnames: T::Array[::Pathname],
        componentized_source_code_locations: T::Array[::Pathname],
        app_name: ::String,
        packaged_source_code_locations: T.nilable(T::Array[::Pathname]),
        max_enforcements_tag_value: T::Boolean
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_metrics(source_code_pathnames:, componentized_source_code_locations:, app_name:, packaged_source_code_locations: T.unsafe(nil), max_enforcements_tag_value: T.unsafe(nil)); end

    # source://pack_stats//lib/pack_stats.rb#45
    sig do
      params(
        datadog_client: ::Dogapi::Client,
        app_name: ::String,
        source_code_pathnames: T::Array[::Pathname],
        componentized_source_code_locations: T::Array[::Pathname],
        report_time: ::Time,
        verbose: T::Boolean,
        packaged_source_code_locations: T.nilable(T::Array[::Pathname]),
        max_enforcements_tag_value: T::Boolean
      ).void
    end
    def report_to_datadog!(datadog_client:, app_name:, source_code_pathnames:, componentized_source_code_locations: T.unsafe(nil), report_time: T.unsafe(nil), verbose: T.unsafe(nil), packaged_source_code_locations: T.unsafe(nil), max_enforcements_tag_value: T.unsafe(nil)); end

    private

    # source://pack_stats//lib/pack_stats.rb#116
    sig do
      params(
        source_code_pathnames: T::Array[::Pathname],
        componentized_source_code_locations: T::Array[::Pathname]
      ).returns(T::Array[::PackStats::Private::SourceCodeFile])
    end
    def source_code_files(source_code_pathnames:, componentized_source_code_locations:); end
  end
end

# source://pack_stats//lib/pack_stats.rb#24
PackStats::DEFAULT_COMPONENTIZED_SOURCE_CODE_LOCATIONS = T.let(T.unsafe(nil), Array)

# source://pack_stats//lib/pack_stats/gauge_metric.rb#4
class PackStats::GaugeMetric < ::T::Struct
  const :name, ::String
  const :count, ::Integer
  const :tags, T::Array[::PackStats::Tag]

  # source://pack_stats//lib/pack_stats/gauge_metric.rb#34
  sig { params(other: ::PackStats::GaugeMetric).returns(T::Boolean) }
  def ==(other); end

  # source://pack_stats//lib/pack_stats/gauge_metric.rb#29
  sig { returns(::String) }
  def to_s; end

  class << self
    # source://pack_stats//lib/pack_stats/gauge_metric.rb#12
    sig do
      params(
        metric_name: ::String,
        count: ::Integer,
        tags: T::Array[::PackStats::Tag]
      ).returns(::PackStats::GaugeMetric)
    end
    def for(metric_name, count, tags); end

    # source://sorbet-runtime/0.5.10884/lib/types/struct.rb#13
    def inherited(s); end

    # source://pack_stats//lib/pack_stats/gauge_metric.rb#47
    sig { returns(::PackStats::Tag) }
    def max_enforcements_tag; end

    # source://pack_stats//lib/pack_stats/gauge_metric.rb#41
    sig { params(tag_value: T::Boolean).void }
    def set_max_enforcements_tag(tag_value); end
  end
end

# source://pack_stats//lib/pack_stats/private.rb#4
module PackStats::Private
  class << self
    # source://pack_stats//lib/pack_stats/private.rb#8
    sig { params(package: ::ParsePackwerk::Package).returns(T.nilable(::String)) }
    def package_owner(package); end
  end
end

# source://pack_stats//lib/pack_stats/private/datadog_reporter.rb#16
class PackStats::Private::DatadogReporter
  class << self
    # source://pack_stats//lib/pack_stats/private/datadog_reporter.rb#25
    sig do
      params(
        source_code_files: T::Array[::PackStats::Private::SourceCodeFile],
        app_name: ::String
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_metrics(source_code_files:, app_name:); end

    # source://pack_stats//lib/pack_stats/private/datadog_reporter.rb#44
    sig do
      params(
        datadog_client: ::Dogapi::Client,
        report_time: ::Time,
        metrics: T::Array[::PackStats::GaugeMetric]
      ).void
    end
    def report!(datadog_client:, report_time:, metrics:); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics.rb#6
module PackStats::Private::Metrics
  class << self
    # source://pack_stats//lib/pack_stats/private/metrics.rb#47
    sig { params(violations: T::Array[::ParsePackwerk::Violation]).returns(::Integer) }
    def file_count(violations); end

    # source://pack_stats//lib/pack_stats/private/metrics.rb#52
    sig { params(package: ::ParsePackwerk::Package).returns(T::Boolean) }
    def has_readme?(package); end

    # source://pack_stats//lib/pack_stats/private/metrics.rb#38
    sig { params(name: ::String).returns(::String) }
    def humanized_package_name(name); end

    # source://pack_stats//lib/pack_stats/private/metrics.rb#33
    sig { params(team_name: T.nilable(::String)).returns(T::Array[::PackStats::Tag]) }
    def tags_for_other_team(team_name); end

    # source://pack_stats//lib/pack_stats/private/metrics.rb#16
    sig { params(package: ::ParsePackwerk::Package, app_name: ::String).returns(T::Array[::PackStats::Tag]) }
    def tags_for_package(package, app_name); end

    # source://pack_stats//lib/pack_stats/private/metrics.rb#11
    sig { params(team_name: T.nilable(::String)).returns(T::Array[::PackStats::Tag]) }
    def tags_for_team(team_name); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics/dependencies.rb#7
class PackStats::Private::Metrics::Dependencies
  class << self
    # source://pack_stats//lib/pack_stats/private/metrics/dependencies.rb#11
    sig do
      params(
        prefix: ::String,
        packages: T::Array[::ParsePackwerk::Package],
        app_name: ::String
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_metrics(prefix, packages, app_name); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics/files.rb#7
class PackStats::Private::Metrics::Files
  class << self
    # source://pack_stats//lib/pack_stats/private/metrics/files.rb#37
    sig do
      params(
        metric_name_suffix: ::String,
        tags: T::Array[::PackStats::Tag],
        files: T::Array[::PackStats::Private::SourceCodeFile]
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_file_metrics(metric_name_suffix, tags, files); end

    # source://pack_stats//lib/pack_stats/private/metrics/files.rb#16
    sig do
      params(
        source_code_files: T::Array[::PackStats::Private::SourceCodeFile],
        app_name: ::String
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_metrics(source_code_files, app_name); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics/packages.rb#7
class PackStats::Private::Metrics::Packages
  class << self
    # source://pack_stats//lib/pack_stats/private/metrics/packages.rb#16
    sig do
      params(
        packages: T::Array[::ParsePackwerk::Package],
        app_name: ::String
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_package_metrics(packages, app_name); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics/packages_by_team.rb#7
class PackStats::Private::Metrics::PackagesByTeam
  class << self
    # source://pack_stats//lib/pack_stats/private/metrics/packages_by_team.rb#16
    sig do
      params(
        all_packages: T::Array[::ParsePackwerk::Package],
        app_name: ::String
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_package_metrics_by_team(all_packages, app_name); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics/packwerk_checker_usage.rb#9
class PackStats::Private::Metrics::PackwerkCheckerUsage
  class << self
    # source://pack_stats//lib/pack_stats/private/metrics/packwerk_checker_usage.rb#46
    sig do
      params(
        prefix: ::String,
        packages: T::Array[::ParsePackwerk::Package],
        package_tags: T::Array[::PackStats::Tag]
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_checker_metrics(prefix, packages, package_tags); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics/packwerk_checker_usage.rb#38
PackStats::Private::Metrics::PackwerkCheckerUsage::CHECKERS = T.let(T.unsafe(nil), Array)

# Some violations (e.g. dependency, visibility, architecture) matter for the referencing (outbound) package.
# Other violations (e.g. privacy) matter for the referenced (inbound) package.
#
# source://pack_stats//lib/pack_stats/private/metrics/packwerk_checker_usage.rb#14
class PackStats::Private::Metrics::PackwerkCheckerUsage::Direction < ::T::Enum
  enums do
    Inbound = new
    Outbound = new
  end
end

# Later, we might find a way we can get this directly from `packwerk`
#
# source://pack_stats//lib/pack_stats/private/metrics/packwerk_checker_usage.rb#22
class PackStats::Private::Metrics::PackwerkCheckerUsage::PackwerkChecker < ::T::Struct
  const :key, ::String
  const :violation_type, ::String
  const :direction, ::PackStats::Private::Metrics::PackwerkCheckerUsage::Direction

  # source://pack_stats//lib/pack_stats/private/metrics/packwerk_checker_usage.rb#30
  sig { returns(::PackStats::Tag) }
  def violation_type_tag; end

  class << self
    # source://sorbet-runtime/0.5.10884/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics/public_usage.rb#7
class PackStats::Private::Metrics::PublicUsage
  class << self
    # source://pack_stats//lib/pack_stats/private/metrics/public_usage.rb#11
    sig do
      params(
        prefix: ::String,
        packages: T::Array[::ParsePackwerk::Package],
        package_tags: T::Array[::PackStats::Tag]
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_public_usage_metrics(prefix, packages, package_tags); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics/rubocop_usage.rb#7
class PackStats::Private::Metrics::RubocopUsage
  class << self
    # TODO: `rubocop-packs` may want to expose API for this
    #
    # source://pack_stats//lib/pack_stats/private/metrics/rubocop_usage.rb#65
    sig { params(package: ::ParsePackwerk::Package, cop_name: ::String).returns(::Integer) }
    def exclude_count_for_package_and_protection(package, cop_name); end

    # source://pack_stats//lib/pack_stats/private/metrics/rubocop_usage.rb#11
    sig do
      params(
        prefix: ::String,
        packages: T::Array[::ParsePackwerk::Package],
        package_tags: T::Array[::PackStats::Tag]
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_metrics(prefix, packages, package_tags); end

    # source://pack_stats//lib/pack_stats/private/metrics/rubocop_usage.rb#55
    sig do
      params(
        prefix: ::String,
        packages: T::Array[::ParsePackwerk::Package],
        package_tags: T::Array[::PackStats::Tag]
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_rubocop_exclusions(prefix, packages, package_tags); end

    # source://pack_stats//lib/pack_stats/private/metrics/rubocop_usage.rb#19
    sig do
      params(
        prefix: ::String,
        packages: T::Array[::ParsePackwerk::Package],
        package_tags: T::Array[::PackStats::Tag]
      ).returns(T::Array[::PackStats::GaugeMetric])
    end
    def get_rubocop_usage_metrics(prefix, packages, package_tags); end

    # source://pack_stats//lib/pack_stats/private/metrics/rubocop_usage.rb#82
    sig { returns(T::Array[::String]) }
    def rubocops; end

    # source://pack_stats//lib/pack_stats/private/metrics/rubocop_usage.rb#92
    sig { params(cop_name: ::String).returns(::String) }
    def to_tag_name(cop_name); end
  end
end

# source://pack_stats//lib/pack_stats/private/metrics.rb#8
PackStats::Private::Metrics::UNKNOWN_OWNER = T.let(T.unsafe(nil), String)

# source://pack_stats//lib/pack_stats/private/source_code_file.rb#5
class PackStats::Private::SourceCodeFile < ::T::Struct
  const :is_componentized_file, T::Boolean
  const :is_packaged_file, T::Boolean
  const :team_owner, T.nilable(::CodeTeams::Team)
  const :pathname, ::Pathname

  # source://pack_stats//lib/pack_stats/private/source_code_file.rb#14
  sig { returns(T::Boolean) }
  def componentized_file?; end

  # source://pack_stats//lib/pack_stats/private/source_code_file.rb#19
  sig { returns(T::Boolean) }
  def packaged_file?; end

  class << self
    # source://sorbet-runtime/0.5.10884/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://pack_stats//lib/pack_stats.rb#22
PackStats::ROOT_PACKAGE_NAME = T.let(T.unsafe(nil), String)

# source://pack_stats//lib/pack_stats/tag.rb#4
class PackStats::Tag < ::T::Struct
  const :key, ::String
  const :value, ::String

  # source://pack_stats//lib/pack_stats/tag.rb#23
  sig { params(other: ::PackStats::Tag).returns(T::Boolean) }
  def ==(other); end

  # source://pack_stats//lib/pack_stats/tag.rb#10
  sig { returns(::String) }
  def to_s; end

  class << self
    # source://pack_stats//lib/pack_stats/tag.rb#15
    sig { params(key: ::String, value: ::String).returns(::PackStats::Tag) }
    def for(key, value); end

    # source://sorbet-runtime/0.5.10884/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://pack_stats//lib/pack_stats/tags.rb#4
module PackStats::Tags
  class << self
    # source://pack_stats//lib/pack_stats/tags.rb#8
    sig { params(colon_delimited_tag_strings: T::Array[::String]).returns(T::Array[::PackStats::Tag]) }
    def for(colon_delimited_tag_strings); end
  end
end
