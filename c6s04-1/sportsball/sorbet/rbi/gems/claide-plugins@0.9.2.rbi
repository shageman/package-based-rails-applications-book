# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `claide-plugins` gem.
# Please instead update this file by running `bin/tapioca gem claide-plugins`.

# source://claide-plugins//lib/claide/command/plugins_config.rb#3
module CLAide; end

# source://claide-plugins//lib/claide/command/plugins.rb#26
class CLAide::Command
  # source://claide/1.1.0/lib/claide/command.rb#521
  def initialize(argv); end

  # source://claide/1.1.0/lib/claide/command.rb#497
  def ansi_output; end

  # source://claide/1.1.0/lib/claide/command.rb#497
  def ansi_output=(_arg0); end

  # source://claide/1.1.0/lib/claide/command.rb#497
  def ansi_output?; end

  # source://claide/1.1.0/lib/claide/command.rb#288
  def handle_root_options(argv); end

  # source://claide/1.1.0/lib/claide/command.rb#506
  def help?; end

  # source://claide/1.1.0/lib/claide/command.rb#506
  def help_arg; end

  # source://claide/1.1.0/lib/claide/command.rb#506
  def help_arg=(_arg0); end

  # source://claide/1.1.0/lib/claide/command.rb#550
  def invoked_as_default; end

  # source://claide/1.1.0/lib/claide/command.rb#550
  def invoked_as_default=(_arg0); end

  # source://claide/1.1.0/lib/claide/command.rb#550
  def invoked_as_default?; end

  # source://claide/1.1.0/lib/claide/command.rb#299
  def print_version; end

  # source://claide/1.1.0/lib/claide/command.rb#579
  def run; end

  # source://claide/1.1.0/lib/claide/command.rb#565
  def validate!; end

  # source://claide/1.1.0/lib/claide/command.rb#483
  def verbose; end

  # source://claide/1.1.0/lib/claide/command.rb#483
  def verbose=(_arg0); end

  # source://claide/1.1.0/lib/claide/command.rb#483
  def verbose?; end

  protected

  # source://claide/1.1.0/lib/claide/command.rb#618
  def banner!; end

  # source://claide/1.1.0/lib/claide/command.rb#608
  def help!(error_message = T.unsafe(nil)); end

  # source://claide/1.1.0/lib/claide/command.rb#590
  def invoked_command_class; end

  class << self
    # source://claide/1.1.0/lib/claide/command.rb#52
    def abstract_command; end

    # source://claide/1.1.0/lib/claide/command.rb#52
    def abstract_command=(_arg0); end

    # source://claide/1.1.0/lib/claide/command.rb#52
    def abstract_command?; end

    # source://claide/1.1.0/lib/claide/command.rb#127
    def ansi_output; end

    # source://claide/1.1.0/lib/claide/command.rb#133
    def ansi_output=(_arg0); end

    # source://claide/1.1.0/lib/claide/command.rb#127
    def ansi_output?; end

    # source://claide/1.1.0/lib/claide/command.rb#98
    def arguments; end

    # source://claide/1.1.0/lib/claide/command.rb#109
    def arguments=(arguments); end

    # source://claide/1.1.0/lib/claide/command.rb#631
    def arguments_array=(arguments); end

    # source://claide/1.1.0/lib/claide/command.rb#647
    def arguments_string=(arguments); end

    # source://claide/1.1.0/lib/claide/command.rb#451
    def banner(banner_class = T.unsafe(nil)); end

    # source://claide/1.1.0/lib/claide/command.rb#463
    def banner!; end

    # source://claide/1.1.0/lib/claide/command.rb#139
    def command; end

    # source://claide/1.1.0/lib/claide/command.rb#144
    def command=(_arg0); end

    # source://claide/1.1.0/lib/claide/command.rb#70
    def default_subcommand; end

    # source://claide/1.1.0/lib/claide/command.rb#70
    def default_subcommand=(_arg0); end

    # source://claide/1.1.0/lib/claide/command.rb#81
    def description; end

    # source://claide/1.1.0/lib/claide/command.rb#81
    def description=(_arg0); end

    # source://claide/1.1.0/lib/claide/command.rb#210
    def find_subcommand(name); end

    # source://claide/1.1.0/lib/claide/command.rb#163
    def full_command; end

    # source://claide/1.1.0/lib/claide/command.rb#387
    def handle_exception(command, exception); end

    # source://claide/1.1.0/lib/claide/command.rb#438
    def help!(error_message = T.unsafe(nil), help_class = T.unsafe(nil)); end

    # source://claide/1.1.0/lib/claide/command.rb#61
    def ignore_in_command_lookup; end

    # source://claide/1.1.0/lib/claide/command.rb#63
    def ignore_in_command_lookup=(flag); end

    # source://claide/1.1.0/lib/claide/command.rb#61
    def ignore_in_command_lookup?; end

    # source://claide/1.1.0/lib/claide/command.rb#218
    def inherited(subcommand); end

    # source://claide/1.1.0/lib/claide/command.rb#541
    def invoke(*args); end

    # source://claide/1.1.0/lib/claide/command.rb#366
    def load_default_subcommand(argv); end

    # source://claide/1.1.0/lib/claide/command.rb#251
    def options; end

    # source://claide/1.1.0/lib/claide/command.rb#347
    def parse(argv); end

    # source://claide/1.1.0/lib/claide/command.rb#663
    def plugin_prefix=(prefix); end

    # source://claide/1.1.0/lib/claide/command.rb#87
    def plugin_prefixes; end

    # source://claide/1.1.0/lib/claide/command.rb#90
    def plugin_prefixes=(_arg0); end

    # source://claide/1.1.0/lib/claide/command.rb#414
    def report_error(exception); end

    # source://claide/1.1.0/lib/claide/command.rb#177
    def root_command?; end

    # source://claide/1.1.0/lib/claide/command.rb#324
    def run(argv = T.unsafe(nil)); end

    # source://claide/1.1.0/lib/claide/command.rb#184
    def subcommands; end

    # source://claide/1.1.0/lib/claide/command.rb#192
    def subcommands_for_command_lookup; end

    # source://claide/1.1.0/lib/claide/command.rb#75
    def summary; end

    # source://claide/1.1.0/lib/claide/command.rb#75
    def summary=(_arg0); end

    # source://claide/1.1.0/lib/claide/command.rb#149
    def version; end

    # source://claide/1.1.0/lib/claide/command.rb#149
    def version=(_arg0); end

    private

    # source://claide/1.1.0/lib/claide/command.rb#269
    def option(name, description); end
  end
end

# This module is used by Command::PluginsHelper to download the Gem
# Specification data, check if a Gem is installed, and provide info
# on all versions of a Gem.
#
# source://claide-plugins//lib/claide/command/gem_helper.rb#9
module CLAide::Command::GemHelper
  class << self
    # Getter for GemIndexCache
    #
    # @return [GemIndexCache] a new or memoized GemIndexCache
    #
    # source://claide-plugins//lib/claide/command/gem_helper.rb#18
    def cache; end

    # Colorize an Array of version strings so versions that are installed
    # are green and uninstalled versions are yellow.
    #
    # @param versions [Array] sorted array of Gem::NameTuples representing all versions of
    #   a plugin gem.
    # @return [Array] An array of strings, each one being the version
    #   string of the same plugin
    #
    # source://claide-plugins//lib/claide/command/gem_helper.rb#107
    def colorize_versions(versions); end

    # Instantiate a cache and download the spec index if it has
    # not already been done.
    #
    # source://claide-plugins//lib/claide/command/gem_helper.rb#25
    def download_and_cache_specs; end

    # Tells if a gem is installed
    #
    # @param gem_name [String] The name of the plugin gem to test
    # @param version_string [String] An optional version string, used to check if a specific
    #   version of a gem is installed
    # @return [Bool] true if the gem is installed, false otherwise.
    #
    # source://claide-plugins//lib/claide/command/gem_helper.rb#40
    def gem_installed?(gem_name, version_string = T.unsafe(nil)); end

    # Get the version of a gem that is installed locally. If more than
    # one version is installed, this returns the first version found,
    # which MAY not be the highest/newest version.
    #
    # @return [String] The version of the gem that is installed,
    #   or nil if it is not installed.
    #
    # source://claide-plugins//lib/claide/command/gem_helper.rb#61
    def installed_version(gem_name); end

    # Create a string containing all versions of a plugin,
    # colored to indicate if a specific version is installed
    # locally.
    #
    # @param plugin_name [String] The name of the plugin gem
    # @param index_cache [GemIndexCache] Optional index cache can be passed in, otherwise
    #   the module instance is used.
    # @return [String] a string containing a comma separated
    #   concatenation of all versions of a plugin
    #   that were found on rubygems.org
    #
    # source://claide-plugins//lib/claide/command/gem_helper.rb#86
    def versions_string(plugin_name, index_cache = T.unsafe(nil)); end
  end
end

# This class is used by Command::GemsHelper to download the Gem
# Specification index from rubygems.org and provide info about
# the index.
#
# source://claide-plugins//lib/claide/command/gem_index_cache.rb#9
class CLAide::Command::GemIndexCache
  # A memoized hash of all the rubygem specs. If it is nil, the specs will
  # be downloaded, which will take a few seconds to download.
  # Alias to make the initial caching process more readable.
  #
  # @return [Hash] The hash of all rubygems
  #
  # source://claide-plugins//lib/claide/command/gem_index_cache.rb#15
  def download_and_cache_specs; end

  # A memoized hash of all the rubygem specs. If it is nil, the specs will
  # be downloaded, which will take a few seconds to download.
  #
  # @return [Hash] The hash of all rubygems
  #
  # source://claide-plugins//lib/claide/command/gem_index_cache.rb#15
  def specs; end

  # Get an Array of Gem::NameTuple objects that match a given
  # spec name.
  #
  # @param name [String] The name of the gem to match on (e.g. 'cocoapods-try')
  # @return [Array] Array of Gem::NameTuple that match the name
  #
  # source://claide-plugins//lib/claide/command/gem_index_cache.rb#31
  def specs_with_name(name); end

  private

  # Force the rubygem spec index file
  #
  # @return [Hash] The hash of all rubygems
  #
  # source://claide-plugins//lib/claide/command/gem_index_cache.rb#52
  def download_specs; end

  # Flatten the dictionary returned from Gem::SpecFetcher
  # to a simple array.
  #
  # @param results [Hash] the hash returned from the call to
  #   Gem::SpecFetcher.available_specs()
  # @return [Array] Array of all spec results
  #
  # source://claide-plugins//lib/claide/command/gem_index_cache.rb#75
  def flatten_fetcher_results(results); end
end

# The claide plugins command.
#
# source://claide-plugins//lib/claide/command/plugins.rb#29
class CLAide::Command::Plugins < ::CLAide::Command; end

# The create subcommand. Used to create a new plugin using either the
# default template (CocoaPods/cocoapods-plugin-template) or a custom
# template
#
# source://claide-plugins//lib/claide/command/plugins/create.rb#12
class CLAide::Command::Plugins::Create < ::CLAide::Command::Plugins
  # @return [Create] a new instance of Create
  #
  # source://claide-plugins//lib/claide/command/plugins/create.rb#30
  def initialize(argv); end

  # source://claide-plugins//lib/claide/command/plugins/create.rb#49
  def run; end

  # source://claide-plugins//lib/claide/command/plugins/create.rb#40
  def validate!; end

  private

  # Shows a reminder to the plugin author to make a Pull Request
  # in order to update plugins.json once the plugin is released
  #
  # source://claide-plugins//lib/claide/command/plugins/create.rb#63
  def show_reminder; end

  class << self
    # source://claide-plugins//lib/claide/command/plugins/create.rb#14
    def description; end
  end
end

# The list subcommand. Used to list all known plugins
#
# source://claide-plugins//lib/claide/command/plugins/list.rb#9
class CLAide::Command::Plugins::List < ::CLAide::Command::Plugins
  # source://claide-plugins//lib/claide/command/plugins/list.rb#20
  def run; end

  class << self
    # source://claide-plugins//lib/claide/command/plugins/list.rb#11
    def description; end

    # source://claide-plugins//lib/claide/command/plugins/list.rb#16
    def options; end
  end
end

# The search subcommand.
# Used to search a plugin in the list of known plugins,
# searching into the name, author description fields
#
# source://claide-plugins//lib/claide/command/plugins/search.rb#12
class CLAide::Command::Plugins::Search < ::CLAide::Command::Plugins
  # @return [Search] a new instance of Search
  #
  # source://claide-plugins//lib/claide/command/plugins/search.rb#31
  def initialize(argv); end

  # source://claide-plugins//lib/claide/command/plugins/search.rb#47
  def run; end

  # source://claide-plugins//lib/claide/command/plugins/search.rb#37
  def validate!; end

  class << self
    # source://claide-plugins//lib/claide/command/plugins/search.rb#25
    def options; end
  end
end

# This module is used by Command::Plugins::List
# and Command::Plugins::Search to download and parse
# the JSON describing the plugins list and manipulate it
#
# source://claide-plugins//lib/claide/command/plugins_helper.rb#9
module CLAide::Command::PluginsHelper
  class << self
    # Force-download the JSON
    #
    # @return [Hash] The hash representing the JSON with all known plugins
    #
    # source://claide-plugins//lib/claide/command/plugins_helper.rb#22
    def download_json; end

    # The list of all known plugins, according to
    # the JSON hosted on github's cocoapods-plugins
    #
    # @return [Array] all known plugins, as listed in the downloaded JSON
    #
    # source://claide-plugins//lib/claide/command/plugins_helper.rb#38
    def known_plugins; end

    # Filter plugins to return only matching ones
    #
    # @param query [String] A query string that corresponds to a valid RegExp pattern.
    # @param full_text_search [Bool] false only searches in the plugin's name.
    #   true searches in the plugin's name, author and description.
    # @return [Array] all plugins matching the query
    #
    # source://claide-plugins//lib/claide/command/plugins_helper.rb#54
    def matching_plugins(query, full_text_search); end

    # Parse the given JSON data, handling parsing errors if any
    #
    # @param json_str [String] The string representation of the JSON to parse
    #
    # source://claide-plugins//lib/claide/command/plugins_helper.rb#113
    def parse_json(json_str); end

    # source://claide-plugins//lib/claide/command/plugins_helper.rb#14
    def plugin_prefix; end

    # Format the title line to print the plugin info with print_plugin
    # coloring it according to whether the plugin is installed or not
    #
    # @param plugin [Hash] The hash describing the plugin
    # @return [String] The formatted and colored title
    #
    # source://claide-plugins//lib/claide/command/plugins_helper.rb#128
    def plugin_title(plugin); end

    # source://claide-plugins//lib/claide/command/plugins_helper.rb#10
    def plugins_raw_url; end

    # Display information about a plugin
    #
    # @param plugin [Hash] The hash describing the plugin
    # @param verbose [Bool] If true, will also print the author of the plugins.
    #   Defaults to false.
    #
    # source://claide-plugins//lib/claide/command/plugins_helper.rb#75
    def print_plugin(plugin, verbose = T.unsafe(nil)); end

    # Smaller helper to print out the verbose details
    # for a plugin.
    #
    # @param plugin [Hash] The hash describing the plugin
    # @param ljust [Integer] The left justification that is passed into UI.labeled
    #
    # source://claide-plugins//lib/claide/command/plugins_helper.rb#100
    def print_verbose_plugin(plugin, ljust); end
  end
end

# Module which provides support for running executables.
#
# In a class it can be used as:
#
#     extend Executable
#     executable :git
#
# This will create two methods `git` and `git!` both accept a command but
# the latter will raise on non successful executions. The methods return the
# output of the command.
#
# source://claide-plugins//lib/claide/executable.rb#13
module CLAide::Executable
  # Creates the methods for the executable with the given name.
  #
  # @param name [Symbol] the name of the executable.
  # @return [void]
  #
  # source://claide-plugins//lib/claide/executable.rb#21
  def executable(name); end

  class << self
    # Executes the given command. Displays output if in verbose mode.
    #
    # @param bin [String] The binary to use.
    # @param command [Array<#to_s>] The command to send to the binary.
    # @param raise_on_failure [Bool] Whether it should raise if the command fails.
    # @raise If the executable could not be located.
    # @raise If the command fails and the `raise_on_failure` is set to true.
    # @return [String] the output of the command (STDOUT and STDERR).
    # @todo Find a way to display the live output of the commands.
    #
    # source://claide-plugins//lib/claide/executable.rb#50
    def execute_command(exe, command, raise_on_failure); end
  end
end

# Helper class that allows to write to an {IO} instance taking into account
# the UI indentation level.
#
# source://claide-plugins//lib/claide/executable.rb#86
class CLAide::Executable::Indenter < ::Array
  # @param io [IO] @see io
  # @return [Indenter] a new instance of Indenter
  #
  # source://claide-plugins//lib/claide/executable.rb#97
  def initialize(io = T.unsafe(nil)); end

  # Stores a portion of the output and prints it to the {IO} instance.
  #
  # @param value [String] the output to print.
  # @return [void]
  #
  # source://claide-plugins//lib/claide/executable.rb#109
  def <<(value); end

  # @return [Fixnum] The indentation level of the UI.
  #
  # source://claide-plugins//lib/claide/executable.rb#89
  def indent; end

  # @return [Fixnum] The indentation level of the UI.
  #
  # source://claide-plugins//lib/claide/executable.rb#89
  def indent=(_arg0); end

  # @return [IO] the {IO} to which the output should be printed.
  #
  # source://claide-plugins//lib/claide/executable.rb#93
  def io; end

  # @return [IO] the {IO} to which the output should be printed.
  #
  # source://claide-plugins//lib/claide/executable.rb#93
  def io=(_arg0); end
end

# Indicates a user error.
#
# source://claide-plugins//lib/claide/command/plugins.rb#24
class CLAide::Informative < ::CLAide::PlainInformative; end

# Indicates a runtime error **not** caused by a bug.
#
# source://claide-plugins//lib/claide/command/plugins.rb#20
class CLAide::PlainInformative < ::StandardError; end

# source://claide-plugins//lib/claide/command/plugins_config.rb#4
module CLAide::Plugins
  class << self
    # Returns the value of attribute config.
    #
    # source://claide-plugins//lib/claide/command/plugins.rb#12
    def config; end

    # Sets the attribute config
    #
    # @param value the value to set the attribute config to.
    #
    # source://claide-plugins//lib/claide/command/plugins.rb#12
    def config=(_arg0); end
  end
end

# source://claide-plugins//lib/claide/command/plugins_config.rb#5
class CLAide::Plugins::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#18
  def initialize(name = T.unsafe(nil), plugin_prefix = T.unsafe(nil), plugin_list_url = T.unsafe(nil), plugin_template_url = T.unsafe(nil)); end

  # name of the plugin
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#7
  def name; end

  # name of the plugin
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#7
  def name=(_arg0); end

  # url for JSON file that holds list of plugins to show when searching
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#13
  def plugin_list_url; end

  # url for JSON file that holds list of plugins to show when searching
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#13
  def plugin_list_url=(_arg0); end

  # prefix to use when searching for gems to load at runtime
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#10
  def plugin_prefix; end

  # prefix to use when searching for gems to load at runtime
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#10
  def plugin_prefix=(_arg0); end

  # url for repo that holds template to use when creating a new plugin
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#16
  def plugin_template_url; end

  # url for repo that holds template to use when creating a new plugin
  #
  # source://claide-plugins//lib/claide/command/plugins_config.rb#16
  def plugin_template_url=(_arg0); end
end

# source://claide-plugins//lib/claide/command/template_runner.rb#5
class CLAide::TemplateRunner
  extend ::CLAide::Executable

  # @return [TemplateRunner] a new instance of TemplateRunner
  #
  # source://claide-plugins//lib/claide/command/template_runner.rb#9
  def initialize(name, template_url); end

  # Clones the template from the remote in the working directory using
  # the name of the plugin.
  #
  # @return [void]
  #
  # source://claide-plugins//lib/claide/command/template_runner.rb#19
  def clone_template; end

  # Runs the template configuration utilities.
  #
  # @return [void]
  #
  # source://claide-plugins//lib/claide/command/template_runner.rb#31
  def configure_template; end

  # source://claide-plugins//lib/claide/executable.rb#22
  def git(*command); end

  # source://claide-plugins//lib/claide/executable.rb#26
  def git!(*command); end

  # Checks if a template URL is given else returns the Plugins.config URL
  #
  # @return String
  #
  # source://claide-plugins//lib/claide/command/template_runner.rb#47
  def template_repo_url; end
end

# source://claide-plugins//lib/claide/command/plugins.rb#7
UI = T.let(T.unsafe(nil), Cork::Board)
