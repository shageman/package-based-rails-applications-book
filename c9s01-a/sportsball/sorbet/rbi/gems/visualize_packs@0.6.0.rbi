# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `visualize_packs` gem.
# Please instead update this file by running `bin/tapioca gem visualize_packs`.


# source://visualize_packs//lib/visualize_packs/options.rb#4
class EdgeTodoTypes < ::T::Enum
  enums do
    Dependency = new
    Folder_Visibility = new
    Layer = new
    Privacy = new
    Visibility = new
  end
end

# source://visualize_packs//lib/visualize_packs/options.rb#14
class FocusPackEdgeDirection < ::T::Enum
  enums do
    All = new
    In = new
    InOut = new
    None = new
    Out = new
  end
end

# source://visualize_packs//lib/visualize_packs/options.rb#24
class Options < ::T::Struct
  prop :show_legend, T::Boolean, default: T.unsafe(nil)
  prop :show_dependencies, T::Boolean, default: T.unsafe(nil)
  prop :show_privacy, T::Boolean, default: T.unsafe(nil)
  prop :show_layers, T::Boolean, default: T.unsafe(nil)
  prop :show_visibility, T::Boolean, default: T.unsafe(nil)
  prop :show_relationship_todos, T::Boolean, default: T.unsafe(nil)
  prop :relationship_todo_types, T::Array[::EdgeTodoTypes], default: T.unsafe(nil)
  prop :use_relationship_todos_for_layout, T::Boolean, default: T.unsafe(nil)
  prop :show_teams, T::Boolean, default: T.unsafe(nil)
  prop :show_node_todos, T::Boolean, default: T.unsafe(nil)
  prop :focus_pack, T.nilable(T::Array[::String]), default: T.unsafe(nil)
  prop :show_only_edges_to_focus_pack, ::FocusPackEdgeDirection, default: T.unsafe(nil)
  prop :exclude_packs, T::Array[::String], default: T.unsafe(nil)
  prop :roll_nested_into_parent_packs, T::Boolean, default: T.unsafe(nil)
  prop :show_nested_relationships, T::Boolean, default: T.unsafe(nil)
  prop :remote_base_url, T.nilable(::String)
  prop :title, T.nilable(::String), default: T.unsafe(nil)

  class << self
    # source://sorbet-runtime/0.5.11835/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://visualize_packs//lib/visualize_packs/options_parser.rb#6
class OptionsParser
  class << self
    # source://visualize_packs//lib/visualize_packs/options_parser.rb#10
    sig { params(args: T::Array[::String]).returns(::Options) }
    def parse(args); end
  end
end

# source://visualize_packs//lib/visualize_packs.rb#12
module VisualizePacks
  class << self
    # source://visualize_packs//lib/visualize_packs.rb#268
    sig { params(all_package_names: T::Array[::String]).returns(T::Hash[::String, ::String]) }
    def all_nested_packages(all_package_names); end

    # source://visualize_packs//lib/visualize_packs.rb#70
    sig { params(package: ::ParsePackwerk::Package).returns(T.nilable(::String)) }
    def code_owner(package); end

    # source://visualize_packs//lib/visualize_packs.rb#347
    sig do
      params(
        all_packages: T::Array[::ParsePackwerk::Package],
        focus_packs_names: T::Array[::String]
      ).returns(T::Array[::String])
    end
    def dependencies_of(all_packages, focus_packs_names); end

    # source://visualize_packs//lib/visualize_packs.rb#357
    sig do
      params(
        all_packages: T::Array[::ParsePackwerk::Package],
        focus_packs_names: T::Array[::String]
      ).returns(T::Array[::String])
    end
    def dependents_on(all_packages, focus_packs_names); end

    # source://visualize_packs//lib/visualize_packs.rb#75
    sig do
      params(
        args: T::Array[::String],
        options: ::Options,
        max_todo_count: T.nilable(::Integer)
      ).returns(::String)
    end
    def diagram_title(args, options, max_todo_count); end

    # source://visualize_packs//lib/visualize_packs.rb#215
    sig do
      params(
        packages: T::Array[::ParsePackwerk::Package],
        options: ::Options
      ).returns(T::Array[::ParsePackwerk::Package])
    end
    def filtered(packages, options); end

    # source://visualize_packs//lib/visualize_packs.rb#125
    sig { params(list: T.nilable(T::Array[::String])).returns(T.nilable(::String)) }
    def limited_sentence(list); end

    # source://visualize_packs//lib/visualize_packs.rb#342
    sig { params(pack: ::String, packs_name_with_wildcards: T.nilable(T::Array[::String])).returns(T::Boolean) }
    def match_packs?(pack, packs_name_with_wildcards); end

    # source://visualize_packs//lib/visualize_packs.rb#171
    sig do
      params(
        all_packages: T::Array[::ParsePackwerk::Package],
        show_edge: T.proc.params(arg0: ::String, arg1: ::String).returns(T::Boolean),
        options: ::Options
      ).returns(T.nilable(::Integer))
    end
    def max_todo_count(all_packages, show_edge, options); end

    # source://visualize_packs//lib/visualize_packs.rb#158
    sig { returns(T.nilable(T.proc.params(arg0: ::String).returns(::String))) }
    def node_color_builder; end

    # @raise [ArgumentError]
    #
    # source://visualize_packs//lib/visualize_packs.rb#382
    sig do
      params(
        protection: ::String,
        package_name: ::String,
        rubocop_config: T.nilable(T.any(T::Boolean, T::Hash[::String, T.untyped])),
        rubocop_todo: T.nilable(T.any(T::Boolean, T::Hash[::String, T.untyped]))
      ).returns(T.nilable(::Integer))
    end
    def package_based_todos_for(protection, package_name, rubocop_config, rubocop_todo); end

    # source://visualize_packs//lib/visualize_packs.rb#396
    sig { returns(T.untyped) }
    def package_based_todos_text_maker; end

    # source://visualize_packs//lib/visualize_packs.rb#29
    sig do
      params(
        args: T::Array[::String],
        raw_config: T::Hash[::String, T.untyped],
        packages: T::Array[::ParsePackwerk::Package]
      ).returns(::String)
    end
    def package_graph!(args, raw_config, packages); end

    # source://visualize_packs//lib/visualize_packs.rb#282
    sig do
      params(
        packages: T::Array[::ParsePackwerk::Package],
        options: ::Options
      ).returns(T::Array[::ParsePackwerk::Package])
    end
    def remove_nested_packs(packages, options); end

    # source://visualize_packs//lib/visualize_packs.rb#136
    sig do
      params(
        options: ::Options,
        all_package_names: T::Array[::String]
      ).returns(T.proc.params(arg0: ::String, arg1: ::String).returns(T::Boolean))
    end
    def show_edge_builder(options, all_package_names); end

    # source://visualize_packs//lib/visualize_packs.rb#193
    sig { params(todo_count: ::Integer, max_count: ::Integer).returns(T.any(::Float, ::Integer)) }
    def todo_edge_width(todo_count, max_count); end

    # source://visualize_packs//lib/visualize_packs.rb#362
    sig do
      params(
        all_packages: T::Array[::ParsePackwerk::Package],
        focus_packs_names: T::Array[::String],
        options: ::Options
      ).returns(T::Array[::String])
    end
    def todos_in(all_packages, focus_packs_names, options); end

    # source://visualize_packs//lib/visualize_packs.rb#372
    sig do
      params(
        all_packages: T::Array[::ParsePackwerk::Package],
        focus_packs_names: T::Array[::String],
        options: ::Options
      ).returns(T::Array[::String])
    end
    def todos_out(all_packages, focus_packs_names, options); end
  end
end

# source://visualize_packs//lib/visualize_packs.rb#15
class VisualizePacks::ArrowHead < ::T::Enum
  enums do
    ConfiguredDependency = new
    ConfiguredNested = new
    ConfiguredVisibleTo = new
    DependencyTodo = new
    FolderVisibilityTodo = new
    LayerTodo = new
    PrivacyTodo = new
    VisibilityTodo = new
  end
end
