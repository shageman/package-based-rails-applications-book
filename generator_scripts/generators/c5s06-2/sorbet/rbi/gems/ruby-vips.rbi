# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/ruby-vips/all/ruby-vips.rbi
#
# ruby-vips-2.1.2

module GObject
  def g_object_get_property(*arg0); end
  def g_object_ref(*arg0); end
  def g_object_set_property(*arg0); end
  def g_object_unref(*arg0); end
  def g_param_spec_get_blurb(*arg0); end
  def g_signal_connect_data(*arg0); end
  def g_type_from_name(*arg0); end
  def g_type_fundamental(*arg0); end
  def g_type_init(*arg0); end
  def g_type_name(*arg0); end
  def g_value_get_boolean(*arg0); end
  def g_value_get_double(*arg0); end
  def g_value_get_enum(*arg0); end
  def g_value_get_flags(*arg0); end
  def g_value_get_int(*arg0); end
  def g_value_get_object(*arg0); end
  def g_value_get_string(*arg0); end
  def g_value_get_uint64(*arg0); end
  def g_value_init(*arg0); end
  def g_value_set_boolean(*arg0); end
  def g_value_set_double(*arg0); end
  def g_value_set_enum(*arg0); end
  def g_value_set_flags(*arg0); end
  def g_value_set_int(*arg0); end
  def g_value_set_object(*arg0); end
  def g_value_set_string(*arg0); end
  def g_value_set_uint64(*arg0); end
  def g_value_unset(*arg0); end
  def self.g_object_get_property(*arg0); end
  def self.g_object_ref(*arg0); end
  def self.g_object_set_property(*arg0); end
  def self.g_object_unref(*arg0); end
  def self.g_param_spec_get_blurb(*arg0); end
  def self.g_signal_connect_data(*arg0); end
  def self.g_type_from_name(*arg0); end
  def self.g_type_fundamental(*arg0); end
  def self.g_type_init(*arg0); end
  def self.g_type_name(*arg0); end
  def self.g_value_get_boolean(*arg0); end
  def self.g_value_get_double(*arg0); end
  def self.g_value_get_enum(*arg0); end
  def self.g_value_get_flags(*arg0); end
  def self.g_value_get_int(*arg0); end
  def self.g_value_get_object(*arg0); end
  def self.g_value_get_string(*arg0); end
  def self.g_value_get_uint64(*arg0); end
  def self.g_value_init(*arg0); end
  def self.g_value_set_boolean(*arg0); end
  def self.g_value_set_double(*arg0); end
  def self.g_value_set_enum(*arg0); end
  def self.g_value_set_flags(*arg0); end
  def self.g_value_set_int(*arg0); end
  def self.g_value_set_object(*arg0); end
  def self.g_value_set_string(*arg0); end
  def self.g_value_set_uint64(*arg0); end
  def self.g_value_unset(*arg0); end
  extend FFI::Library
end
class GObject::GObject
  def [](*args, &block); end
  def ffi_managed_struct; end
  def ffi_struct; end
  def initialize(ptr); end
  def ptr; end
  def references; end
  def self.ffi_managed_struct; end
  def self.ffi_struct; end
  def self.ptr(*args, &block); end
  def to_ptr(*args, &block); end
  extend Forwardable
  extend SingleForwardable
end
module GObject::GObject::GObjectLayout
  def self.included(base); end
end
class GObject::GObject::ManagedStruct < FFI::ManagedStruct
  def self.release(ptr); end
  include GObject::GObject::GObjectLayout
end
class GObject::GObject::Struct < FFI::Struct
  include GObject::GObject::GObjectLayout
end
class GObject::GParamSpec < FFI::Struct
end
class GObject::GParamSpecPtr < FFI::Struct
end
class GObject::GValue < FFI::ManagedStruct
  def get; end
  def init(gtype); end
  def self.alloc; end
  def self.from_nick(gtype, value); end
  def self.release(ptr); end
  def self.to_nick(gtype, enum_value); end
  def set(value); end
  def unset; end
end
module Vips
  def nickname_find(*arg0); end
  def self.at_least_libvips?(x, y); end
  def self.cache_set_max(size); end
  def self.cache_set_max_files(size); end
  def self.cache_set_max_mem(size); end
  def self.concurrency_set(n); end
  def self.get_suffixes; end
  def self.leak_set(leak); end
  def self.nickname_find(*arg0); end
  def self.p2str(pointer); end
  def self.set_debug(debug); end
  def self.type_find(*arg0); end
  def self.vector_set(enabled); end
  def self.version(*arg0); end
  def self.version_string(*arg0); end
  def self.vips_addalpha(*args); end
  def self.vips_argument_map(*arg0); end
  def self.vips_band_format_get_type(*arg0); end
  def self.vips_band_format_iscomplex(*arg0); end
  def self.vips_band_format_isfloat(*arg0); end
  def self.vips_blend_mode_get_type(*arg0); end
  def self.vips_cache_operation_build(*arg0); end
  def self.vips_cache_set_max(*arg0); end
  def self.vips_cache_set_max_files(*arg0); end
  def self.vips_cache_set_max_mem(*arg0); end
  def self.vips_coding_get_type(*arg0); end
  def self.vips_concurrency_set(*arg0); end
  def self.vips_connection_filename(*arg0); end
  def self.vips_connection_nick(*arg0); end
  def self.vips_enum_from_nick(*arg0); end
  def self.vips_enum_nick(*arg0); end
  def self.vips_error_buffer(*arg0); end
  def self.vips_error_clear(*arg0); end
  def self.vips_filename_get_filename(*arg0); end
  def self.vips_filename_get_options(*arg0); end
  def self.vips_foreign_find_load(*arg0); end
  def self.vips_foreign_find_load_buffer(*arg0); end
  def self.vips_foreign_find_load_source(*arg0); end
  def self.vips_foreign_find_save(*arg0); end
  def self.vips_foreign_find_save_buffer(*arg0); end
  def self.vips_foreign_find_save_target(*arg0); end
  def self.vips_foreign_get_suffixes(*arg0); end
  def self.vips_image_copy_memory(*arg0); end
  def self.vips_image_get(*arg0); end
  def self.vips_image_get_bands(*arg0); end
  def self.vips_image_get_fields(*arg0); end
  def self.vips_image_get_height(*arg0); end
  def self.vips_image_get_typeof(*arg0); end
  def self.vips_image_get_width(*arg0); end
  def self.vips_image_hasalpha(*arg0); end
  def self.vips_image_new_from_memory(*arg0); end
  def self.vips_image_new_from_memory_copy(*arg0); end
  def self.vips_image_new_matrix_from_array(*arg0); end
  def self.vips_image_remove(*arg0); end
  def self.vips_image_set(*arg0); end
  def self.vips_image_set_kill(*arg0); end
  def self.vips_image_set_progress(*arg0); end
  def self.vips_image_write_to_memory(*arg0); end
  def self.vips_init(*arg0); end
  def self.vips_interpolate_new(*arg0); end
  def self.vips_interpretation_get_type(*arg0); end
  def self.vips_leak_set(*arg0); end
  def self.vips_object_get_argument(*arg0); end
  def self.vips_object_get_description(*arg0); end
  def self.vips_object_print_all(*arg0); end
  def self.vips_object_set_from_string(*arg0); end
  def self.vips_object_unref_outputs(*arg0); end
  def self.vips_operation_get_flags(*arg0); end
  def self.vips_operation_new(*arg0); end
  def self.vips_region_fetch(*arg0); end
  def self.vips_region_height(*arg0); end
  def self.vips_region_new(*arg0); end
  def self.vips_region_width(*arg0); end
  def self.vips_source_custom_new(*arg0); end
  def self.vips_source_new_from_descriptor(*arg0); end
  def self.vips_source_new_from_file(*arg0); end
  def self.vips_source_new_from_memory(*arg0); end
  def self.vips_target_custom_new(*arg0); end
  def self.vips_target_new_to_descriptor(*arg0); end
  def self.vips_target_new_to_file(*arg0); end
  def self.vips_target_new_to_memory(*arg0); end
  def self.vips_type_map(*arg0); end
  def self.vips_value_get_array_double(*arg0); end
  def self.vips_value_get_array_image(*arg0); end
  def self.vips_value_get_array_int(*arg0); end
  def self.vips_value_get_blob(*arg0); end
  def self.vips_value_get_ref_string(*arg0); end
  def self.vips_value_set_array_double(*arg0); end
  def self.vips_value_set_array_image(*arg0); end
  def self.vips_value_set_array_int(*arg0); end
  def self.vips_value_set_blob(*arg0); end
  def self.vips_value_set_ref_string(*arg0); end
  def self.vips_vector_set_enabled(*arg0); end
  def type_find(*arg0); end
  def version(*arg0); end
  def version_string(*arg0); end
  def vips_addalpha(*args); end
  def vips_argument_map(*arg0); end
  def vips_band_format_get_type(*arg0); end
  def vips_band_format_iscomplex(*arg0); end
  def vips_band_format_isfloat(*arg0); end
  def vips_blend_mode_get_type(*arg0); end
  def vips_cache_operation_build(*arg0); end
  def vips_cache_set_max(*arg0); end
  def vips_cache_set_max_files(*arg0); end
  def vips_cache_set_max_mem(*arg0); end
  def vips_coding_get_type(*arg0); end
  def vips_concurrency_set(*arg0); end
  def vips_connection_filename(*arg0); end
  def vips_connection_nick(*arg0); end
  def vips_enum_from_nick(*arg0); end
  def vips_enum_nick(*arg0); end
  def vips_error_buffer(*arg0); end
  def vips_error_clear(*arg0); end
  def vips_filename_get_filename(*arg0); end
  def vips_filename_get_options(*arg0); end
  def vips_foreign_find_load(*arg0); end
  def vips_foreign_find_load_buffer(*arg0); end
  def vips_foreign_find_load_source(*arg0); end
  def vips_foreign_find_save(*arg0); end
  def vips_foreign_find_save_buffer(*arg0); end
  def vips_foreign_find_save_target(*arg0); end
  def vips_foreign_get_suffixes(*arg0); end
  def vips_image_copy_memory(*arg0); end
  def vips_image_get(*arg0); end
  def vips_image_get_bands(*arg0); end
  def vips_image_get_fields(*arg0); end
  def vips_image_get_height(*arg0); end
  def vips_image_get_typeof(*arg0); end
  def vips_image_get_width(*arg0); end
  def vips_image_hasalpha(*arg0); end
  def vips_image_new_from_memory(*arg0); end
  def vips_image_new_from_memory_copy(*arg0); end
  def vips_image_new_matrix_from_array(*arg0); end
  def vips_image_remove(*arg0); end
  def vips_image_set(*arg0); end
  def vips_image_set_kill(*arg0); end
  def vips_image_set_progress(*arg0); end
  def vips_image_write_to_memory(*arg0); end
  def vips_init(*arg0); end
  def vips_interpolate_new(*arg0); end
  def vips_interpretation_get_type(*arg0); end
  def vips_leak_set(*arg0); end
  def vips_object_get_argument(*arg0); end
  def vips_object_get_description(*arg0); end
  def vips_object_print_all(*arg0); end
  def vips_object_set_from_string(*arg0); end
  def vips_object_unref_outputs(*arg0); end
  def vips_operation_get_flags(*arg0); end
  def vips_operation_new(*arg0); end
  def vips_region_fetch(*arg0); end
  def vips_region_height(*arg0); end
  def vips_region_new(*arg0); end
  def vips_region_width(*arg0); end
  def vips_source_custom_new(*arg0); end
  def vips_source_new_from_descriptor(*arg0); end
  def vips_source_new_from_file(*arg0); end
  def vips_source_new_from_memory(*arg0); end
  def vips_target_custom_new(*arg0); end
  def vips_target_new_to_descriptor(*arg0); end
  def vips_target_new_to_file(*arg0); end
  def vips_target_new_to_memory(*arg0); end
  def vips_type_map(*arg0); end
  def vips_value_get_array_double(*arg0); end
  def vips_value_get_array_image(*arg0); end
  def vips_value_get_array_int(*arg0); end
  def vips_value_get_blob(*arg0); end
  def vips_value_get_ref_string(*arg0); end
  def vips_value_set_array_double(*arg0); end
  def vips_value_set_array_image(*arg0); end
  def vips_value_set_array_int(*arg0); end
  def vips_value_set_blob(*arg0); end
  def vips_value_set_ref_string(*arg0); end
  def vips_vector_set_enabled(*arg0); end
  extend FFI::Library
end
class Vips::Progress < FFI::Struct
end
class Vips::SizeStruct < FFI::Struct
end
class Vips::IntStruct < FFI::Struct
end
class Vips::Object < GObject::GObject
  def get(name); end
  def get_pspec(name); end
  def get_typeof(name); end
  def get_typeof_error(name); end
  def self.print_all; end
  def set(name, value); end
  def signal_connect(name, handler = nil, &block); end
end
module Vips::Object::ObjectLayout
  def self.included(base); end
end
class Vips::Object::Struct < GObject::GObject::Struct
  include Vips::Object::ObjectLayout
end
class Vips::Object::ManagedStruct < GObject::GObject::ManagedStruct
  include Vips::Object::ObjectLayout
end
class Vips::ObjectClass < FFI::Struct
end
class Vips::Argument < FFI::Struct
end
class Vips::ArgumentInstance < Vips::Argument
end
class Vips::ArgumentClass < Vips::Argument
end
class Vips::ArgumentClassPtr < FFI::Struct
end
class Vips::ArgumentInstancePtr < FFI::Struct
end
class Vips::Introspect
  def add_yard_introspection(name); end
  def args; end
  def description; end
  def destructive; end
  def flags; end
  def initialize(name); end
  def member_x; end
  def method_args; end
  def name; end
  def optional_input; end
  def optional_output; end
  def required_input; end
  def required_output; end
  def self.get(name); end
  def self.get_yard(name); end
  def vips_name; end
end
class Vips::Operation < Vips::Object
  def argument_map(&block); end
  def build; end
  def initialize(value); end
  def self.call(name, supplied, optional = nil, option_string = nil); end
  def self.flat_find(object, &block); end
  def self.imageize(match_image, value); end
  def set(name, value, match_image, flags, gtype, destructive); end
end
module Vips::Operation::OperationLayout
  def self.included(base); end
end
class Vips::Operation::Struct < Vips::Object::Struct
  include Vips::Operation::OperationLayout
end
class Vips::Operation::ManagedStruct < Vips::Object::ManagedStruct
  include Vips::Operation::OperationLayout
end
class Vips::Image < Vips::Object
  def !; end
  def !=(other); end
  def %(other); end
  def &(other); end
  def *(other); end
  def **(other); end
  def +(other); end
  def +@; end
  def -(other); end
  def -@; end
  def /(other); end
  def <(other); end
  def <<(other); end
  def <=(other); end
  def ==(other); end
  def >(other); end
  def >=(other); end
  def >>(other); end
  def [](index); end
  def ^(other); end
  def acos; end
  def add_alpha; end
  def asin; end
  def atan; end
  def bandand; end
  def bandeor; end
  def bandjoin(other); end
  def bandor; end
  def bands; end
  def bandsplit; end
  def call_enum(name, other, enum); end
  def ceil; end
  def coding; end
  def composite(overlay, mode, **opts); end
  def conj; end
  def copy_memory; end
  def cos; end
  def cross_phase(other); end
  def dilate(mask); end
  def draw_point(ink, left, top, **opts); end
  def erode(mask); end
  def exp10; end
  def exp; end
  def filename; end
  def fliphor; end
  def flipver; end
  def floor; end
  def format; end
  def get(name); end
  def get_fields; end
  def get_typeof(name); end
  def get_value(name); end
  def has_alpha?; end
  def height; end
  def ifthenelse(th, el, **opts); end
  def imag; end
  def inspect; end
  def interpretation; end
  def log10; end
  def log; end
  def maxpos; end
  def median(size = nil); end
  def method_missing(name, *args, **options); end
  def minpos; end
  def mutate; end
  def new_from_image(value); end
  def offset; end
  def parent_get_typeof(name); end
  def polar; end
  def real; end
  def rect; end
  def remove(name); end
  def respond_to?(name, include_all = nil); end
  def respond_to_missing?(name, include_all = nil); end
  def rint; end
  def rot180; end
  def rot270; end
  def rot90; end
  def scale; end
  def scaleimage(**opts); end
  def self.complex?(format); end
  def self.float?(format); end
  def self.matrix_from_array(width, height, array); end
  def self.method_missing(name, *args, **options); end
  def self.new_from_array(array, scale = nil, offset = nil); end
  def self.new_from_buffer(data, option_string, **opts); end
  def self.new_from_file(name, **opts); end
  def self.new_from_memory(data, width, height, bands, format); end
  def self.new_from_memory_copy(data, width, height, bands, format); end
  def self.new_from_source(source, option_string, **opts); end
  def self.respond_to_missing?(name, include_all = nil); end
  def self.run_cmplx(image, &block); end
  def self.smap(x, &block); end
  def set(name, value); end
  def set_kill(kill); end
  def set_progress(state); end
  def set_type(gtype, name, value); end
  def set_value(name, value); end
  def sin; end
  def size; end
  def tan; end
  def to_a; end
  def to_enum; end
  def width; end
  def write_gc; end
  def write_to_buffer(format_string, **opts); end
  def write_to_file(name, **opts); end
  def write_to_memory; end
  def write_to_target(target, format_string, **opts); end
  def xoffset; end
  def xres; end
  def yoffset; end
  def yres; end
  def |(other); end
  def ~; end
end
module Vips::Image::ImageLayout
  def self.included(base); end
end
class Vips::Image::Struct < Vips::Object::Struct
  include Vips::Image::ImageLayout
end
class Vips::Image::ManagedStruct < Vips::Object::ManagedStruct
  include Vips::Image::ImageLayout
end
class Vips::Image::GenericPtr < FFI::Struct
end
module Vips::Yard
  def self.generate; end
  def self.generate_operation(introspect); end
  def self.gtype_to_ruby(gtype); end
end
class Vips::MutableImage < Vips::Object
  def bands(*args, &block); end
  def filename(*args, &block); end
  def format(*args, &block); end
  def get(*args, &block); end
  def get_fields(*args, &block); end
  def get_typeof(*args, &block); end
  def height(*args, &block); end
  def image; end
  def initialize(image); end
  def inspect; end
  def interpretation(*args, &block); end
  def method_missing(name, *args, **options); end
  def parent_get_typeof(name); end
  def remove!(name); end
  def respond_to?(name, include_all = nil); end
  def respond_to_missing?(name, include_all = nil); end
  def set!(name, value); end
  def set_type!(gtype, name, value); end
  def size(*args, &block); end
  def width(*args, &block); end
  def xoffset(*args, &block); end
  def xres(*args, &block); end
  def yoffset(*args, &block); end
  def yres(*args, &block); end
  extend Forwardable
end
module Vips::MutableImage::MutableImageLayout
  def self.included(base); end
end
class Vips::MutableImage::Struct < Vips::Object::Struct
  include Vips::MutableImage::MutableImageLayout
end
class Vips::MutableImage::ManagedStruct < Vips::Object::ManagedStruct
  include Vips::MutableImage::MutableImageLayout
end
class Vips::Interpolate < Vips::Object
  def initialize(name); end
end
module Vips::Interpolate::InterpolateLayout
  def self.included(base); end
end
class Vips::Interpolate::Struct < Vips::Object::Struct
  include Vips::Interpolate::InterpolateLayout
end
class Vips::Interpolate::ManagedStruct < Vips::Object::ManagedStruct
  include Vips::Interpolate::InterpolateLayout
end
class Vips::Region < Vips::Object
  def fetch(left, top, width, height); end
  def height; end
  def initialize(name); end
  def width; end
end
module Vips::Region::RegionLayout
  def self.included(base); end
end
class Vips::Region::Struct < Vips::Object::Struct
  include Vips::Region::RegionLayout
end
class Vips::Region::ManagedStruct < Vips::Object::ManagedStruct
  include Vips::Region::RegionLayout
end
class Vips::Connection < Vips::Object
  def filename; end
  def nick; end
end
module Vips::Connection::ConnectionLayout
  def self.included(base); end
end
class Vips::Connection::Struct < Vips::Object::Struct
  include Vips::Connection::ConnectionLayout
end
class Vips::Connection::ManagedStruct < Vips::Object::ManagedStruct
  include Vips::Connection::ConnectionLayout
end
class Vips::Source < Vips::Connection
  def self.new_from_descriptor(descriptor); end
  def self.new_from_file(filename); end
  def self.new_from_memory(data); end
end
module Vips::Source::SourceLayout
  def self.included(base); end
end
class Vips::Source::Struct < Vips::Connection::Struct
  include Vips::Source::SourceLayout
end
class Vips::Source::ManagedStruct < Vips::Connection::ManagedStruct
  include Vips::Source::SourceLayout
end
class Vips::SourceCustom < Vips::Source
  def initialize; end
  def on_read(&block); end
  def on_seek(&block); end
end
module Vips::SourceCustom::SourceCustomLayout
  def self.included(base); end
end
class Vips::SourceCustom::Struct < Vips::Source::Struct
  include Vips::SourceCustom::SourceCustomLayout
end
class Vips::SourceCustom::ManagedStruct < Vips::Source::ManagedStruct
  include Vips::SourceCustom::SourceCustomLayout
end
class Vips::Target < Vips::Connection
  def self.new_to_descriptor(descriptor); end
  def self.new_to_file(filename); end
  def self.new_to_memory; end
end
module Vips::Target::TargetLayout
  def self.included(base); end
end
class Vips::Target::Struct < Vips::Connection::Struct
  include Vips::Target::TargetLayout
end
class Vips::Target::ManagedStruct < Vips::Connection::ManagedStruct
  include Vips::Target::TargetLayout
end
class Vips::TargetCustom < Vips::Target
  def initialize; end
  def on_finish(&block); end
  def on_write(&block); end
end
module Vips::TargetCustom::TargetCustomLayout
  def self.included(base); end
end
class Vips::TargetCustom::Struct < Vips::Target::Struct
  include Vips::TargetCustom::TargetCustomLayout
end
class Vips::TargetCustom::ManagedStruct < Vips::Target::ManagedStruct
  include Vips::TargetCustom::TargetCustomLayout
end
class Object < BasicObject
  def library_name(name, abi_number); end
end
module GLib
  def g_free(*arg0); end
  def g_log_remove_handler(*arg0); end
  def g_log_set_handler(*arg0); end
  def g_malloc(*arg0); end
  def self.g_free(*arg0); end
  def self.g_log_remove_handler(*arg0); end
  def self.g_log_set_handler(*arg0); end
  def self.g_malloc(*arg0); end
  def self.logger; end
  def self.logger=(arg0); end
  def self.remove_log_handler; end
  def self.set_log_domain(domain); end
  extend FFI::Library
end
class Vips::Error < RuntimeError
  def initialize(msg = nil); end
  def to_s; end
end
