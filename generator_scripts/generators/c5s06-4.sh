#!/bin/bash

set -v
set -x
set -e

rm config/initializers/configure_prediction_ui.rb

echo '# typed: false
class PredictionsController < ApplicationController
  def new
    @teams = Team.all
  end

  def create
    predictor = ServiceLocator.instance.get_service(:predictor)

    predictor.learn(Team.all, Game.all)
    @prediction = predictor.predict(
        Team.find(params["first_team"]["id"]),
        Team.find(params["second_team"]["id"]))
  end
end
' > packages/prediction_ui/app/controllers/predictions_controller.rb

echo '
enforce_dependencies: true
enforce_privacy: false
dependencies:
- packages/games
- packages/rails_shims
- packages/teams
- packages/service_locator
' > packages/prediction_ui/package.yml

echo 'ServiceLocator.instance.register_service(:predictor, Predictor.new)' >> config/initializers/register_services.rb

echo 'enforce_dependencies: true
enforce_privacy: false
dependencies:
- packages/service_locator
' > packages/predictor/package.yml

mv packages/predictor_interface packages/service_locator
mkdir -p packages/service_locator/app/services
mkdir -p packages/service_locator/spec
echo '# typed: true

class ServiceLocator
  include Singleton

  def register_service(name, service)
    @services ||= {}
    @services[name] = service
    puts "Registered service as #{name}"
  end

  def get_service(name)
    @services ||= {}

    raise ServiceNotFoundError, "Service #{name} was never registered" unless @services[name]

    @services[name]
  end
end
' > packages/service_locator/app/public/service_locator.rb

echo '# typed: false
RSpec.describe ServiceLocator do
  subject { described_class.instance }

  describe "when it can be found" do
    it "getting a service raises an error" do
      expect { subject.get_service(:some_service) }.to raise_error(ServiceNotFoundError)
    end
  end

  describe "getting a given service" do
    it "returns that service instance" do
      subject.register_service(:some_set_service, :a)
      expect(subject.get_service(:some_set_service)).to eq(:a)
    end
  end
end
' > packages/service_locator/spec/service_locator_spec.rb

echo 'class ServiceNotFoundError < RuntimeError
end
' > packages/service_locator/app/services/service_not_found_error.rb

echo '
enforce_dependencies: true
enforce_privacy: false
dependencies:
- packages/rails_shims
- packages/teams
' > packages/games/package.yml

echo '
enforce_dependencies: true
enforce_privacy: false
dependencies:
- packages/service_locator
- packages/rails_shims
' > packages/teams/package.yml

echo '# See: Setting up the configuration file
# https://github.com/Shopify/packwerk/blob/main/USAGE.md#setting-up-the-configuration-file

# List of patterns for folder paths to include
# include:
# - "**/*.{rb,rake,erb}"

# List of patterns for folder paths to exclude
exclude:
- "{bin,node_modules,script,tmp,vendor}/**/*"
- "vendor/bundle/**/*"
- "**/lib/tasks/**/*.rake"

# Patterns to find package configuration files
# package_paths: "**/"

# List of application load paths
# These load paths were auto generated by Packwerk.
load_paths:
- packages/games_admin/app/controllers
- packages/games_admin/app/views
- packages/games/app/models
- packages/prediction_ui/app/controllers
- packages/prediction_ui/app/helpers
- packages/prediction_ui/app/services
- packages/prediction_ui/app/views
- packages/predictor/app/models
- packages/rails_shims/app/channels
- packages/rails_shims/app/controllers
- packages/rails_shims/app/controllers/concerns
- packages/rails_shims/app/helpers
- packages/rails_shims/app/jobs
- packages/rails_shims/app/mailers
- packages/rails_shims/app/models
- packages/rails_shims/app/models/concerns
- packages/service_locator/app/public
- packages/service_locator/app/services
- packages/teams_admin/app/controllers
- packages/teams_admin/app/views
- packages/teams/app/models
- packages/welcome_ui/app/controllers
- packages/welcome_ui/app/views

# List of custom associations, if any
# custom_associations:
# - "cache_belongs_to"

# Location of inflections file
# inflections_file: "config/inflections.yml"
' > packwerk.yml

