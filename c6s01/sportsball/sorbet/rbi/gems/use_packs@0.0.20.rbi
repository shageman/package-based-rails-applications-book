# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `use_packs` gem.
# Please instead update this file by running `bin/tapioca gem use_packs`.

# source://use_packs//lib/use_packs/private/file_move_operation.rb#3
module UsePacks
  class << self
    # source://use_packs//lib/use_packs.rb#121
    sig { params(pack_name: ::String, dependency_name: ::String).void }
    def add_dependency!(pack_name:, dependency_name:); end

    # source://use_packs//lib/use_packs.rb#219
    sig { void }
    def bust_cache!; end

    # source://use_packs//lib/use_packs/configuration.rb#50
    sig { returns(::UsePacks::Configuration) }
    def config; end

    # @yield [config]
    #
    # source://use_packs//lib/use_packs/configuration.rb#57
    sig { params(blk: T.proc.params(arg0: ::UsePacks::Configuration).void).void }
    def configure(&blk); end

    # source://use_packs//lib/use_packs.rb#46
    sig do
      params(
        pack_name: ::String,
        enforce_privacy: T::Boolean,
        enforce_dependencies: T.nilable(T::Boolean),
        team: T.nilable(::CodeTeams::Team)
      ).void
    end
    def create_pack!(pack_name:, enforce_privacy: T.unsafe(nil), enforce_dependencies: T.unsafe(nil), team: T.unsafe(nil)); end

    # execute_command is like `run` except it does not `exit`
    #
    # source://use_packs//lib/use_packs.rb#227
    sig { params(argv: T.untyped, formatter: T.nilable(::Packwerk::OffensesFormatter)).void }
    def execute(argv, formatter = T.unsafe(nil)); end

    # source://use_packs//lib/use_packs.rb#234
    sig { params(files: T::Array[::String]).returns(T::Array[::Packwerk::ReferenceOffense]) }
    def get_offenses_for_files(files); end

    # source://use_packs//lib/use_packs.rb#241
    sig { params(files: T::Array[::String]).returns(T::Array[::Packwerk::ReferenceOffense]) }
    def get_offenses_for_files_by_package(files); end

    # source://use_packs//lib/use_packs.rb#250
    sig { void }
    def lint_package_todo_yml_files!; end

    # source://use_packs//lib/use_packs.rb#255
    sig { params(packs: T::Array[::Packs::Pack]).void }
    def lint_package_yml_files!(packs); end

    # source://use_packs//lib/use_packs.rb#193
    sig { params(pack_name: T.nilable(::String), limit: ::Integer).void }
    def list_top_dependency_violations(pack_name:, limit:); end

    # source://use_packs//lib/use_packs.rb#177
    sig { params(pack_name: T.nilable(::String), limit: ::Integer).void }
    def list_top_privacy_violations(pack_name:, limit:); end

    # source://use_packs//lib/use_packs.rb#95
    sig do
      params(
        paths_relative_to_root: T::Array[::String],
        per_file_processors: T::Array[::UsePacks::PerFileProcessorInterface]
      ).void
    end
    def make_public!(paths_relative_to_root: T.unsafe(nil), per_file_processors: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs.rb#67
    sig do
      params(
        pack_name: ::String,
        paths_relative_to_root: T::Array[::String],
        per_file_processors: T::Array[::UsePacks::PerFileProcessorInterface]
      ).void
    end
    def move_to_pack!(pack_name:, paths_relative_to_root: T.unsafe(nil), per_file_processors: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs.rb#148
    sig do
      params(
        pack_name: ::String,
        parent_name: ::String,
        per_file_processors: T::Array[::UsePacks::PerFileProcessorInterface]
      ).void
    end
    def move_to_parent!(pack_name:, parent_name:, per_file_processors: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs.rb#210
    sig { params(file: ::String, find: ::Pathname, replace_with: ::Pathname).void }
    def replace_in_file(file:, find:, replace_with:); end

    # source://use_packs//lib/use_packs.rb#34
    sig { void }
    def start_interactive_mode!; end
  end
end

# source://use_packs//lib/use_packs/cli.rb#6
class UsePacks::CLI < ::Thor
  # source://use_packs//lib/use_packs/cli.rb#25
  sig { params(from_pack: ::String, to_pack: ::String).void }
  def add_dependency(from_pack, to_pack); end

  # source://use_packs//lib/use_packs/cli.rb#116
  sig { params(paths: ::String).void }
  def check(*paths); end

  # source://use_packs//lib/use_packs/cli.rb#11
  sig { params(pack_name: ::String).void }
  def create(pack_name); end

  # source://use_packs//lib/use_packs/cli.rb#134
  sig { params(pack_names: ::String).void }
  def get_info(*pack_names); end

  # source://use_packs//lib/use_packs/cli.rb#98
  sig { void }
  def lint_package_todo_yml_files; end

  # source://use_packs//lib/use_packs/cli.rb#104
  sig { params(pack_names: ::String).void }
  def lint_package_yml_files(*pack_names); end

  # source://use_packs//lib/use_packs/cli.rb#42
  sig { params(pack_name: ::String).void }
  def list_top_dependency_violations(pack_name); end

  # source://use_packs//lib/use_packs/cli.rb#59
  sig { params(pack_name: ::String).void }
  def list_top_privacy_violations(pack_name); end

  # source://use_packs//lib/use_packs/cli.rb#73
  sig { params(paths: ::String).void }
  def make_public(*paths); end

  # source://use_packs//lib/use_packs/cli.rb#88
  sig { params(pack_name: ::String, paths: ::String).void }
  def move(pack_name, *paths); end

  # source://use_packs//lib/use_packs/cli.rb#152
  sig { params(child_pack_name: ::String, parent_pack_name: ::String).void }
  def move_to_parent(child_pack_name, parent_pack_name); end

  # source://use_packs//lib/use_packs/cli.rb#128
  sig { params(pack_names: ::String).void }
  def regenerate_rubocop_todo(*pack_names); end

  # source://use_packs//lib/use_packs/cli.rb#146
  sig { void }
  def rename; end

  # source://use_packs//lib/use_packs/cli.rb#122
  sig { void }
  def update; end

  # source://use_packs//lib/use_packs/cli.rb#110
  sig { void }
  def validate; end

  # source://use_packs//lib/use_packs/cli.rb#140
  sig { params(pack_names: ::String).void }
  def visualize(*pack_names); end

  private

  # source://use_packs//lib/use_packs/cli.rb#165
  sig { params(pack_names: T::Array[::String]).returns(T::Array[::Packs::Pack]) }
  def parse_pack_names(pack_names); end
end

# source://use_packs//lib/use_packs/code_ownership_post_processor.rb#4
class UsePacks::CodeOwnershipPostProcessor
  include ::UsePacks::PerFileProcessorInterface

  # source://use_packs//lib/use_packs/code_ownership_post_processor.rb#9
  sig { void }
  def initialize; end

  # source://use_packs//lib/use_packs/code_ownership_post_processor.rb#44
  sig { params(file_move_operations: T::Array[::UsePacks::Private::FileMoveOperation]).void }
  def after_move_files!(file_move_operations); end

  # source://use_packs//lib/use_packs/code_ownership_post_processor.rb#15
  sig { override.params(file_move_operation: ::UsePacks::Private::FileMoveOperation).void }
  def before_move_file!(file_move_operation); end
end

# source://use_packs//lib/use_packs/configuration.rb#7
class UsePacks::Configuration
  # source://use_packs//lib/use_packs/configuration.rb#24
  sig { void }
  def initialize; end

  # source://use_packs//lib/use_packs/configuration.rb#36
  sig { void }
  def bust_cache!; end

  # source://use_packs//lib/use_packs/configuration.rb#41
  sig { returns(T::Boolean) }
  def default_enforce_dependencies; end

  # source://use_packs//lib/use_packs/configuration.rb#31
  sig { returns(T::Boolean) }
  def enforce_dependencies; end

  # source://use_packs//lib/use_packs/configuration.rb#11
  sig { params(enforce_dependencies: T::Boolean).void }
  def enforce_dependencies=(enforce_dependencies); end

  # source://use_packs//lib/use_packs/configuration.rb#21
  sig { returns(T.proc.params(output: ::String).void) }
  def on_package_todo_lint_failure; end

  # @return [OnPackageTodoLintFailure]
  #
  # source://use_packs//lib/use_packs/configuration.rb#21
  def on_package_todo_lint_failure=(_arg0); end

  # source://use_packs//lib/use_packs/configuration.rb#14
  sig { returns(::UsePacks::UserEventLogger) }
  def user_event_logger; end

  # @return [UserEventLogger]
  #
  # source://use_packs//lib/use_packs/configuration.rb#14
  def user_event_logger=(_arg0); end
end

# source://use_packs//lib/use_packs/configuration.rb#16
UsePacks::Configuration::OnPackageTodoLintFailure = T.type_alias { T.proc.params(output: ::String).void }

# source://use_packs//lib/use_packs/default_user_event_logger.rb#4
class UsePacks::DefaultUserEventLogger
  include ::UsePacks::UserEventLogger
end

# source://use_packs//lib/use_packs/logging.rb#6
module UsePacks::Logging
  class << self
    # source://use_packs//lib/use_packs/logging.rb#33
    sig { params(str: ::String).void }
    def out(str); end

    # source://use_packs//lib/use_packs/logging.rb#23
    sig { params(text: ::String).void }
    def print(text); end

    # source://use_packs//lib/use_packs/logging.rb#18
    sig { params(text: ::String).void }
    def print_bold_green(text); end

    # source://use_packs//lib/use_packs/logging.rb#28
    sig { void }
    def print_divider; end

    # source://use_packs//lib/use_packs/logging.rb#10
    sig { params(title: ::String, block: T.proc.void).void }
    def section(title, &block); end
  end
end

# source://use_packs//lib/use_packs.rb#27
UsePacks::PERMITTED_PACK_LOCATIONS = T.let(T.unsafe(nil), Array)

# @abstract Subclasses must implement the `abstract` methods below.
#
# source://use_packs//lib/use_packs/per_file_processor_interface.rb#4
module UsePacks::PerFileProcessorInterface
  abstract!

  # source://use_packs//lib/use_packs/per_file_processor_interface.rb#14
  sig { params(file_move_operations: T::Array[::UsePacks::Private::FileMoveOperation]).void }
  def after_move_files!(file_move_operations); end

  # @abstract
  #
  # source://use_packs//lib/use_packs/per_file_processor_interface.rb#11
  sig { abstract.params(file_move_operation: ::UsePacks::Private::FileMoveOperation).void }
  def before_move_file!(file_move_operation); end
end

# source://use_packs//lib/use_packs/private/file_move_operation.rb#4
module UsePacks::Private
  class << self
    # source://use_packs//lib/use_packs/private.rb#274
    sig { params(pack_name: ::String, dependency_name: ::String).void }
    def add_dependency!(pack_name:, dependency_name:); end

    # source://use_packs//lib/use_packs/private.rb#334
    sig { params(package: ::ParsePackwerk::Package).void }
    def add_public_directory(package); end

    # source://use_packs//lib/use_packs/private.rb#345
    sig { params(package: ::ParsePackwerk::Package).void }
    def add_readme_todo(package); end

    # source://use_packs//lib/use_packs/private.rb#414
    sig { void }
    def bust_cache!; end

    # source://use_packs//lib/use_packs/private.rb#18
    sig { params(pack_name: ::String).returns(::String) }
    def clean_pack_name(pack_name); end

    # source://use_packs//lib/use_packs/private.rb#53
    sig do
      params(
        pack_name: ::String,
        enforce_privacy: T::Boolean,
        enforce_dependencies: T.nilable(T::Boolean),
        team: T.nilable(::CodeTeams::Team)
      ).void
    end
    def create_pack!(pack_name:, enforce_privacy:, enforce_dependencies:, team:); end

    # source://use_packs//lib/use_packs/private.rb#362
    sig do
      params(
        pack_name: ::String,
        enforce_privacy: T::Boolean,
        enforce_dependencies: T.nilable(T::Boolean),
        team: T.nilable(::CodeTeams::Team)
      ).returns(::ParsePackwerk::Package)
    end
    def create_pack_if_not_exists!(pack_name:, enforce_privacy:, enforce_dependencies:, team: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs/private.rb#439
    sig do
      params(
        before: T::Hash[::String, T.nilable(::String)],
        after: T::Hash[::String, T.nilable(::String)]
      ).returns(::String)
    end
    def diff_package_todo_yml(before, after); end

    # source://use_packs//lib/use_packs/private.rb#484
    sig { params(packs: T::Array[::Packs::Pack]).void }
    def get_info(packs: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs/private.rb#422
    sig { returns(T::Hash[::String, ::String]) }
    def get_package_todo_contents; end

    # source://use_packs//lib/use_packs/private.rb#315
    sig { params(origin: ::Pathname, destination: ::Pathname).void }
    def idempotent_mv(origin, destination); end

    # source://use_packs//lib/use_packs/private.rb#526
    sig { void }
    def lint_package_todo_yml_files!; end

    # source://use_packs//lib/use_packs/private.rb#561
    sig { params(packs: T::Array[::Packs::Pack]).void }
    def lint_package_yml_files!(packs); end

    # source://use_packs//lib/use_packs/private.rb#404
    sig { void }
    def load_client_configuration; end

    # source://use_packs//lib/use_packs/private.rb#227
    sig do
      params(
        paths_relative_to_root: T::Array[::String],
        per_file_processors: T::Array[::UsePacks::PerFileProcessorInterface]
      ).void
    end
    def make_public!(paths_relative_to_root:, per_file_processors:); end

    # source://use_packs//lib/use_packs/private.rb#79
    sig do
      params(
        pack_name: ::String,
        paths_relative_to_root: T::Array[::String],
        per_file_processors: T::Array[::UsePacks::PerFileProcessorInterface]
      ).void
    end
    def move_to_pack!(pack_name:, paths_relative_to_root:, per_file_processors: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs/private.rb#147
    sig do
      params(
        pack_name: ::String,
        parent_name: ::String,
        per_file_processors: T::Array[::UsePacks::PerFileProcessorInterface]
      ).void
    end
    def move_to_parent!(pack_name:, parent_name:, per_file_processors: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs/private.rb#302
    sig do
      params(
        file_move_operation: ::UsePacks::Private::FileMoveOperation,
        per_file_processors: T::Array[::UsePacks::PerFileProcessorInterface]
      ).void
    end
    def package_filepath(file_move_operation, per_file_processors); end

    # source://use_packs//lib/use_packs/private.rb#479
    sig { params(package: ::ParsePackwerk::Package).returns(T.nilable(::Packs::Pack)) }
    def packwerk_package_to_pack(package); end

    # source://use_packs//lib/use_packs/private.rb#468
    sig { params(packages: T::Array[::ParsePackwerk::Package]).returns(T::Array[::Packs::Pack]) }
    def packwerk_packages_to_packs(packages); end

    # source://use_packs//lib/use_packs/private.rb#602
    sig { returns(::String) }
    def rename_pack; end

    # source://use_packs//lib/use_packs/private.rb#33
    sig { params(file: ::String, find: ::Pathname, replace_with: ::Pathname).void }
    def replace_in_file(file:, find:, replace_with:); end

    # This function exists to give us something to stub in test
    #
    # source://use_packs//lib/use_packs/private.rb#617
    sig { params(code: ::Integer).void }
    def safe_exit(code); end

    # source://use_packs//lib/use_packs/private.rb#588
    sig { params(config: T::Hash[T.anything, T.anything]).returns(T::Hash[T.anything, T.anything]) }
    def sort_keys(config); end

    # source://use_packs//lib/use_packs/private.rb#594
    sig { params(packs: T::Array[::Packs::Pack]).void }
    def visualize(packs: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs/private.rb#456
    sig { params(package_todo_files: T::Hash[::String, T.nilable(::String)], tmp_folder: ::String).void }
    def write_package_todo_to_tmp_folder(package_todo_files, tmp_folder); end
  end
end

# source://use_packs//lib/use_packs/private/file_move_operation.rb#5
class UsePacks::Private::FileMoveOperation < ::T::Struct
  const :origin_pathname, ::Pathname
  const :destination_pathname, ::Pathname
  const :destination_pack, ::ParsePackwerk::Package

  # source://use_packs//lib/use_packs/private/file_move_operation.rb#13
  sig { returns(::ParsePackwerk::Package) }
  def origin_pack; end

  # source://use_packs//lib/use_packs/private/file_move_operation.rb#51
  sig { returns(::UsePacks::Private::FileMoveOperation) }
  def spec_file_move_operation; end

  private

  # source://use_packs//lib/use_packs/private/file_move_operation.rb#71
  sig { params(path: ::Pathname).returns(::UsePacks::Private::FileMoveOperation) }
  def relative_to(path); end

  class << self
    # source://use_packs//lib/use_packs/private/file_move_operation.rb#29
    sig { params(origin_pathname: ::Pathname).returns(::Pathname) }
    def destination_pathname_for_new_public_api(origin_pathname); end

    # source://use_packs//lib/use_packs/private/file_move_operation.rb#18
    sig { params(origin_pathname: ::Pathname, new_package_root: ::Pathname).returns(::Pathname) }
    def destination_pathname_for_package_move(origin_pathname, new_package_root); end

    # source://sorbet-runtime/0.5.10914/lib/types/struct.rb#13
    def inherited(s); end
  end
end

# source://use_packs//lib/use_packs/private/interactive_cli/team_selector.rb#5
module UsePacks::Private::InteractiveCli
  class << self
    # source://use_packs//lib/use_packs/private/interactive_cli.rb#31
    sig { params(prompt: T.nilable(::TTY::Prompt)).void }
    def start!(prompt: T.unsafe(nil)); end
  end
end

# source://use_packs//lib/use_packs/private/interactive_cli/file_selector.rb#6
class UsePacks::Private::InteractiveCli::FileSelector
  class << self
    # source://use_packs//lib/use_packs/private/interactive_cli/file_selector.rb#10
    sig { params(prompt: ::TTY::Prompt).returns(T::Array[::String]) }
    def select(prompt); end
  end
end

# source://use_packs//lib/use_packs/private/interactive_cli/pack_selector.rb#6
class UsePacks::Private::InteractiveCli::PackSelector
  class << self
    # source://use_packs//lib/use_packs/private/interactive_cli/pack_selector.rb#33
    sig { params(prompt: ::TTY::Prompt, question_text: ::String).returns(T::Array[::Packs::Pack]) }
    def single_or_all_pack_multi_select(prompt, question_text: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs/private/interactive_cli/pack_selector.rb#10
    sig { params(prompt: ::TTY::Prompt, question_text: ::String).returns(::Packs::Pack) }
    def single_pack_select(prompt, question_text: T.unsafe(nil)); end
  end
end

# source://use_packs//lib/use_packs/private/interactive_cli/team_selector.rb#6
class UsePacks::Private::InteractiveCli::TeamSelector
  class << self
    # source://use_packs//lib/use_packs/private/interactive_cli/team_selector.rb#34
    sig { params(prompt: ::TTY::Prompt, question_text: ::String).returns(T::Array[::CodeTeams::Team]) }
    def multi_select(prompt, question_text: T.unsafe(nil)); end

    # source://use_packs//lib/use_packs/private/interactive_cli/team_selector.rb#10
    sig { params(prompt: ::TTY::Prompt, question_text: ::String).returns(T.nilable(::CodeTeams::Team)) }
    def single_select(prompt, question_text: T.unsafe(nil)); end
  end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/interface.rb#6
module UsePacks::Private::InteractiveCli::UseCases; end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/add_dependency.rb#7
class UsePacks::Private::InteractiveCli::UseCases::AddDependency
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/add_dependency.rb#13
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/add_dependency.rb#23
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/check.rb#7
class UsePacks::Private::InteractiveCli::UseCases::Check
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/check.rb#18
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/check.rb#13
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/create.rb#7
class UsePacks::Private::InteractiveCli::UseCases::Create
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/create.rb#13
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/create.rb#20
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/get_info.rb#7
class UsePacks::Private::InteractiveCli::UseCases::GetInfo
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/get_info.rb#18
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/get_info.rb#13
  sig { override.returns(::String) }
  def user_facing_name; end
end

# @abstract Subclasses must implement the `abstract` methods below.
#
# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/interface.rb#7
module UsePacks::Private::InteractiveCli::UseCases::Interface
  interface!

  # @abstract
  #
  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/interface.rb#26
  sig { abstract.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # @abstract
  #
  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/interface.rb#29
  sig { abstract.returns(::String) }
  def user_facing_name; end

  class << self
    # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/interface.rb#21
    sig { returns(T::Array[::UsePacks::Private::InteractiveCli::UseCases::Interface]) }
    def all; end

    # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/interface.rb#14
    sig { params(base: ::Class).void }
    def included(base); end
  end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/lint_package_yml_files.rb#7
class UsePacks::Private::InteractiveCli::UseCases::LintPackageYmlFiles
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/lint_package_yml_files.rb#13
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/lint_package_yml_files.rb#19
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/make_public.rb#7
class UsePacks::Private::InteractiveCli::UseCases::MakePublic
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/make_public.rb#18
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/make_public.rb#13
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/move.rb#7
class UsePacks::Private::InteractiveCli::UseCases::Move
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/move.rb#13
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/move.rb#25
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/move_to_parent.rb#7
class UsePacks::Private::InteractiveCli::UseCases::MoveToParent
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/move_to_parent.rb#13
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/move_to_parent.rb#24
  sig { override.returns(::String) }
  def user_facing_name; end
end

# We have not yet pulled QueryPackwerk into open source, so we cannot include it in this CLI yet
#
# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/query.rb#10
class UsePacks::Private::InteractiveCli::UseCases::Query
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/query.rb#21
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/query.rb#16
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/regenerate_rubocop_todo.rb#7
class UsePacks::Private::InteractiveCli::UseCases::RegenerateRubocopTodo
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/regenerate_rubocop_todo.rb#13
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/regenerate_rubocop_todo.rb#19
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/rename.rb#7
class UsePacks::Private::InteractiveCli::UseCases::Rename
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/rename.rb#18
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/rename.rb#13
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/update.rb#7
class UsePacks::Private::InteractiveCli::UseCases::Update
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/update.rb#18
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/update.rb#13
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/validate.rb#7
class UsePacks::Private::InteractiveCli::UseCases::Validate
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/validate.rb#18
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/validate.rb#13
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/interactive_cli/use_cases/visualize.rb#9
class UsePacks::Private::InteractiveCli::UseCases::Visualize
  include ::UsePacks::Private::InteractiveCli::UseCases::Interface

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/visualize.rb#15
  sig { override.params(prompt: ::TTY::Prompt).void }
  def perform!(prompt); end

  # source://use_packs//lib/use_packs/private/interactive_cli/use_cases/visualize.rb#37
  sig { override.returns(::String) }
  def user_facing_name; end
end

# source://use_packs//lib/use_packs/private/pack_relationship_analyzer.rb#5
module UsePacks::Private::PackRelationshipAnalyzer
  class << self
    # source://use_packs//lib/use_packs/private/pack_relationship_analyzer.rb#77
    sig { params(pack_name: T.nilable(::String), limit: ::Integer).void }
    def list_top_dependency_violations(pack_name, limit); end

    # source://use_packs//lib/use_packs/private/pack_relationship_analyzer.rb#14
    sig { params(pack_name: T.nilable(::String), limit: ::Integer).void }
    def list_top_privacy_violations(pack_name, limit); end
  end
end

# source://use_packs//lib/use_packs/private.rb#434
UsePacks::Private::PackageTodoFiles = T.type_alias { T::Hash[::String, T.nilable(::String)] }

# source://use_packs//lib/use_packs/private/packwerk_wrapper/offenses_aggregator_formatter.rb#5
module UsePacks::Private::PackwerkWrapper
  class << self
    # source://use_packs//lib/use_packs/private/packwerk_wrapper.rb#43
    sig { params(files: T::Array[::String]).returns(T::Array[::Packwerk::ReferenceOffense]) }
    def get_offenses_for_files(files); end

    # source://use_packs//lib/use_packs/private/packwerk_wrapper.rb#56
    sig { params(files: T::Array[::String]).returns(T::Array[::Packwerk::ReferenceOffense]) }
    def get_offenses_for_files_by_package(files); end

    # source://use_packs//lib/use_packs/private/packwerk_wrapper.rb#65
    sig { params(files: T::Array[::String]).returns(T::Array[::String]) }
    def package_names_for_files(files); end

    # source://use_packs//lib/use_packs/private/packwerk_wrapper.rb#33
    sig { params(formatter: T.nilable(::Packwerk::OffensesFormatter)).returns(::Packwerk::Cli) }
    def packwerk_cli(formatter); end

    # execute_command is like `run` except it does not `exit`
    #
    # source://use_packs//lib/use_packs/private/packwerk_wrapper.rb#15
    sig { params(argv: T.untyped, formatter: T.nilable(::Packwerk::OffensesFormatter)).void }
    def packwerk_cli_execute_safely(argv, formatter = T.unsafe(nil)); end

    # source://use_packs//lib/use_packs/private/packwerk_wrapper.rb#50
    sig { void }
    def validate!; end

    # source://use_packs//lib/use_packs/private/packwerk_wrapper.rb#22
    sig { params(block: T.proc.returns(T.untyped)).void }
    def with_safe_exit_if_no_files_found(&block); end
  end
end

# This formatter simply collects offenses so we can feed them into other systems
#
# source://use_packs//lib/use_packs/private/packwerk_wrapper/offenses_aggregator_formatter.rb#9
class UsePacks::Private::PackwerkWrapper::OffensesAggregatorFormatter
  include ::Packwerk::OffensesFormatter

  # source://use_packs//lib/use_packs/private/packwerk_wrapper/offenses_aggregator_formatter.rb#17
  sig { void }
  def initialize; end

  # source://use_packs//lib/use_packs/private/packwerk_wrapper/offenses_aggregator_formatter.rb#14
  sig { returns(T::Array[::Packwerk::ReferenceOffense]) }
  def aggregated_offenses; end

  # source://use_packs//lib/use_packs/private/packwerk_wrapper/offenses_aggregator_formatter.rb#38
  sig { override.returns(::String) }
  def identifier; end

  # source://use_packs//lib/use_packs/private/packwerk_wrapper/offenses_aggregator_formatter.rb#22
  sig { override.params(offenses: T::Array[T.nilable(::Packwerk::Offense)]).returns(::String) }
  def show_offenses(offenses); end

  # source://use_packs//lib/use_packs/private/packwerk_wrapper/offenses_aggregator_formatter.rb#28
  sig do
    override
      .params(
        offense_collection: ::Packwerk::OffenseCollection,
        for_files: T::Set[::String]
      ).returns(::String)
  end
  def show_stale_violations(offense_collection, for_files); end

  # source://use_packs//lib/use_packs/private/packwerk_wrapper/offenses_aggregator_formatter.rb#33
  sig { override.params(strict_mode_violations: T::Array[::Packwerk::ReferenceOffense]).returns(::String) }
  def show_strict_mode_violations(strict_mode_violations); end
end

# source://use_packs//lib/use_packs/rubocop_post_processor.rb#4
class UsePacks::RubocopPostProcessor
  include ::UsePacks::PerFileProcessorInterface

  # source://use_packs//lib/use_packs/rubocop_post_processor.rb#54
  sig { params(file_move_operations: T::Array[::UsePacks::Private::FileMoveOperation]).void }
  def after_move_files!(file_move_operations); end

  # source://use_packs//lib/use_packs/rubocop_post_processor.rb#9
  sig { override.params(file_move_operation: ::UsePacks::Private::FileMoveOperation).void }
  def before_move_file!(file_move_operation); end

  # source://use_packs//lib/use_packs/rubocop_post_processor.rb#72
  sig { returns(T::Boolean) }
  def rubocop_enabled?; end
end

# @abstract Subclasses must implement the `abstract` methods below.
#
# source://use_packs//lib/use_packs/user_event_logger.rb#4
module UsePacks::UserEventLogger
  abstract!

  # source://use_packs//lib/use_packs/user_event_logger.rb#82
  sig { params(pack_name: ::String).returns(::String) }
  def after_add_dependency(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#18
  sig { params(pack_name: ::String).returns(::String) }
  def after_create_pack(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#62
  sig { returns(::String) }
  def after_make_public; end

  # source://use_packs//lib/use_packs/user_event_logger.rb#40
  sig { params(pack_name: ::String).returns(::String) }
  def after_move_to_pack(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#98
  sig { params(pack_name: ::String).returns(::String) }
  def after_move_to_parent(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#75
  sig { params(pack_name: ::String).returns(::String) }
  def before_add_dependency(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#11
  sig { params(pack_name: ::String).returns(::String) }
  def before_create_pack(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#153
  sig { params(pack_name: T.nilable(::String), limit: ::Integer).returns(::String) }
  def before_list_top_dependency_violations(pack_name, limit); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#174
  sig { params(pack_name: T.nilable(::String), limit: ::Integer).returns(::String) }
  def before_list_top_privacy_violations(pack_name, limit); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#55
  sig { returns(::String) }
  def before_make_public; end

  # source://use_packs//lib/use_packs/user_event_logger.rb#33
  sig { params(pack_name: ::String).returns(::String) }
  def before_move_to_pack(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#91
  sig { params(pack_name: ::String).returns(::String) }
  def before_move_to_parent(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#195
  sig { returns(::String) }
  def documentation_link; end

  # source://use_packs//lib/use_packs/user_event_logger.rb#109
  sig { params(pack_name: ::String).returns(::String) }
  def on_create_public_directory_todo(pack_name); end

  # source://use_packs//lib/use_packs/user_event_logger.rb#132
  sig { params(pack_name: ::String).returns(::String) }
  def on_create_readme_todo(pack_name); end
end
