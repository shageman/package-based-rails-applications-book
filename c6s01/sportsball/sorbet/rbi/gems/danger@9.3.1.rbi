# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `danger` gem.
# Please instead update this file by running `bin/tapioca gem danger`.

# So you want to improve this? Great. Hard thing is getting yourself into a position where you
#   have access to all the tokens, so here's something you should run in `bundle exec pry` to dig in:
#
#       require 'danger'
#       require 'yard'
#       parser = Danger::PluginParser.new "spec/fixtures/plugins/example_fully_documented.rb"
#       parser.parse
#       plugins = parser.plugins_from_classes(parser.classes_in_file)
#       git = plugins.first
#       klass = git
#       parser.to_dict(plugins)
#
#   Then some helpers
#
#       attribute_meths = klass.attributes[:instance].values.map(&:values).flatten
#
#       methods = klass.meths - klass.inherited_meths - attribute_meths
#       usable_methods = methods.select { |m| m.visibility == :public }.reject { |m| m.name == :initialize }
#
#   the alternative, is to add
#
#       require 'pry'
#       binding.pry
#
#   anywhere inside the source code below.
#
# source://danger//lib/danger/version.rb#1
module Danger
  class << self
    # @return [String] Latest version of Danger on https://rubygems.org
    #
    # source://danger//lib/danger.rb#33
    def danger_outdated?; end

    # @return [String] The path to the local gem directory
    #
    # source://danger//lib/danger.rb#24
    def gem_path; end
  end
end

# ### CI Setup
#
# Install dependencies and add a danger step to your `appveyor.yml`.
#
# ```yaml
# install:
# - cmd: >-
#     set PATH=C:\Ruby25-x64\bin;%PATH%
#
#     bundle install
# after_test:
# - cmd: >-
#     bundle exec danger
# ```
#
# ### Token Setup
#
# For public repositories, add your plain token to environment variables in `appveyor.yml`.
# Encrypted environment variables will not be decrypted on PR builds.
# see here: https://www.appveyor.com/docs/build-configuration/#secure-variables
#
# ```yaml
# environment:
#   DANGER_GITHUB_API_TOKEN: <YOUR_TOKEN_HERE>
# ```
#
# For private repositories, enter your token in `Settings>Environment>Environment variables>Add variable` and turn on `variable encryption`.
# You will see encrypted variable text in `Settings>Export YAML` so just copy to your `appveyor.yml`.
#
# ```yaml
# environment:
#   DANGER_GITHUB_API_TOKEN:
#     secure: <YOUR_ENCRYPTED_TOKEN_HERE>
# ```
#
# source://danger//lib/danger/ci_source/appveyor.rb#38
class Danger::AppVeyor < ::Danger::CI
  # @return [AppVeyor] a new instance of AppVeyor
  #
  # source://danger//lib/danger/ci_source/appveyor.rb#49
  def initialize(env); end

  # source://danger//lib/danger/ci_source/appveyor.rb#55
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/appveyor.rb#39
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/appveyor.rb#43
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Add a script step to your appcenter-post-build.sh:
#
# ```shell
#   #!/usr/bin/env bash
#   bundle install
#   bundle exec danger
# ```
#
# ### Token Setup
#
# Add the `DANGER_GITHUB_API_TOKEN` to your environment variables.
#
# source://danger//lib/danger/ci_source/appcenter.rb#20
class Danger::Appcenter < ::Danger::CI
  # @return [Appcenter] a new instance of Appcenter
  #
  # source://danger//lib/danger/ci_source/appcenter.rb#49
  def initialize(env); end

  # source://danger//lib/danger/ci_source/appcenter.rb#45
  def supported_request_sources; end

  class << self
    # source://danger//lib/danger/ci_source/appcenter.rb#29
    def owner_for_github(env); end

    # Hopefully it's a temporary workaround (same as in Codeship integration) because App Center
    # doesn't expose PR's ID. There's a future request https://github.com/Microsoft/appcenter/issues/79
    #
    # source://danger//lib/danger/ci_source/appcenter.rb#41
    def pr_from_env(env); end

    # source://danger//lib/danger/ci_source/appcenter.rb#33
    def repo_identifier_for_github(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/appcenter.rb#21
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/appcenter.rb#25
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Add a Custom Script step to your workflow and set it as a bash:
#
# ```shell
#   cd $AC_REPOSITORY_DIR
#   bundle install
#   bundle exec danger
# ```
# ### Token Setup
#
# Login to Appcircle and select your build profile. Go to your *Config* and
# choose *Environment Variables*.
# https://docs.appcircle.io/environment-variables/managing-variables
#
# #### GitHub
# Add the `DANGER_GITHUB_API_TOKEN` to your profile's ENV.
#
# #### GitLab
# Add the `DANGER_GITLAB_API_TOKEN` to your profile's ENV.
#
# #### Bitbucket Cloud
# Add the `DANGER_BITBUCKETSERVER_USERNAME`, `DANGER_BITBUCKETSERVER_PASSWORD`
# to your profile's ENV.
#
# #### Bitbucket server
# Add the `DANGER_BITBUCKETSERVER_USERNAME`, `DANGER_BITBUCKETSERVER_PASSWORD`
# and `DANGER_BITBUCKETSERVER_HOST` to your profile's ENV.
#
# source://danger//lib/danger/ci_source/appcircle.rb#35
class Danger::Appcircle < ::Danger::CI
  # @return [Appcircle] a new instance of Appcircle
  #
  # source://danger//lib/danger/ci_source/appcircle.rb#55
  def initialize(env); end

  # source://danger//lib/danger/ci_source/appcircle.rb#77
  def repo_slug_asgiturl(url); end

  # source://danger//lib/danger/ci_source/appcircle.rb#61
  def repo_slug_from(url); end

  # source://danger//lib/danger/ci_source/appcircle.rb#46
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/appcircle.rb#36
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/appcircle.rb#40
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Add a script step:
#
# ```shell
#   #!/usr/bin/env bash
#   bundle install
#   bundle exec danger
# ```
#
# ### Token Setup
#
# #### GitHub
#
# You need to add the `DANGER_GITHUB_API_TOKEN` environment variable, to do this, go to your build definition's variables tab.
#  #
# #### Azure Git
#
# You need to add the `DANGER_VSTS_API_TOKEN` and `DANGER_VSTS_HOST` environment variable, to do this,
# go to your build definition's variables tab. The `DANGER_VSTS_API_TOKEN` is your vsts personal access token.
# Instructions for creating a personal access token can be found [here](https://www.visualstudio.com/en-us/docs/setup-admin/team-services/use-personal-access-tokens-to-authenticate).
# For the `DANGER_VSTS_HOST` variable the suggested value is `$(System.TeamFoundationCollectionUri)$(System.TeamProject)`
# which will automatically get your vsts domain and your project name needed for the vsts api.
#
# source://danger//lib/danger/ci_source/azure_pipelines.rb#31
class Danger::AzurePipelines < ::Danger::CI
  # @return [AzurePipelines] a new instance of AzurePipelines
  #
  # source://danger//lib/danger/ci_source/azure_pipelines.rb#57
  def initialize(env); end

  # source://danger//lib/danger/ci_source/azure_pipelines.rb#47
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/azure_pipelines.rb#34
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/azure_pipelines.rb#43
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Add a Run Script task that executes `danger` (or `bundle exec danger` if you're using Bundler
# to manage your gems) as your as part of your Bamboo plan.
# The minimum supported version is Bamboo 6.9.
#
# ### Token Setup
#
# IMPORTANT: All required Bamboo environment variables will be available
# only if the plan is run as part of a pull request. This can be achieved by selecting:
# Configure plan -> Branches -> Create plan branch: "When pull request is created".
# Otherwise, `bamboo_repository_pr_key` and `bamboo_planRepository_repositoryUrl`
# will not be available.
#
# source://danger//lib/danger/ci_source/bamboo.rb#18
class Danger::Bamboo < ::Danger::CI
  # @return [Bamboo] a new instance of Bamboo
  #
  # source://danger//lib/danger/ci_source/bamboo.rb#34
  def initialize(env); end

  # source://danger//lib/danger/ci_source/bamboo.rb#19
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/bamboo.rb#25
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/bamboo.rb#29
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/danger_core/messages/base.rb#2
class Danger::BaseMessage
  # @return [BaseMessage] a new instance of BaseMessage
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#5
  def initialize(type:, message:, file: T.unsafe(nil), line: T.unsafe(nil)); end

  # compares a and b based entirely on whether one or the other is nil
  # arguments are in the same order as `a <=> b`
  # nil is sorted earlier - so cmp_nils(nil, 1) => -1
  #
  # If neither are nil, rather than returning `a <=> b` which would seem
  # like the obvious shortcut, `nil` is returned.
  # This allows us to distinguish between cmp_nils returning 0 for a
  # comparison of filenames, which means "a comparison on the lines is
  # meaningless - you cannot have a line number for a nil file - so they
  # should be sorted the same", and a <=> b returning 0, which means "the
  # files are the same, so compare on the lines"
  #
  # @return 0, 1, -1, or nil
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#38
  def cmp_nils(a, b); end

  # source://danger//lib/danger/danger_core/messages/base.rb#12
  def compare_by_file_and_line(other); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#48
  def eql?(other); end

  # Returns the value of attribute file.
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#3
  def file; end

  # Sets the attribute file
  #
  # @param value the value to set the attribute file to.
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#3
  def file=(_arg0); end

  # @return [Boolean] returns true if is a file or line, false otherwise
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#53
  def inline?; end

  # Returns the value of attribute line.
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#3
  def line; end

  # Sets the attribute line
  #
  # @param value the value to set the attribute line to.
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#3
  def line=(_arg0); end

  # Returns the value of attribute message.
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#3
  def message; end

  # Sets the attribute message
  #
  # @param value the value to set the attribute message to.
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#3
  def message=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#3
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://danger//lib/danger/danger_core/messages/base.rb#3
  def type=(_arg0); end
end

# ### CI Setup
#
# Install dependencies and add a danger step to your `bitbucket-pipelines.yml`.
#
# ```yaml
#   script:
#     - bundle exec danger --verbose
# ```
#
# ### Token Setup
#
# Add `DANGER_BITBUCKETCLOUD_USERNAME` and `DANGER_BITBUCKETCLOUD_PASSWORD` to your pipeline repository variable
# or instead using `DANGER_BITBUCKETCLOUD_OAUTH_KEY` and `DANGER_BITBUCKETCLOUD_OAUTH_SECRET`.
#
# You can find them in Settings > Pipelines > Repository Variables
#
# source://danger//lib/danger/ci_source/bitbucket_pipelines.rb#18
class Danger::BitbucketPipelines < ::Danger::CI
  # @return [BitbucketPipelines] a new instance of BitbucketPipelines
  #
  # source://danger//lib/danger/ci_source/bitbucket_pipelines.rb#31
  def initialize(env); end

  # source://danger//lib/danger/ci_source/bitbucket_pipelines.rb#27
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/bitbucket_pipelines.rb#19
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/bitbucket_pipelines.rb#23
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Add a script step to your workflow:
#
# ```yml
# - script@1.1.2:
#     inputs:
#    - content: |-
#        bundle install
#        bundle exec danger
# ```
#
# ### Token Setup
#
# Add the `DANGER_GITHUB_API_TOKEN` to your workflow's [Secret App Env Vars](https://blog.bitrise.io/anyone-even-prs-can-have-secrets).
#
# ### bitbucket server and bitrise
#
# Danger will read the environment variable GIT_REPOSITORY_URL to construct the Bitbucket Server API URL
# finding the project and repo slug in the GIT_REPOSITORY_URL variable. This GIT_REPOSITORY_URL variable
# comes from the App Settings tab for your Bitrise App. If you are manually setting a repo URL in the
# Git Clone Repo step, you may need to set adjust this property in the settings tab, maybe even fake it.
# The patterns used are `(%r{\.com/(.*)})` and `(%r{\.com:(.*)})` and .split(/\.git$|$/) to remove ".git" if the URL contains it.
#
# source://danger//lib/danger/ci_source/bitrise.rb#30
class Danger::Bitrise < ::Danger::CI
  # @return [Bitrise] a new instance of Bitrise
  #
  # source://danger//lib/danger/ci_source/bitrise.rb#48
  def initialize(env); end

  # source://danger//lib/danger/ci_source/bitrise.rb#72
  def repo_slug_asgiturl(url); end

  # source://danger//lib/danger/ci_source/bitrise.rb#56
  def repo_slug_from(url); end

  # source://danger//lib/danger/ci_source/bitrise.rb#39
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/bitrise.rb#31
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/bitrise.rb#35
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Read how you can setup Danger on the buddybuild blog:
# https://www.buddybuild.com/blog/using-danger-with-buddybuild/
#
# ### Token Setup
#
# Login to buddybuild and select your app. Go to your *App Settings* and
# in the *Build Settings* menu on the left, choose *Environment Variables*.
# http://docs.buddybuild.com/docs/environment-variables
#
# #### GitHub
# Add the `DANGER_GITHUB_API_TOKEN` to your build user's ENV.
#
# #### GitLab
# Add the `DANGER_GITLAB_API_TOKEN` to your build user's ENV.
#
# #### Bitbucket Cloud
# Add the `DANGER_BITBUCKETSERVER_USERNAME`, `DANGER_BITBUCKETSERVER_PASSWORD`
# to your build user's ENV.
#
# #### Bitbucket server
# Add the `DANGER_BITBUCKETSERVER_USERNAME`, `DANGER_BITBUCKETSERVER_PASSWORD`
# and `DANGER_BITBUCKETSERVER_HOST` to your build user's ENV.
#
# ### Running Danger
#
# Once the environment variables are all available, create a custom build step
# to run Danger as part of your build process:
# http://docs.buddybuild.com/docs/custom-prebuild-and-postbuild-steps
#
# source://danger//lib/danger/ci_source/buddybuild.rb#32
class Danger::Buddybuild < ::Danger::CI
  # @return [Buddybuild] a new instance of Buddybuild
  #
  # source://danger//lib/danger/ci_source/buddybuild.rb#56
  def initialize(env); end

  # source://danger//lib/danger/ci_source/buddybuild.rb#46
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/buddybuild.rb#34
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/buddybuild.rb#40
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# With BuildKite you run the server yourself, so you will want to run  it as a part of your build process.
# It is common to have build steps, so we would recommend adding this to your scrip:
#
#  ```shell
#   echo "--- Running Danger"
#   bundle exec danger
#  ```
#
# ### Token Setup
#
# #### GitHub
#
# As this is self-hosted, you will need to add the `DANGER_GITHUB_API_TOKEN` to your build user's ENV. The alternative
# is to pass in the token as a prefix to the command `DANGER_GITHUB_API_TOKEN="123" bundle exec danger`.
#
# #### GitLab
#
# As this is self-hosted, you will need to add the `DANGER_GITLAB_API_TOKEN` to your build user's ENV. The alternative
# is to pass in the token as a prefix to the command `DANGER_GITLAB_API_TOKEN="123" bundle exec danger`.
#
# source://danger//lib/danger/ci_source/buildkite.rb#29
class Danger::Buildkite < ::Danger::CI
  # @return [Buildkite] a new instance of Buildkite
  #
  # source://danger//lib/danger/ci_source/buildkite.rb#39
  def initialize(env); end

  # source://danger//lib/danger/ci_source/buildkite.rb#47
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/buildkite.rb#30
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/buildkite.rb#34
    def validates_as_pr?(env); end
  end
end

# "abstract" CI class
#
# source://danger//lib/danger/ci_source/ci_source.rb#5
class Danger::CI
  # @return [CI] a new instance of CI
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#33
  def initialize(_env); end

  # Returns the value of attribute pull_request_id.
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#6
  def pull_request_id; end

  # Sets the attribute pull_request_id
  #
  # @param value the value to set the attribute pull_request_id to.
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#6
  def pull_request_id=(_arg0); end

  # Returns the value of attribute repo_slug.
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#6
  def repo_slug; end

  # Sets the attribute repo_slug
  #
  # @param value the value to set the attribute repo_slug to.
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#6
  def repo_slug=(_arg0); end

  # Returns the value of attribute repo_url.
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#6
  def repo_url; end

  # Sets the attribute repo_url
  #
  # @param value the value to set the attribute repo_url to.
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#6
  def repo_url=(_arg0); end

  # Returns the value of attribute supported_request_sources.
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#17
  def supported_request_sources; end

  # Sets the attribute supported_request_sources
  #
  # @param value the value to set the attribute supported_request_sources to.
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#6
  def supported_request_sources=(_arg0); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/ci_source.rb#21
  def supports?(request_source); end

  class << self
    # source://danger//lib/danger/ci_source/ci_source.rb#13
    def available_ci_sources; end

    # @private
    #
    # source://danger//lib/danger/ci_source/ci_source.rb#8
    def inherited(child_class); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/ci_source.rb#25
    def validates_as_ci?(_env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/ci_source.rb#29
    def validates_as_pr?(_env); end
  end
end

# source://danger//lib/danger/commands/systems.rb#8
class Danger::CIDocs < ::Danger::Systems
  # source://danger//lib/danger/commands/systems.rb#12
  def run; end
end

# source://danger//lib/danger/ci_source/circle_api.rb#4
class Danger::CircleAPI
  # source://danger//lib/danger/ci_source/circle_api.rb#30
  def client; end

  # Make the API call, and parse the JSON
  #
  # source://danger//lib/danger/ci_source/circle_api.rb#44
  def fetch_build(repo_slug, build_number, token); end

  # Ask the API if the commit is inside a PR
  #
  # source://danger//lib/danger/ci_source/circle_api.rb#35
  def fetch_pull_request_url(repo_slug, build_number, token); end

  # Determine if there's a PR attached to this commit,
  # and return a bool
  #
  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/circle_api.rb#7
  def pull_request?(env); end

  # Determine if there's a PR attached to this commit,
  # and return the url if so
  #
  # source://danger//lib/danger/ci_source/circle_api.rb#14
  def pull_request_url(env); end
end

# ### CI Setup
#
# For setting up CircleCI, we recommend turning on "Only build pull requests" in "Advanced Settings." Without this enabled,
# it's trickier for Danger to determine whether you're in a pull request or not, as the environment metadata
# isn't as reliable.
#
# A common scenario is when CircleCI begins building a commit before the commit becomes associated with a PR
# (e.g. a developer pushes their branch to the remote repo for the first time. CircleCI spins up and begins building.
# Moments later the developer creates a PR on GitHub. Since the build process started before the PR existed,
# Danger won't be able to use the Circle-provided environment variables to retrieve PR metadata.)
#
# With "Only build pull requests" enabled, you can add `bundle exec danger` to your `config.yml` (Circle 2.0).
#
# e.g.
#
#  ```yaml
#  - run: bundle exec danger --verbose
#  ```
#
# And that should be it!
#
# ### Token Setup
#
# If "Only build pull requests" can't be enabled for your project, Danger _can_ still work by relying on CircleCI's API
# to retrieve PR metadata, which will require an API token.
#
# 1. Go to your project > Settings > API Permissions. Create a token with scope "view-builds" and a label like "DANGER_CIRCLE_CI_API_TOKEN".
# 2. Settings > Environment Variables. Add the token as a CircleCI environment variable, which exposes it to the Danger process.
#
# There is no difference here for OSS vs Closed, both scenarios will need this environment variable.
#
# With these pieces in place, Danger should be able to work as expected.
#
# source://danger//lib/danger/ci_source/circle.rb#40
class Danger::CircleCI < ::Danger::CI
  # @return [CircleCI] a new instance of CircleCI
  #
  # source://danger//lib/danger/ci_source/circle.rb#66
  def initialize(env); end

  # source://danger//lib/danger/ci_source/circle.rb#62
  def supported_request_sources; end

  class << self
    # Side note: CircleCI is complicated. The env vars for PRs are not guaranteed to exist
    # if the build was triggered from a commit, to look at examples of the different types
    # of CI states, see this repo: https://github.com/orta/show_circle_env
    #
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/circle.rb#45
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/circle.rb#49
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
# You need to edit your `.cirrus.yml` to include `bundler exec danger`.
#
# Adding this to your `.cirrus.yml` allows Danger to fail your build, both on the Cirrus CI website and within your Pull Request.
# With that set up, you can edit your task to add `bundler exec danger` in any script instruction.
#
# source://danger//lib/danger/ci_source/cirrus.rb#9
class Danger::Cirrus < ::Danger::CI
  # @return [Cirrus] a new instance of Cirrus
  #
  # source://danger//lib/danger/ci_source/cirrus.rb#23
  def initialize(env); end

  # source://danger//lib/danger/ci_source/cirrus.rb#19
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/cirrus.rb#10
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/cirrus.rb#14
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# In CodeBuild, make sure to correctly forward CODEBUILD_BUILD_ID, CODEBUILD_SOURCE_VERSION, CODEBUILD_SOURCE_REPO_URL and DANGER_GITHUB_API_TOKEN.
# In CodeBuild with batch builds, make sure to correctly forward CODEBUILD_BUILD_ID, CODEBUILD_WEBHOOK_TRIGGER, CODEBUILD_SOURCE_REPO_URL, CODEBUILD_BATCH_BUILD_IDENTIFIER and DANGER_GITHUB_API_TOKEN.
#
# ### Token Setup
#
# Add your `DANGER_GITHUB_API_TOKEN` to your project. Edit -> Environment -> Additional configuration -> Create a parameter
#
# source://danger//lib/danger/ci_source/code_build.rb#14
class Danger::CodeBuild < ::Danger::CI
  # @return [CodeBuild] a new instance of CodeBuild
  #
  # source://danger//lib/danger/ci_source/code_build.rb#27
  def initialize(env); end

  # source://danger//lib/danger/ci_source/code_build.rb#23
  def supported_request_sources; end

  class << self
    # source://danger//lib/danger/ci_source/code_build.rb#51
    def extract_pr_url(env); end

    # source://danger//lib/danger/ci_source/code_build.rb#37
    def extract_repo_slug(env); end

    # source://danger//lib/danger/ci_source/code_build.rb#45
    def extract_repo_url(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/code_build.rb#15
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/code_build.rb#19
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
#  To set up Danger on Codefresh, create a freestyle step in your Codefresh yaml configuration:
#
#  ```yml
#  Danger:
#    title: Run Danger
#    image: alpine/bundle
#    working_directory: ${{main_clone}}
#    commands:
#      - bundle install --deployment
#      - bundle exec danger --verbose
#  ```
#
#  Don't forget to add the `DANGER_GITHUB_API_TOKEN` variable to your pipeline settings so that Danger can properly post comments to your pull request.
#
# source://danger//lib/danger/ci_source/codefresh.rb#21
class Danger::Codefresh < ::Danger::CI
  # @return [Codefresh] a new instance of Codefresh
  #
  # source://danger//lib/danger/ci_source/codefresh.rb#41
  def initialize(env); end

  # source://danger//lib/danger/ci_source/codefresh.rb#30
  def supported_request_sources; end

  class << self
    # source://danger//lib/danger/ci_source/codefresh.rb#34
    def slug_from(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/codefresh.rb#22
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/codefresh.rb#26
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Add a script step to your workflow:
#
# ```
# - name: Running Danger
#   script: |
#     bundle install
#     bundle exec danger
# ```
#
# ### Token Setup
#
# Add the following environment variables to your workflow's environment configuration.
# https://docs.codemagic.io/getting-started/yaml/
#
# #### GitHub
# Add the `DANGER_GITHUB_API_TOKEN` to your build user's ENV.
#
# #### GitLab
# Add the `DANGER_GITLAB_API_TOKEN` to your build user's ENV.
#
# #### Bitbucket Cloud
# Add the `DANGER_BITBUCKETSERVER_USERNAME`, `DANGER_BITBUCKETSERVER_PASSWORD`
# to your build user's ENV.
#
# #### Bitbucket server
# Add the `DANGER_BITBUCKETSERVER_USERNAME`, `DANGER_BITBUCKETSERVER_PASSWORD`
# and `DANGER_BITBUCKETSERVER_HOST` to your build user's ENV.
#
# source://danger//lib/danger/ci_source/codemagic.rb#34
class Danger::Codemagic < ::Danger::CI
  # @return [Codemagic] a new instance of Codemagic
  #
  # source://danger//lib/danger/ci_source/codemagic.rb#52
  def initialize(env); end

  # source://danger//lib/danger/ci_source/codemagic.rb#43
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/codemagic.rb#35
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/codemagic.rb#39
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# In Codeship, go to your "Project Settings", then add `bundle exec danger` as a test step inside
# one of your pipelines.
#
# ### Token Setup
#
# Add your `DANGER_GITHUB_API_TOKEN` to "Environment" section in "Project Settings".
#
# source://danger//lib/danger/ci_source/codeship.rb#14
class Danger::Codeship < ::Danger::CI
  # @return [Codeship] a new instance of Codeship
  #
  # source://danger//lib/danger/ci_source/codeship.rb#38
  def initialize(env); end

  # source://danger//lib/danger/ci_source/codeship.rb#34
  def supported_request_sources; end

  class << self
    # source://danger//lib/danger/ci_source/codeship.rb#25
    def owner_for_github(env); end

    # this is fairly hacky, see https://github.com/danger/danger/pull/892#issuecomment-329030616 for why
    #
    # source://danger//lib/danger/ci_source/codeship.rb#30
    def pr_from_env(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/codeship.rb#15
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/codeship.rb#19
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/helpers/comment.rb#2
class Danger::Comment
  # @return [Comment] a new instance of Comment
  #
  # source://danger//lib/danger/helpers/comment.rb#5
  def initialize(id, body, inline = T.unsafe(nil)); end

  # Returns the value of attribute body.
  #
  # source://danger//lib/danger/helpers/comment.rb#3
  def body; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/helpers/comment.rb#24
  def generated_by_danger?(danger_id); end

  # Returns the value of attribute id.
  #
  # source://danger//lib/danger/helpers/comment.rb#3
  def id; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/helpers/comment.rb#28
  def inline?; end

  class << self
    # source://danger//lib/danger/helpers/comment.rb#11
    def from_github(comment); end

    # source://danger//lib/danger/helpers/comment.rb#15
    def from_gitlab(comment); end
  end
end

# source://danger//lib/danger/ci_source/support/commits.rb#2
class Danger::Commits
  # @return [Commits] a new instance of Commits
  #
  # source://danger//lib/danger/ci_source/support/commits.rb#3
  def initialize(base_head); end

  # source://danger//lib/danger/ci_source/support/commits.rb#7
  def base; end

  # source://danger//lib/danger/ci_source/support/commits.rb#11
  def head; end

  private

  # Returns the value of attribute base_head.
  #
  # source://danger//lib/danger/ci_source/support/commits.rb#17
  def base_head; end
end

# Concourse CI Integration
#
# https://concourse-ci.org/
#
# ### CI Setup
#
# With Concourse, you run the docker images yourself, so you will want to add `yarn danger ci` within one of your build jobs.
#
#   ```shell
#    build:
#      image: golang
#        commands:
#          - ...
#          - yarn danger ci
#   ```
#
# ### Environment Variable Setup
#
# As this is self-hosted, you will need to add the `CONCOURSE` environment variable `export CONCOURSE=true` to your build environment,
# as well as setting environment variables for `PULL_REQUEST_ID` and `REPO_SLUG`. Assuming you are using the github pull request resource
# https://github.com/jtarchie/github-pullrequest-resource the id of the PR can be accessed from `git config --get pullrequest.id`.
#
# ### Token Setup
#
# Once again as this is self-hosted, you will need to add `DANGER_GITHUB_API_TOKEN` environment variable to the build environment.
# The suggested method of storing the token is within the vault - https://concourse-ci.org/creds.html
#
# source://danger//lib/danger/ci_source/concourse.rb#32
class Danger::Concourse < ::Danger::CI
  # @return [Concourse] a new instance of Concourse
  #
  # source://danger//lib/danger/ci_source/concourse.rb#51
  def initialize(env); end

  # source://danger//lib/danger/ci_source/concourse.rb#42
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/concourse.rb#33
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/concourse.rb#37
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Custom CI with GitHub
#
# This CI source is for custom, most likely internal, CI systems that are use GitHub as source control.
# An example could be argo-workflows or tekton hosted in your own Kubernetes cluster.
#
# The following environment variables are required:
# - `CUSTOM_CI_WITH_GITHUB` - Set to any value to indicate that this is a custom CI with GitHub
#
# ### Token Setup
#
# #### GitHub
# As you own the setup, it's up to you to add the environment variable for the `DANGER_GITHUB_API_TOKEN`.
#
# source://danger//lib/danger/ci_source/custom_ci_with_github.rb#19
class Danger::CustomCIWithGithub < ::Danger::CI
  # @return [CustomCIWithGithub] a new instance of CustomCIWithGithub
  #
  # source://danger//lib/danger/ci_source/custom_ci_with_github.rb#33
  def initialize(env); end

  # source://danger//lib/danger/ci_source/custom_ci_with_github.rb#29
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/custom_ci_with_github.rb#20
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/custom_ci_with_github.rb#24
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/version.rb#3
Danger::DESCRIPTION = T.let(T.unsafe(nil), String)

# Wraps an exception raised by a DSL file in order to show to the user the
# contents of the line that raised the exception.
#
# source://danger//lib/danger/danger_core/standard_error.rb#12
class Danger::DSLError < ::StandardError
  # @param backtrace [Exception] @see backtrace
  # @param dsl_path [String] @see dsl_path
  # @return [DSLError] a new instance of DSLError
  #
  # source://danger//lib/danger/danger_core/standard_error.rb#29
  def initialize(description, dsl_path, backtrace, contents = T.unsafe(nil)); end

  # @return [Exception] the backtrace of the exception raised by the
  #   evaluation of the dsl file.
  #
  # source://danger//lib/danger/danger_core/standard_error.rb#24
  def backtrace; end

  # @return [String] the contents of the DSL that cause the exception to
  #   be raised.
  #
  # source://danger//lib/danger/danger_core/standard_error.rb#39
  def contents; end

  # @return [String] the description that should be presented to the user.
  #
  # source://danger//lib/danger/danger_core/standard_error.rb#15
  def description; end

  # @return [String] the path of the dsl file that raised the exception.
  #
  # source://danger//lib/danger/danger_core/standard_error.rb#19
  def dsl_path; end

  # The message of the exception reports the content of podspec for the
  # line that generated the original exception.
  #
  # @example Output
  #
  #   Invalid podspec at `RestKit.podspec` - undefined method
  #   `exclude_header_search_paths=' for #<Pod::Specification for
  #   `RestKit/Network (0.9.3)`>
  #
  #   from spec-repos/master/RestKit/0.9.3/RestKit.podspec:36
  #   -------------------------------------------
  #   # because it would break: #import <CoreData/CoreData.h>
  #   >      ns.exclude_header_search_paths = 'Code/RestKit.h'
  #   end
  #   -------------------------------------------
  # @return [String] the message of the exception.
  #
  # source://danger//lib/danger/danger_core/standard_error.rb#61
  def message; end

  # source://danger//lib/danger/danger_core/standard_error.rb#72
  def to_markdown; end

  private

  # source://danger//lib/danger/danger_core/standard_error.rb#92
  def parse; end

  # source://danger//lib/danger/danger_core/standard_error.rb#127
  def parse_line_number_from_description; end

  # source://danger//lib/danger/danger_core/standard_error.rb#136
  def upgrade_message(latest_version); end
end

# source://danger//lib/danger/danger_core/dangerfile_dsl.rb#2
class Danger::Dangerfile
  include ::Danger::Dangerfile::DSL

  # cork_board not being set comes from plugins #585
  #
  # @return [Dangerfile] a new instance of Dangerfile
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#77
  def initialize(env_manager, cork_board = T.unsafe(nil)); end

  # source://danger//lib/danger/danger_core/dangerfile.rb#113
  def core_dsl_attributes; end

  # @return [Pathname] the path where the Dangerfile was loaded from. It is nil
  #   if the Dangerfile was generated programmatically.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#26
  def defined_in_file; end

  # @return [Pathname] the path where the Dangerfile was loaded from. It is nil
  #   if the Dangerfile was generated programmatically.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#26
  def defined_in_file=(_arg0); end

  # Returns the value of attribute env.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#21
  def env; end

  # Sets the attribute env
  #
  # @param value the value to set the attribute env to.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#21
  def env=(_arg0); end

  # source://danger//lib/danger/danger_core/dangerfile.rb#117
  def external_dsl_attributes; end

  # source://danger//lib/danger/danger_core/dangerfile.rb#56
  def fail(*args, **kargs, &blk); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#244
  def failed?; end

  # Iterate through available plugin classes and initialize them with
  # a reference to this Dangerfile
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#95
  def init_plugins; end

  # When an undefined method is called, we check to see if it's something
  # that the core DSLs have, then starts looking at plugins support.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#63
  def method_missing(method_sym, *arguments, **keyword_arguments, &_block); end

  # source://danger//lib/danger/danger_core/dangerfile.rb#121
  def method_values_for_plugin_hashes(plugin_hashes); end

  # Parses the file at a path, optionally takes the content of the file for DI
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#178
  def parse(path, contents = T.unsafe(nil)); end

  # Returns the value of attribute plugins.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#21
  def plugins; end

  # Sets the attribute plugins
  #
  # @param value the value to set the attribute plugins to.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#21
  def plugins=(_arg0); end

  # source://danger//lib/danger/danger_core/dangerfile.rb#248
  def post_results(danger_id, new_comment, remove_previous_comments); end

  # Iterates through the DSL's attributes, and table's the output
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#151
  def print_known_info; end

  # source://danger//lib/danger/danger_core/dangerfile.rb#213
  def print_results; end

  # Iterate through available plugin classes and initialize them with
  # a reference to this Dangerfile
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#95
  def refresh_plugins; end

  # source://danger//lib/danger/danger_core/dangerfile.rb#277
  def run(base_branch, head_branch, dangerfile_path, danger_id, new_comment, remove_previous_comments, report_results = T.unsafe(nil)); end

  # source://danger//lib/danger/danger_core/dangerfile.rb#272
  def setup_for_running(base_branch, head_branch); end

  # @return [String] a string useful to represent the Dangerfile in a message
  #   presented to the user.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#31
  def to_s; end

  # Returns the value of attribute ui.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#21
  def ui; end

  # Sets the attribute ui
  #
  # @param value the value to set the attribute ui to.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#21
  def ui=(_arg0); end

  # Returns the value of attribute verbose.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#21
  def verbose; end

  # Sets the attribute verbose
  #
  # @param value the value to set the attribute verbose to.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#21
  def verbose=(_arg0); end

  # Both of these methods exist on all objects
  # http://ruby-doc.org/core-2.2.3/Kernel.html#method-i-warn
  # http://ruby-doc.org/core-2.2.3/Kernel.html#method-i-fail
  # However, as we're using using them in the DSL, they won't
  # get method_missing called correctly without overriding them.
  #
  # source://danger//lib/danger/danger_core/dangerfile.rb#52
  def warn(*args, **kargs, &blk); end

  private

  # source://danger//lib/danger/danger_core/dangerfile.rb#310
  def eval_file(contents, path); end

  # source://danger//lib/danger/danger_core/dangerfile.rb#337
  def post_exception(ex, danger_id, new_comment); end

  # source://danger//lib/danger/danger_core/dangerfile.rb#314
  def print_list(title, rows); end

  # source://danger//lib/danger/danger_core/dangerfile.rb#330
  def wrap_text(text, width = T.unsafe(nil)); end

  class << self
    # These are the classes that are allowed to also use method_missing
    # in order to provide broader plugin support
    #
    # source://danger//lib/danger/danger_core/dangerfile.rb#37
    def core_plugin_classes; end

    # The ones that everything would break without
    #
    # source://danger//lib/danger/danger_core/dangerfile.rb#42
    def essential_plugin_classes; end
  end
end

# Anything inside this module is considered public API, and in the future
# documentation will be generated from it via rdoc.
#
# source://danger//lib/danger/danger_core/dangerfile_dsl.rb#6
module Danger::Dangerfile::DSL
  # source://danger//lib/danger/danger_core/dangerfile_dsl.rb#18
  def initialize; end

  # Provides access to the raw Travis/Circle/Buildkite/GitHub objects, which
  # you can use to pull out extra bits of information. _Warning_
  # the interfaces of these objects is **not** considered a part of the Dangerfile public
  # API, and is viable to change occasionally on the whims of developers.
  #
  # @return [EnvironmentManager]
  #
  # source://danger//lib/danger/danger_core/dangerfile_dsl.rb#14
  def env; end

  private

  # source://danger//lib/danger/danger_core/dangerfile_dsl.rb#22
  def load_default_plugins; end
end

# Handles interacting with Bitbucket Cloud inside a Dangerfile. Provides a few functions which wrap `pr_json` and also
# through a few standard functions to simplify your code.
#
# @example Warn when a PR is classed as work in progress
#
#   warn "PR is classed as Work in Progress" if bitbucket_cloud.pr_title.include? "[WIP]"
# @example Declare a PR to be simple to avoid specific Danger rules
#
#   declared_trivial = (bitbucket_cloud.pr_title + bitbucket_cloud.pr_body).include?("#trivial")
# @example Ensure that labels have been used on the PR
#
#   failure "Please add labels to this PR" if bitbucket_cloud.pr_labels.empty?
# @example Ensure there is a summary for a PR
#
#   failure "Please provide a summary in the Pull Request description" if bitbucket_cloud.pr_body.length < 5
# @example Only accept PRs to the develop branch
#
#   failure "Please re-submit this PR to develop, we may have already fixed your issue." if bitbucket_cloud.branch_for_base != "develop"
# @example Highlight when a celebrity makes a pull request
#
#   message "Welcome, Danger." if bitbucket_cloud.pr_author == "dangermcshane"
# @example Ensure that all PRs have an assignee
#
#   warn "This PR does not have any assignees yet." if bitbucket_cloud.pr_json[:reviewers].length == 0
# @example Send a message with links to a collection of specific files
#
#   if git.modified_files.include? "config/*.js"
#   config_files = git.modified_files.select { |path| path.include? "config/" }
#   message "This PR changes #{ bitbucket_cloud.html_link(config_files) }"
#   end
# @example Highlight with a clickable link if a Package.json is changed
#
#   warn "#{bitbucket_cloud.html_link("Package.json")} was edited." if git.modified_files.include? "Package.json"
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#49
class Danger::DangerfileBitbucketCloudPlugin < ::Danger::Plugin
  # @return [DangerfileBitbucketCloudPlugin] a new instance of DangerfileBitbucketCloudPlugin
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#64
  def initialize(dangerfile); end

  # The base commit to which the PR is going to be merged as a parent.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#130
  def base_commit; end

  # The branch to which the PR is going to be merged into.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#106
  def branch_for_base; end

  # The branch to which the PR is going to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#122
  def branch_for_head; end

  # The head commit to which the PR is requesting to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#138
  def head_commit; end

  # The username of the author of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#98
  def pr_author; end

  # The body text of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#89
  def pr_body; end

  # The body text of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#89
  def pr_description; end

  # The hash that represents the PR's JSON. For an example of what this looks like
  # see the [Danger Fixture'd one](https://raw.githubusercontent.com/danger/danger/master/spec/fixtures/bitbucket_cloud_api/pr_response.json).
  #
  # @return [Hash]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#73
  def pr_json; end

  # A href that represents the current PR
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#114
  def pr_link; end

  # The title of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#81
  def pr_title; end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#60
    def instance_name; end

    # So that this init can fail.
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_cloud_plugin.rb#51
    def new(dangerfile); end
  end
end

# Handles interacting with Bitbucket Server inside a Dangerfile. Provides a few functions which wrap `pr_json` and also
# through a few standard functions to simplify your code.
#
# @example Warn when a PR is classed as work in progress
#
#   warn "PR is classed as Work in Progress" if bitbucket_server.pr_title.include? "[WIP]"
# @example Declare a PR to be simple to avoid specific Danger rules
#
#   declared_trivial = (bitbucket_server.pr_title + bitbucket_server.pr_body).include?("#trivial")
# @example Ensure that labels have been used on the PR
#
#   failure "Please add labels to this PR" if bitbucket_server.pr_labels.empty?
# @example Ensure there is a summary for a PR
#
#   failure "Please provide a summary in the Pull Request description" if bitbucket_server.pr_body.length < 5
# @example Only accept PRs to the develop branch
#
#   failure "Please re-submit this PR to develop, we may have already fixed your issue." if bitbucket_server.branch_for_base != "develop"
# @example Highlight when a celebrity makes a pull request
#
#   message "Welcome, Danger." if bitbucket_server.pr_author == "dangermcshane"
# @example Ensure that all PRs have an assignee
#
#   warn "This PR does not have any assignees yet." if bitbucket_server.pr_json[:reviewers].length == 0
# @example Send a message with links to a collection of specific files
#
#   if git.modified_files.include? "config/*.js"
#   config_files = git.modified_files.select { |path| path.include? "config/" }
#   message "This PR changes #{ bitbucket_server.html_link(config_files) }"
#   end
# @example Highlight with a clickable link if a Package.json is changed
#
#   warn "#{bitbucket_server.html_link("Package.json")} was edited." if git.modified_files.include? "Package.json"
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#49
class Danger::DangerfileBitbucketServerPlugin < ::Danger::Plugin
  # @return [DangerfileBitbucketServerPlugin] a new instance of DangerfileBitbucketServerPlugin
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#64
  def initialize(dangerfile); end

  # The base commit to which the PR is going to be merged as a parent.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#130
  def base_commit; end

  # The branch to which the PR is going to be merged into.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#106
  def branch_for_base; end

  # The branch to which the PR is going to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#122
  def branch_for_head; end

  # The head commit to which the PR is requesting to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#138
  def head_commit; end

  # Returns a list of Markdown links for a file, or files in the head repository.
  # It returns a string of multiple anchors if passed an array.
  #
  # @note Atlassian [disabled inline HTML support](https://jira.atlassian.com/browse/BSERV-7147).
  #   This method method left for backward compatibility.
  # @param paths [String or Array<String>] A list of strings to convert to github anchors
  # @param full_path [Bool] Shows the full path as the link's text, defaults to `true`.
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#154
  def html_link(paths, full_path: T.unsafe(nil)); end

  # Returns a list of Markdown links for a file, or files in the head repository.
  # It returns a string of multiple links if passed an array.
  #
  # @param paths [String or Array<String>] A list of strings to convert to Markdown links
  # @param full_path [Bool] Shows the full path as the link's text, defaults to `true`.
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#168
  def markdown_link(paths, full_path: T.unsafe(nil)); end

  # The username of the author of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#98
  def pr_author; end

  # The body text of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#89
  def pr_body; end

  # The body text of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#89
  def pr_description; end

  # The hash that represents the PR's JSON. For an example of what this looks like
  # see the [Danger Fixture'd one](https://raw.githubusercontent.com/danger/danger/master/spec/fixtures/bitbucket_server_api/pr_response.json).
  #
  # @return [Hash]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#73
  def pr_json; end

  # A href that represents the current PR
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#114
  def pr_link; end

  # The title of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#81
  def pr_title; end

  # Updates the PR with build status and build server job link.
  #
  # @param status [String] SUCCESSFUL, FAILED and INPROGRESS
  # @param build_job_link [String] Build server job link
  # @param description [String] Build status description
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#182
  def update_pr_build_status(status, build_job_link, description); end

  private

  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#188
  def create_link(paths, full_path); end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#207
  def create_markdown_link(href, text); end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#60
    def instance_name; end

    # So that this init can fail.
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_bitbucket_server_plugin.rb#51
    def new(dangerfile); end
  end
end

# source://danger//lib/danger/commands/dangerfile/init.rb#6
class Danger::DangerfileCommand < ::Danger::Runner
  class << self
    # source://danger//lib/danger/commands/dangerfile/init.rb#11
    def options; end
  end
end

# A way to interact with Danger herself. Offering APIs to import plugins,
# and Dangerfiles from multiple sources.
#
# @example Import a plugin available over HTTP
#
#   device_grid = "https://raw.githubusercontent.com/fastlane/fastlane/master/danger-device_grid/lib/device_grid/plugin.rb"
#   danger.import_plugin(device_grid)
# @example Import from a local file reference
#
#   danger.import_plugin("danger/plugins/watch_plugin.rb")
# @example Import all files inside a folder
#
#   danger.import_plugin("danger/plugins/*.rb")
# @example Run a Dangerfile from inside a sub-folder
#
#   danger.import_dangerfile(path: "path/to/Dangerfile")
# @example Run a Dangerfile from inside a gem
#
#   danger.import_dangerfile(gem: "ruby-grape-danger")
# @example Run a Dangerfile from inside a repo
#
#   danger.import_dangerfile(gitlab_project_id: 1345)
# @example Run a Dangerfile from inside a repo branch and path
#
#   danger.import_dangerfile(github: "ruby-grape/danger", branch: "custom", path: "path/to/Dangerfile")
# @example Import a plugin available over HTTP
#
#   custom_url = "https://custom.bitbucket.com/project-name/Dangerfile?raw"
#   danger.import_dangerfile(url: custom_url)
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#44
class Danger::DangerfileDangerPlugin < ::Danger::Plugin
  # Import a Dangerfile.
  #
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @option opts
  # @param opts [Hash]
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#81
  def import_dangerfile(opts); end

  # Download a local or remote plugin and make it usable inside the Dangerfile.
  #
  # @param path_or_url [String] a local path or a https URL to the Ruby file to import
  #   a danger plugin from.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#60
  def import_plugin(path_or_url); end

  # Returns the name of the current SCM Provider being used.
  #
  # @return [Symbol] The name of the SCM Provider used for the active repository.
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#107
  def scm_provider; end

  private

  # Download a local or remote plugin or Dangerfile.
  # This method will not import the file for you, use plugin.import instead
  #
  # @param path_or_url [String] a local path or a https URL to the Ruby file to import
  #   a danger plugin from.
  # @return [String] The path to the downloaded Ruby file
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#218
  def download(path_or_url); end

  # Read and execute a Dangerfile from a gem.
  #
  # @param name [String] The name of the gem that contains a Dangerfile.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#149
  def import_dangerfile_from_gem(name); end

  # Download and execute a remote Dangerfile.
  #
  # @param slug [String] A slug that represents the repo where the Dangerfile is.
  # @param branch [String] A branch from repo where the Dangerfile is.
  # @param path [String] The path at the repo where Dangerfile is.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#169
  def import_dangerfile_from_github(slug, branch = T.unsafe(nil), path = T.unsafe(nil)); end

  # Download and execute a remote Dangerfile.
  #
  # @param slug_or_project_id [Int] The slug or id of the repo where the Dangerfile is.
  # @param branch [String] A branch from repo where the Dangerfile is.
  # @param path [String] The path at the repo where Dangerfile is.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#189
  def import_dangerfile_from_gitlab(slug_or_project_id, branch = T.unsafe(nil), path = T.unsafe(nil)); end

  # Read and execute a local Dangerfile.
  #
  # @param path [String] A path to a Dangerfile.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#135
  def import_dangerfile_from_path(path); end

  # Download and execute a remote Dangerfile.
  #
  # @param url [String] A https url where the Dangerfile is.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#202
  def import_dangerfile_from_url(url); end

  # Import one or more local plugins.
  #
  # @param path [String] The path to the file to import
  #   Can also be a pattern (./**/*plugin.rb)
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#253
  def import_local(path); end

  # Download a remote plugin and use it locally.
  #
  # @param url [String] https URL to the Ruby file to use
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#241
  def import_url(url); end

  # Raises an error when the given block does not register a plugin.
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#265
  def validate_file_contains_plugin!(file); end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_danger_plugin.rb#48
    def instance_name; end
  end
end

# source://danger//lib/danger/commands/dangerfile/gem.rb#5
class Danger::DangerfileGem < ::Danger::DangerfileCommand
  # @return [DangerfileGem] a new instance of DangerfileGem
  #
  # source://danger//lib/danger/commands/dangerfile/gem.rb#18
  def initialize(argv); end

  # source://danger//lib/danger/commands/dangerfile/gem.rb#37
  def run; end

  # source://danger//lib/danger/commands/dangerfile/gem.rb#28
  def validate!; end

  class << self
    # source://danger//lib/danger/commands/dangerfile/gem.rb#7
    def description; end
  end
end

# source://danger//lib/danger/danger_core/dangerfile_generator.rb#2
class Danger::DangerfileGenerator
  class << self
    # returns the string for a Dangerfile based on a folder's contents'
    #
    # source://danger//lib/danger/danger_core/dangerfile_generator.rb#4
    def create_dangerfile(_path, _ui); end
  end
end

# Handles interacting with GitHub inside a Dangerfile. Provides a few functions which wrap `pr_json` and also
# through a few standard functions to simplify your code.
#
# @example Warn when a PR is classed as work in progress
#
#   warn "PR is classed as Work in Progress" if github.pr_title.include? "[WIP]"
# @example Declare a PR to be simple to avoid specific Danger rules
#
#   declared_trivial = (github.pr_title + github.pr_body).include?("#trivial")
# @example Ensure that labels have been used on the PR
#
#   failure "Please add labels to this PR" if github.pr_labels.empty?
# @example Check if a user is in a specific GitHub org, and message them if so
#
#   unless github.api.organization_member?('danger', github.pr_author)
#   message "@#{github.pr_author} is not a contributor yet, would you like to join the Danger org?"
#   end
# @example Ensure there is a summary for a PR
#
#   failure "Please provide a summary in the Pull Request description" if github.pr_body.length < 5
# @example Only accept PRs to the develop branch
#
#   failure "Please re-submit this PR to develop, we may have already fixed your issue." if github.branch_for_base != "develop"
# @example Note when PRs don't reference a milestone, which goes away when it does
#
#   has_milestone = github.pr_json["milestone"] != nil
#   warn("This PR does not refer to an existing milestone", sticky: false) unless has_milestone
# @example Note when a PR cannot be manually merged, which goes away when you can
#
#   can_merge = github.pr_json["mergeable"]
#   warn("This PR cannot be merged yet.", sticky: false) unless can_merge
# @example Highlight when a celebrity makes a pull request
#
#   message "Welcome, Danger." if github.pr_author == "dangermcshane"
# @example Ensure that all PRs have an assignee
#
#   warn "This PR does not have any assignees yet." unless github.pr_json["assignee"]
# @example Send a message with links to a collection of specific files
#
#   if git.modified_files.include? "config/*.js"
#   config_files = git.modified_files.select { |path| path.include? "config/" }
#   message "This PR changes #{ github.html_link(config_files) }"
#   end
# @example Highlight with a clickable link if a Package.json is changed
#
#   warn "#{github.html_link("Package.json")} was edited." if git.modified_files.include? "Package.json"
# @example Note an issue with a particular line on a file using the #L[num] syntax, e.g. `#L23`
#
#   linter_json = `my_linter lint "file"`
#   results = JSON.parse linter_json
#   unless results.empty?
#   file, line, warning = result.first
#   warn "#{github.html_link("#{file}#L#{line}")} has linter issue: #{warning}."
#   end
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#75
class Danger::DangerfileGitHubPlugin < ::Danger::Plugin
  # @return [DangerfileGitHubPlugin] a new instance of DangerfileGitHubPlugin
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#83
  def initialize(dangerfile); end

  # Provides access to the GitHub API client used inside Danger. Making
  # it easy to use the GitHub API inside a Dangerfile.
  #
  # @return [Octokit::Client]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#200
  def api; end

  # The base commit to which the PR is going to be merged as a parent.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#175
  def base_commit; end

  # The branch to which the PR is going to be merged into.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#159
  def branch_for_base; end

  # The branch to which the PR is going to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#167
  def branch_for_head; end

  # Use to ignore inline messages which lay outside a diff's range, thereby not posting them in the main comment.
  # You can set hash to change behavior per each kinds. (ex. `{warning: true, error: false}`)
  #
  # @param or [Bool] [Hash<Symbol, Bool>] dismiss
  #   Ignore out of range inline messages, defaults to `true`
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#244
  def dismiss_out_of_range_messages(dismiss = T.unsafe(nil)); end

  # The head commit to which the PR is requesting to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#183
  def head_commit; end

  # Returns a list of HTML anchors for a file, or files in the head repository. An example would be:
  # `<a href='https://github.com/artsy/eigen/blob/561827e46167077b5e53515b4b7349b8ae04610b/file.txt'>file.txt</a>`. It returns a string of multiple anchors if passed an array.
  #
  # @param paths [String or Array<String>] A list of strings to convert to github anchors
  # @param full_path [Bool] Shows the full path as the link's text, defaults to `true`.
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#221
  def html_link(paths, full_path: T.unsafe(nil)); end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#135
  def mr_author; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#127
  def mr_body; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#192
  def mr_json; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#143
  def mr_labels; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#119
  def mr_title; end

  # The username of the author of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#135
  def pr_author; end

  # The body text of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#127
  def pr_body; end

  # The unified diff produced by Github for this PR
  # see [Unified diff](https://en.wikipedia.org/wiki/Diff_utility#Unified_format)
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#208
  def pr_diff; end

  # Whether the PR is a Draft.
  #
  # @return [Boolean]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#151
  def pr_draft?; end

  # The hash that represents the PR's JSON. For an example of what this looks like
  # see the [Danger Fixture'd one](https://raw.githubusercontent.com/danger/danger/master/spec/fixtures/github_api/pr_response.json).
  #
  # @return [Hash]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#192
  def pr_json; end

  # The labels assigned to the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#143
  def pr_labels; end

  # The title of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#119
  def pr_title; end

  # In Beta. Provides access to creating a GitHub Review instead of a typical GitHub comment.
  #
  # To use you announce the start of your review, and the end via the `start` and `submit` functions,
  # for example:
  #
  # github.review.start
  # github.review.fail(message)
  # github.review.warn(message)
  # github.review.message(message)
  # github.review.markdown(message)
  # github.review.submit
  #
  # @return [ReviewDSL]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#111
  def review; end

  private

  # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#260
  def create_link(href, text); end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#92
    def instance_name; end

    # So that this init can fail.
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_github_plugin.rb#77
    def new(dangerfile); end
  end
end

# Handles interacting with GitLab inside a Dangerfile. Provides a few functions which wrap `mr_json` and also
# through a few standard functions to simplify your code.
#
# @example Warn when an MR is classed as work in progress.
#
#   warn "MR is classed as Work in Progress" if gitlab.mr_title.include? "[WIP]"
# @example Declare a MR to be simple to avoid specific Danger rules.
#
#   declared_trivial = (gitlab.mr_title + gitlab.mr_body).include?("#trivial")
# @example Ensure that labels have been applied to the MR.
#
#   failure "Please add labels to this MR" if gitlab.mr_labels.empty?
# @example Ensure that all MRs have an assignee.
#
#   warn "This MR does not have any assignees yet." unless gitlab.mr_json["assignee"]
# @example Ensure there is a summary for a MR.
#
#   failure "Please provide a summary in the Merge Request description" if gitlab.mr_body.length < 5
# @example Only accept MRs to the develop branch.
#
#   failure "Please re-submit this MR to develop, we may have already fixed your issue." if gitlab.branch_for_merge != "develop"
# @example Note when MRs don't reference a milestone, make the warning stick around on subsequent runs
#
#   has_milestone = gitlab.mr_json["milestone"] != nil
#   warn("This MR does not refer to an existing milestone", sticky: true) unless has_milestone
# @example Note when a MR cannot be manually merged
#
#   can_merge = gitlab.mr_json["mergeable"]
#   warn("This MR cannot be merged yet.") unless can_merge
# @example Highlight when a celebrity makes a merge request.
#
#   message "Welcome, Danger." if gitlab.mr_author == "dangermcshane"
# @example Send a message with links to a collection of specific files.
#
#   if git.modified_files.include? "config/*.js"
#   config_files = git.modified_files.select { |path| path.include? "config/" }
#   message "This MR changes #{ gitlab.html_link(config_files) }"
#   end
# @example Highlight with a clickable link if a Package.json is changed.
#
#   warn "#{gitlab.html_link("Package.json")} was edited." if git.modified_files.include? "Package.json"
# @example Select a random group member as assignee if no assignee is selected
#
#   if gitlab.mr_json["assignee"].nil?
#   reviewer = gitlab.api.group_members(gitlab.api.merge_request_approvals(project_id, mr_id).to_hash["approver_groups"].first["group"]["id"]).sample
#   if gitlab.api.group_members(gitlab.api.merge_request_approvals(project_id, mr_id).to_hash["approver_groups"].first["group"]["id"]).length > 1
#   while reviewer.to_hash["id"] == gitlab.mr_json["author"]["id"] do
#   reviewer = gitlab.api.group_members(gitlab.api.merge_request_approvals(project_id, mr_id).to_hash["approver_groups"].first["group"]["id"]).sample
#   end
#   end
#   message "Reviewer roulete rolled for: #{reviewer.to_hash['name']} (@#{reviewer.to_hash['username']})"
#   gitlab.api.update_merge_request(project_id, mr_id, { assignee_id: reviewer.to_hash["id"] })
#   end
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#73
class Danger::DangerfileGitLabPlugin < ::Danger::Plugin
  # @return [DangerfileGitLabPlugin] a new instance of DangerfileGitLabPlugin
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#88
  def initialize(dangerfile); end

  # Provides access to the GitLab API client used inside Danger. Making
  # it easy to use the GitLab API inside a Dangerfile. See the gitlab
  # gem's [documentation](http://www.rubydoc.info/gems/gitlab/Gitlab/Client)
  # for accessible methods.
  #
  # @return [GitLab::Client]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#208
  def api; end

  # The base commit to which the MR is going to be merged as a parent
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#180
  def base_commit; end

  # The branch to which the MR is going to be merged into.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#164
  def branch_for_base; end

  # The branch to which the MR is going to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#172
  def branch_for_head; end

  # The branch to which the MR is going to be merged into
  #
  # @deprecated Please use {#branch_for_base} instead
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#156
  def branch_for_merge; end

  # Use to ignore inline messages which lay outside a diff's range, thereby not posting the comment.
  # You can set hash to change behavior per each kinds. (ex. `{warning: true, error: false}`)
  #
  # @param or [Bool] [Hash<Symbol, Bool>] dismiss
  #   Ignore out of range inline messages, defaults to `true`
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#255
  def dismiss_out_of_range_messages(dismiss = T.unsafe(nil)); end

  # The head commit to which the MR is requesting to be merged from
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#188
  def head_commit; end

  # Returns a list of HTML anchors for a file, or files in the head repository. An example would be:
  # `<a href='https://gitlab.com/artsy/eigen/blob/561827e46167077b5e53515b4b7349b8ae04610b/file.txt'>file.txt</a>`. It returns a string of multiple anchors if passed an array.
  #
  # @param paths [String or Array<String>] A list of strings to convert to gitlab anchors
  # @param full_path [Bool] Shows the full path as the link's text, defaults to `true`.
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#233
  def html_link(paths, full_path: T.unsafe(nil)); end

  # The username of the author of the Merge Request
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#114
  def mr_author; end

  # The body text of the Merge Request
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#106
  def mr_body; end

  # The array of changes
  #
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#139
  def mr_changes; end

  # The array of issues that this MR closes
  #
  # @return [Array<Gitlab::ObjectifiedHash>]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#147
  def mr_closes_issues; end

  # The unified diff produced by GitLab for this MR
  # see [Unified diff](https://en.wikipedia.org/wiki/Diff_utility#Unified_format)
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#131
  def mr_diff; end

  # The hash that represents the MR's JSON. See documentation for the
  # structure [here](http://docs.gitlab.com/ce/api/merge_requests.html#get-single-mr)
  #
  # @return [Hash]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#197
  def mr_json; end

  # The labels assigned to the Merge Request
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#122
  def mr_labels; end

  # The title of the Merge Request
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#98
  def mr_title; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#114
  def pr_author; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#106
  def pr_body; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#131
  def pr_diff; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#197
  def pr_json; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#122
  def pr_labels; end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#98
  def pr_title; end

  # Returns the web_url of the source project.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#216
  def repository_web_url; end

  private

  # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#271
  def create_link(href, text); end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#84
    def instance_name; end

    # So that this init can fail.
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_gitlab_plugin.rb#75
    def new(dangerfile); end
  end
end

# Handles interacting with git inside a Dangerfile. Providing access to files that have changed, and useful statistics. Also provides
# access to the commits in the form of [Git::Log](https://github.com/schacon/ruby-git/blob/master/lib/git/log.rb) objects.
#
# @example Do something to all new and edited markdown files
#
#   markdowns = (git.added_files + git.modified_files)
#   do_something markdowns.select{ |file| file.end_with? "md" }
# @example Don't allow a file to be deleted
#
#   deleted = git.deleted_files.include? "my/favourite.file"
#   failure "Don't delete my precious" if deleted
# @example Fail really big diffs
#
#   failure "We cannot handle the scale of this PR" if git.lines_of_code > 50_000
# @example Warn when there are merge commits in the diff
#
#   if git.commits.any? { |c| c.parents.count > 1 }
#   warn 'Please rebase to get rid of the merge commits in this PR'
#   end
# @example Warn when somebody tries to add nokogiri to the project
#
#   diff = git.diff_for_file("Gemfile.lock")
#   if diff && diff.patch =~ "nokogiri"
#   warn 'Please do not add nokogiri to the project. Thank you.'
#   end
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#39
class Danger::DangerfileGitPlugin < ::Danger::Plugin
  # @return [DangerfileGitPlugin] a new instance of DangerfileGitPlugin
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#47
  def initialize(dangerfile); end

  # Paths for files that were added during the diff
  #
  # @return [FileList<String>] an [Array] subclass
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#58
  def added_files; end

  # The log of commits inside the diff
  #
  # @return [Git::Log] from the gem `git`
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#122
  def commits; end

  # Paths for files that were removed during the diff
  #
  # @return [FileList<String>] an [Array] subclass
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#66
  def deleted_files; end

  # The overall lines of code removed in the diff
  #
  # @return [Fixnum]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#106
  def deletions; end

  # Whole diff
  #
  # @return [Git::Diff] from the gem `git`
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#90
  def diff; end

  # Details for a specific file in this diff
  #
  # @return [Git::Diff::DiffFile] from the gem `git`
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#130
  def diff_for_file(file); end

  # Statistics for a specific file in this diff
  #
  # @return [Hash] with keys `:insertions`, `:deletions` giving line counts, and `:before`, `:after` giving file contents, or nil if the file has no changes or does not exist
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#138
  def info_for_file(file); end

  # The overall lines of code added in the diff
  #
  # @return [Fixnum]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#114
  def insertions; end

  # The overall lines of code added/removed in the diff
  #
  # @return [Fixnum]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#98
  def lines_of_code; end

  # Paths for files that changed during the diff
  #
  # @return [FileList<String>] an [Array] subclass
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#74
  def modified_files; end

  # List of renamed files
  #
  # @return [Array<Hash>] with keys `:before` and `:after`
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#82
  def renamed_files; end

  # List of remote tags
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#155
  def tags; end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_git_plugin.rb#43
    def instance_name; end
  end
end

# source://danger//lib/danger/commands/dangerfile/init.rb#20
class Danger::DangerfileInit < ::Danger::DangerfileCommand
  # source://danger//lib/danger/commands/dangerfile/init.rb#24
  def run; end
end

# Handles interacting with local only plugin inside a Dangerfile.
# It is support plugin for dry_run command and does not expose any methods.
# But you can still use other plugins like git
#
# @example Check that added lines contains agreed form of words
#
#   git.diff.each do |chunk|
#   chunk.patch.lines.grep(/^\+/).each do |added_line|
#   if added_line.gsub!(/(?<cancel>cancel)(?<rest>[^l[[:space:]][[:punct:]]]+)/i, '>>\k<cancel>-l-\k<rest><<')
#   fail "Single 'L' for cancellation-alike words in '#{added_line}'"
#   end
#   end
#   end
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_local_only_plugin.rb#22
class Danger::DangerfileLocalOnlyPlugin < ::Danger::Plugin
  # @return [DangerfileLocalOnlyPlugin] a new instance of DangerfileLocalOnlyPlugin
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_local_only_plugin.rb#30
  def initialize(dangerfile); end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_local_only_plugin.rb#39
    def instance_name; end

    # So that this init can fail.
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_local_only_plugin.rb#24
    def new(dangerfile); end
  end
end

# Provides the feedback mechanism for Danger. Danger can keep track of
# messages, warnings, failure and post arbitrary markdown into a comment.
#
# The message within which Danger communicates back is amended on each run in a session.
#
# Each of `message`, `warn` and `fail` have a `sticky` flag, `false` by default, which
# when `true` means that the message will be crossed out instead of being removed.
# If it's not called again on subsequent runs.
#
# Each of `message`, `warn`, `fail` and `markdown` support multiple passed arguments
# message 'Hello', 'World', file: "Dangerfile", line: 1
# warn ['This', 'is', 'warning'], file: "Dangerfile", line: 1
# failure 'Ooops', 'bad bad error', sticky: false
# markdown '# And', '# Even', '# Markdown', file: "Dangerfile", line: 1
#
# By default, using `failure` would fail the corresponding build. Either via an API call, or
# via the return value for the danger command. Older code examples use `fail` which is an alias
# of `failure`, but the default Rubocop settings would have an issue with it.
#
# You can optionally add `file` and `line` to provide inline feedback on a PR in GitHub, note that
# only feedback inside the PR's diff will show up inline. Others will appear inside the main comment.
#
# It is possible to have Danger ignore specific warnings or errors by writing `Danger: Ignore "[warning/error text]"`.
#
# Sidenote: Messaging is the only plugin which adds functions to the root of the Dangerfile.
#
# @example Failing a build
#
#   failure "This build didn't pass tests"
#   failure "Ooops!", "Something bad happened"
#   failure ["This is example", "with array"]
# @example Failing a build, and note that on subsequent runs
#
#   failure("This build didn't pass tests", sticky: true)
# @example Passing a warning
#
#   warn "This build didn't pass linting"
#   warn "Hm...", "This is not really good"
#   warn ["Multiple warnings", "via array"]
# @example Displaying a markdown table
#
#   message = "### Proselint found issues\n\n"
#   message << "Line | Message | Severity |\n"
#   message << "| --- | ----- | ----- |\n"
#   message << "20 | No documentation | Error \n"
#   markdown message
#
#   markdown "### First issue", "### Second issue"
#   markdown ["### First issue", "### Second issue"]
# @example Adding an inline warning to a file
#
#   warn("You shouldn't use puts in your Dangerfile", file: "Dangerfile", line: 10)
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#70
class Danger::DangerfileMessagingPlugin < ::Danger::Plugin
  # @return [DangerfileMessagingPlugin] a new instance of DangerfileMessagingPlugin
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#71
  def initialize(dangerfile); end

  # Declares a CI blocking error
  #
  # @param message [String, Array<String>] The message to present to the user
  # @param sticky [Boolean] Whether the message should be kept after it was fixed,
  #   defaults to `false`.
  # @param file [String] Optional. Path to the file that the message is for.
  # @param line [String] Optional. The line in the file to present the message in.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#171
  def fail(*failures, **options); end

  # Declares a CI blocking error
  #
  # @param message [String, Array<String>] The message to present to the user
  # @param sticky [Boolean] Whether the message should be kept after it was fixed,
  #   defaults to `false`.
  # @param file [String] Optional. Path to the file that the message is for.
  # @param line [String] Optional. The line in the file to present the message in.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#171
  def failure(*failures, **options); end

  # Print markdown to below the table
  #
  # @param message [String, Array<String>] The markdown based message to be printed below the table
  # @param file [String] Optional. Path to the file that the message is for.
  # @param line [String] Optional. The line in the file to present the message in.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#98
  def markdown(*markdowns, **options); end

  # Print out a generate message on the PR
  #
  # @param message [String, Array<String>] The message to present to the user
  # @param sticky [Boolean] Whether the message should be kept after it was fixed,
  #   defaults to `false`.
  # @param file [String] Optional. Path to the file that the message is for.
  # @param line [String] Optional. The line in the file to present the message in.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#121
  def message(*messages, **options); end

  # A list of all messages passed to Danger, including
  # the markdowns.
  #
  # @return [Hash]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#191
  def status_report; end

  # A list of all violations passed to Danger, we don't
  # anticipate users of Danger needing to use this.
  #
  # @return [Hash]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#206
  def violation_report; end

  # Specifies a problem, but not critical
  #
  # @param message [String, Array<String>] The message to present to the user
  # @param sticky [Boolean] Whether the message should be kept after it was fixed,
  #   defaults to `false`.
  # @param file [String] Optional. Path to the file that the message is for.
  # @param line [String] Optional. The line in the file to present the message in.
  # @return [void]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#145
  def warn(*warnings, **options); end

  private

  # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#216
  def should_ignore_violation(message); end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_messaging_plugin.rb#83
    def instance_name; end
  end
end

# Handles interacting with VSTS inside a Dangerfile. Provides a few functions which wrap `pr_json` and also
# through a few standard functions to simplify your code.
#
# @example Warn when a PR is classed as work in progress
#
#   warn "PR is classed as Work in Progress" if vsts.pr_title.include? "[WIP]"
# @example Declare a PR to be simple to avoid specific Danger rules
#
#   declared_trivial = (vsts.pr_title + vsts.pr_body).include?("#trivial")
# @example Ensure there is a summary for a PR
#
#   failure "Please provide a summary in the Pull Request description" if vsts.pr_body.length < 5
# @example Only accept PRs to the develop branch
#
#   failure "Please re-submit this PR to develop, we may have already fixed your issue." if vsts.branch_for_base != "develop"
# @example Highlight when a celebrity makes a pull request
#
#   message "Welcome, Danger." if vsts.pr_author == "dangermcshane"
# @example Ensure that all PRs have an assignee
#
#   warn "This PR does not have any assignees yet." unless vsts.pr_json["reviewers"].length == 0
# @example Send a message with links to a collection of specific files
#
#   if git.modified_files.include? "config/*.js"
#   config_files = git.modified_files.select { |path| path.include? "config/" }
#   message "This PR changes #{ vsts.markdown_link(config_files) }"
#   end
# @example Highlight with a clickable link if a Package.json is changed
#
#   warn "#{vsts.markdown_link("Package.json")} was edited." if git.modified_files.include? "Package.json"
# @example Note an issue with a particular line on a file using the #L[num] syntax, e.g. `#L23`
#
#   linter_json = `my_linter lint "file"`
#   results = JSON.parse linter_json
#   unless results.empty?
#   file, line, warning = result.first
#   warn "#{vsts.markdown_link("#{file}#L#{line}")} has linter issue: #{warning}."
#   end
# @see danger/danger
#
# source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#55
class Danger::DangerfileVSTSPlugin < ::Danger::Plugin
  # @return [DangerfileVSTSPlugin] a new instance of DangerfileVSTSPlugin
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#70
  def initialize(dangerfile); end

  # The base commit to which the PR is going to be merged as a parent.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#139
  def base_commit; end

  # The branch to which the PR is going to be merged into.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#112
  def branch_for_base; end

  # The branch to which the PR is going to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#131
  def branch_for_head; end

  # The head commit to which the PR is requesting to be merged from.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#147
  def head_commit; end

  # Returns a list of Markdown links for a file, or files in the head repository.
  # It returns a string of multiple links if passed an array.
  #
  # @param paths [String or Array<String>] A list of strings to convert to Markdown links
  # @param full_path [Bool] Shows the full path as the link's text, defaults to `true`.
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#161
  def markdown_link(paths, full_path: T.unsafe(nil)); end

  # The username of the author of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#104
  def pr_author; end

  # The body text of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#95
  def pr_body; end

  # The body text of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#95
  def pr_description; end

  # The hash that represents the PR's JSON. For an example of what this looks like
  # see the [Danger Fixture'd one](https://raw.githubusercontent.com/danger/danger/master/spec/fixtures/vsts_api/pr_response.json).
  #
  # @return [Hash]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#79
  def pr_json; end

  # A href that represents the current PR
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#120
  def pr_link; end

  # The title of the Pull Request.
  #
  # @return [String]
  #
  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#87
  def pr_title; end

  private

  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#186
  def branch_name(key); end

  # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#182
  def create_markdown_link(href, text); end

  class << self
    # The instance name used in the Dangerfile
    #
    # @return [String]
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#66
    def instance_name; end

    # So that this init can fail.
    #
    # source://danger//lib/danger/danger_core/plugins/dangerfile_vsts_plugin.rb#57
    def new(dangerfile); end
  end
end

# ### CI Setup
# DotCi is a layer on top of jenkins. So, if you're using DotCi, you're hosting your own environment.
#
# ### Token Setup
#
# #### GitHub
# As you own the machine, it's up to you to add the environment variable for the `DANGER_GITHUB_API_TOKEN`.
#
# source://danger//lib/danger/ci_source/dotci.rb#14
class Danger::DotCi < ::Danger::CI
  # @return [DotCi] a new instance of DotCi
  #
  # source://danger//lib/danger/ci_source/dotci.rb#29
  def initialize(env); end

  # source://danger//lib/danger/ci_source/dotci.rb#23
  def supported_request_sources; end

  class << self
    # source://danger//lib/danger/ci_source/dotci.rb#36
    def pull_request_id(env); end

    # source://danger//lib/danger/ci_source/dotci.rb#40
    def repo_url(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/dotci.rb#15
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/dotci.rb#19
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# With Drone you run the docker images yourself, so you will want to add `bundle exec danger` at the end of
# your `.drone.yml`.
#
#  ```shell
#   build:
#     image: golang
#     commands:
#       - ...
#       - bundle exec danger
#  ```
#
# ### Token Setup
#
# As this is self-hosted, you will need to expose the `DANGER_GITHUB_API_TOKEN` as a secret to your
# builds:
#
# Drone secrets: http://readme.drone.io/usage/secret-guide/
# NOTE: This is a new syntax in DroneCI 0.6+
#
# ```yml
#   build:
#     image: golang
#     secrets:
#       - DANGER_GITHUB_API_TOKEN
#     commands:
#       - ...
#       - bundle exec danger
# ```
#
# source://danger//lib/danger/ci_source/drone.rb#36
class Danger::Drone < ::Danger::CI
  # @return [Drone] a new instance of Drone
  #
  # source://danger//lib/danger/ci_source/drone.rb#49
  def initialize(env); end

  # source://danger//lib/danger/ci_source/drone.rb#45
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/drone.rb#37
    def validates_as_ci?(env); end

    # Check if this build is valid for CI with drone 0.6 or later
    #
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/drone.rb#62
    def validates_as_ci_post_06?(env); end

    # Checks if this build is valid for CI with drone 0.5 or earlier
    #
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/drone.rb#67
    def validates_as_ci_pre_06?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/drone.rb#41
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/commands/dry_run.rb#5
class Danger::DryRun < ::Danger::Runner
  # @return [DryRun] a new instance of DryRun
  #
  # source://danger//lib/danger/commands/dry_run.rb#15
  def initialize(argv); end

  # source://danger//lib/danger/commands/dry_run.rb#36
  def run; end

  # source://danger//lib/danger/commands/dry_run.rb#29
  def validate!; end

  class << self
    # source://danger//lib/danger/commands/dry_run.rb#9
    def options; end
  end
end

# source://danger//lib/danger/helpers/emoji_mapper.rb#2
class Danger::EmojiMapper
  # @return [EmojiMapper] a new instance of EmojiMapper
  #
  # source://danger//lib/danger/helpers/emoji_mapper.rb#24
  def initialize(template); end

  # source://danger//lib/danger/helpers/emoji_mapper.rb#33
  def from_type(type); end

  # source://danger//lib/danger/helpers/emoji_mapper.rb#28
  def map(emoji); end

  private

  # Returns the value of attribute template.
  #
  # source://danger//lib/danger/helpers/emoji_mapper.rb#39
  def template; end
end

# source://danger//lib/danger/helpers/emoji_mapper.rb#3
Danger::EmojiMapper::DATA = T.let(T.unsafe(nil), Hash)

# source://danger//lib/danger/helpers/emoji_mapper.rb#18
Danger::EmojiMapper::TYPE_TO_EMOJI = T.let(T.unsafe(nil), Hash)

# source://danger//lib/danger/danger_core/environment_manager.rb#5
class Danger::EnvironmentManager
  # @return [EnvironmentManager] a new instance of EnvironmentManager
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#28
  def initialize(env, ui = T.unsafe(nil), danger_id = T.unsafe(nil)); end

  # Returns the value of attribute ci_source.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def ci_source; end

  # Sets the attribute ci_source
  #
  # @param value the value to set the attribute ci_source to.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def ci_source=(_arg0); end

  # source://danger//lib/danger/danger_core/environment_manager.rb#62
  def clean_up; end

  # Returns the value of attribute danger_id.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def danger_id; end

  # Sets the attribute danger_id
  #
  # @param value the value to set the attribute danger_id to.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def danger_id=(_arg0); end

  # source://danger//lib/danger/danger_core/environment_manager.rb#56
  def ensure_danger_branches_are_setup; end

  # source://danger//lib/danger/danger_core/environment_manager.rb#52
  def fill_environment_vars; end

  # source://danger//lib/danger/danger_core/environment_manager.rb#72
  def meta_info_for_base; end

  # source://danger//lib/danger/danger_core/environment_manager.rb#68
  def meta_info_for_head; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#48
  def pr?; end

  # source://danger//lib/danger/danger_core/environment_manager.rb#76
  def raise_error_for_no_request_source(env, ui); end

  # Returns the value of attribute request_source.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def request_source; end

  # Sets the attribute request_source
  #
  # @param value the value to set the attribute request_source to.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def request_source=(_arg0); end

  # Returns the value of attribute scm.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def scm; end

  # Sets the attribute scm
  #
  # @param value the value to set the attribute scm to.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def scm=(_arg0); end

  # Returns the value of attribute ui.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def ui; end

  # Sets the attribute ui
  #
  # @param value the value to set the attribute ui to.
  #
  # source://danger//lib/danger/danger_core/environment_manager.rb#6
  def ui=(_arg0); end

  private

  # source://danger//lib/danger/danger_core/environment_manager.rb#99
  def extract_title_and_subtitle_from_source(repo_url); end

  # source://danger//lib/danger/danger_core/environment_manager.rb#87
  def get_repo_source(repo_url); end

  # source://danger//lib/danger/danger_core/environment_manager.rb#121
  def travis_note; end

  # source://danger//lib/danger/danger_core/environment_manager.rb#112
  def ui_display_no_request_source_error_message(ui, env, title, subtitle); end

  class << self
    # @return [String] danger's default base branch
    #
    # source://danger//lib/danger/danger_core/environment_manager.rb#24
    def danger_base_branch; end

    # @return [String] danger's default head branch
    #
    # source://danger//lib/danger/danger_core/environment_manager.rb#19
    def danger_head_branch; end

    # Finds a Danger::CI class based on the ENV
    #
    # source://danger//lib/danger/danger_core/environment_manager.rb#9
    def local_ci_source(env); end

    # Uses the current Danger::CI subclass, and sees if it is a PR
    #
    # @return [Boolean]
    #
    # source://danger//lib/danger/danger_core/environment_manager.rb#14
    def pr?(env); end
  end
end

# source://danger//lib/danger/danger_core/executor.rb#2
class Danger::Executor
  # @return [Executor] a new instance of Executor
  #
  # source://danger//lib/danger/danger_core/executor.rb#3
  def initialize(system_env); end

  # source://danger//lib/danger/danger_core/executor.rb#7
  def run(env: T.unsafe(nil), dm: T.unsafe(nil), cork: T.unsafe(nil), base: T.unsafe(nil), head: T.unsafe(nil), dangerfile_path: T.unsafe(nil), danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), fail_on_errors: T.unsafe(nil), fail_if_no_pr: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # source://danger//lib/danger/danger_core/executor.rb#43
  def validate!(cork, fail_if_no_pr: T.unsafe(nil)); end

  private

  # source://danger//lib/danger/danger_core/executor.rb#77
  def base_branch(user_specified_base_branch); end

  # source://danger//lib/danger/danger_core/executor.rb#85
  def commit_request(ci_name); end

  # source://danger//lib/danger/danger_core/executor.rb#81
  def head_branch(user_specified_head_branch); end

  # Returns the value of attribute system_env.
  #
  # source://danger//lib/danger/danger_core/executor.rb#50
  def system_env; end

  # Could we find a CI source at all?
  #
  # source://danger//lib/danger/danger_core/executor.rb#53
  def validate_ci!; end

  # Could we determine that the CI source is inside a PR?
  #
  # source://danger//lib/danger/danger_core/executor.rb#60
  def validate_pr!(cork, fail_if_no_pr); end
end

# source://danger//lib/danger/core_ext/file_list.rb#4
class Danger::FileList
  include ::Comparable
  include ::Danger::Helpers::ArraySubclass

  # Information about pattern: http://ruby-doc.org/core-2.2.0/File.html#method-c-fnmatch
  # e.g. "**/something.*" for any file called something with any extension
  #
  # @return [Boolean]
  #
  # source://danger//lib/danger/core_ext/file_list.rb#9
  def include?(pattern); end
end

# source://danger//lib/danger/ci_source/support/find_repo_info_from_logs.rb#4
class Danger::FindRepoInfoFromLogs
  # @return [FindRepoInfoFromLogs] a new instance of FindRepoInfoFromLogs
  #
  # source://danger//lib/danger/ci_source/support/find_repo_info_from_logs.rb#5
  def initialize(github_host, remote_logs); end

  # source://danger//lib/danger/ci_source/support/find_repo_info_from_logs.rb#10
  def call; end

  private

  # Returns the value of attribute github_host.
  #
  # source://danger//lib/danger/ci_source/support/find_repo_info_from_logs.rb#20
  def github_host; end

  # source://danger//lib/danger/ci_source/support/find_repo_info_from_logs.rb#26
  def regexp; end

  # source://danger//lib/danger/ci_source/support/find_repo_info_from_logs.rb#22
  def remote; end

  # Returns the value of attribute remote_logs.
  #
  # source://danger//lib/danger/ci_source/support/find_repo_info_from_logs.rb#20
  def remote_logs; end
end

# source://danger//lib/danger/ci_source/support/find_repo_info_from_url.rb#4
class Danger::FindRepoInfoFromURL
  # @return [FindRepoInfoFromURL] a new instance of FindRepoInfoFromURL
  #
  # source://danger//lib/danger/ci_source/support/find_repo_info_from_url.rb#22
  def initialize(url); end

  # source://danger//lib/danger/ci_source/support/find_repo_info_from_url.rb#26
  def call; end

  private

  # Returns the value of attribute url.
  #
  # source://danger//lib/danger/ci_source/support/find_repo_info_from_url.rb#41
  def url; end
end

# source://danger//lib/danger/ci_source/support/find_repo_info_from_url.rb#5
Danger::FindRepoInfoFromURL::REGEXP = T.let(T.unsafe(nil), Regexp)

# Regex used to extract info from Bitbucket server URLs, as they use a quite different format
#
# source://danger//lib/danger/ci_source/support/find_repo_info_from_url.rb#14
Danger::FindRepoInfoFromURL::REGEXPBB = T.let(T.unsafe(nil), Regexp)

# source://danger//lib/danger.rb#21
Danger::GEM_NAME = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/plugin_support/gems_resolver.rb#4
class Danger::GemsResolver
  # @return [GemsResolver] a new instance of GemsResolver
  #
  # source://danger//lib/danger/plugin_support/gems_resolver.rb#5
  def initialize(gem_names); end

  # Returns an Array of paths (plugin lib file paths) and gems (of metadata)
  #
  # source://danger//lib/danger/plugin_support/gems_resolver.rb#11
  def call; end

  private

  # source://danger//lib/danger/plugin_support/gems_resolver.rb#29
  def all_gems_metadata; end

  # source://danger//lib/danger/plugin_support/gems_resolver.rb#33
  def create_gemfile_from_gem_names; end

  # Returns the value of attribute dir.
  #
  # source://danger//lib/danger/plugin_support/gems_resolver.rb#27
  def dir; end

  # source://danger//lib/danger/plugin_support/gems_resolver.rb#65
  def gem_metadata(gem); end

  # Returns the value of attribute gem_names.
  #
  # source://danger//lib/danger/plugin_support/gems_resolver.rb#27
  def gem_names; end

  # source://danger//lib/danger/plugin_support/gems_resolver.rb#53
  def gems; end

  # The paths are relative to dir.
  #
  # source://danger//lib/danger/plugin_support/gems_resolver.rb#45
  def paths; end

  # source://danger//lib/danger/plugin_support/gems_resolver.rb#57
  def real_gems; end
end

# ### CI Setup
#
# You can use `danger/danger` Action in your `.github/workflows/xxx.yml`.
# And so, you can use GITHUB_TOKEN secret as `DANGER_GITHUB_API_TOKEN` environment variable.
#
#  ```yml
#  ...
#    steps:
#      - uses: actions/checkout@v3
#      - uses: danger/danger@master
#        env:
#          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#  ```
#
# source://danger//lib/danger/ci_source/github_actions.rb#18
class Danger::GitHubActions < ::Danger::CI
  # @return [GitHubActions] a new instance of GitHubActions
  #
  # source://danger//lib/danger/ci_source/github_actions.rb#32
  def initialize(env); end

  # source://danger//lib/danger/ci_source/github_actions.rb#28
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/github_actions.rb#19
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/github_actions.rb#23
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# Install dependencies and add a danger step to your .gitlab-ci.yml:
#
# ```yml
# before_script:
#  - bundle install
# danger:
#   script:
#    - bundle exec danger
# ```
#
# ### Token Setup
#
# Add the `DANGER_GITLAB_API_TOKEN` to your pipeline env variables if you
# are hosting your code on GitLab. If you are using GitLab as a mirror
# for the purpose of CI/CD, while hosting your repo on GitHub, set the
# `DANGER_GITHUB_API_TOKEN` as well as the project repo URL to
# `DANGER_PROJECT_REPO_URL`.
#
# source://danger//lib/danger/ci_source/gitlab_ci.rb#27
class Danger::GitLabCI < ::Danger::CI
  # @return [GitLabCI] a new instance of GitLabCI
  #
  # source://danger//lib/danger/ci_source/gitlab_ci.rb#77
  def initialize(env); end

  # source://danger//lib/danger/ci_source/gitlab_ci.rb#82
  def supported_request_sources; end

  class << self
    # source://danger//lib/danger/ci_source/gitlab_ci.rb#40
    def determine_pull_or_merge_request_id(env); end

    # source://danger//lib/danger/ci_source/gitlab_ci.rb#69
    def slug_from(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/gitlab_ci.rb#28
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/gitlab_ci.rb#32
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/scm_source/git_repo.rb#6
class Danger::GitRepo
  # Returns the value of attribute diff.
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#7
  def diff; end

  # Sets the attribute diff
  #
  # @param value the value to set the attribute diff to.
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#7
  def diff=(_arg0); end

  # source://danger//lib/danger/scm_source/git_repo.rb#9
  def diff_for_folder(folder, from: T.unsafe(nil), to: T.unsafe(nil), lookup_top_level: T.unsafe(nil)); end

  # source://danger//lib/danger/scm_source/git_repo.rb#73
  def ensure_commitish_exists!(commitish); end

  # source://danger//lib/danger/scm_source/git_repo.rb#81
  def ensure_commitish_exists_on_branch!(branch, commitish); end

  # source://danger//lib/danger/scm_source/git_repo.rb#51
  def exec(string); end

  # Returns the value of attribute folder.
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#7
  def folder; end

  # Sets the attribute folder
  #
  # @param value the value to set the attribute folder to.
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#7
  def folder=(_arg0); end

  # source://danger//lib/danger/scm_source/git_repo.rb#61
  def head_commit; end

  # Returns the value of attribute log.
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#7
  def log; end

  # Sets the attribute log
  #
  # @param value the value to set the attribute log to.
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#7
  def log=(_arg0); end

  # source://danger//lib/danger/scm_source/git_repo.rb#69
  def origins; end

  # source://danger//lib/danger/scm_source/git_repo.rb#25
  def renamed_files; end

  # source://danger//lib/danger/scm_source/git_repo.rb#65
  def tags; end

  private

  # @return [Boolean]
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#117
  def commit_exists?(sha1); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#164
  def commit_is_ref?(commit); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#121
  def commit_not_exists?(sha1); end

  # source://danger//lib/danger/scm_source/git_repo.rb#160
  def commits_in_branch_count(from, to); end

  # Compare given paths as realpath. Return true if both are same.
  # `git rev-parse --show-toplevel` returns a path resolving symlink. In rspec, given path can
  # be a temporary directory's path created under a symlinked directory `/var`.
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#184
  def compare_path(path1, path2); end

  # source://danger//lib/danger/scm_source/git_repo.rb#109
  def default_env; end

  # @raise [ArgumentError]
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#168
  def find_git_top_level_if_needed!(folder, lookup_top_level); end

  # source://danger//lib/danger/scm_source/git_repo.rb#125
  def find_merge_base(repo, from, to); end

  # source://danger//lib/danger/scm_source/git_repo.rb#140
  def find_merge_base_with_incremental_fetch(repo, from, to); end

  # source://danger//lib/danger/scm_source/git_repo.rb#105
  def git_fetch_branch_to_depth(branch, depth); end

  # source://danger//lib/danger/scm_source/git_repo.rb#101
  def git_in_depth_fetch; end

  # source://danger//lib/danger/scm_source/git_repo.rb#156
  def possible_merge_base(repo, from, to); end

  # source://danger//lib/danger/scm_source/git_repo.rb#113
  def raise_if_we_cannot_find_the_commit(commitish); end
end

# source://danger//lib/danger/commands/local_helpers/http_cache.rb#4
class Danger::HTTPCache
  # @return [HTTPCache] a new instance of HTTPCache
  #
  # source://danger//lib/danger/commands/local_helpers/http_cache.rb#7
  def initialize(cache_file = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://danger//lib/danger/commands/local_helpers/http_cache.rb#24
  def delete(key); end

  # source://danger//lib/danger/commands/local_helpers/http_cache.rb#34
  def entry_has_expired(entry, ttl); end

  # Returns the value of attribute expires_in.
  #
  # source://danger//lib/danger/commands/local_helpers/http_cache.rb#5
  def expires_in; end

  # source://danger//lib/danger/commands/local_helpers/http_cache.rb#13
  def read(key); end

  # source://danger//lib/danger/commands/local_helpers/http_cache.rb#28
  def write(key, value); end
end

# source://danger//lib/danger/helpers/message_groups_array_helper.rb#2
module Danger::Helpers; end

# source://danger//lib/danger/helpers/array_subclass.rb#3
module Danger::Helpers::ArraySubclass
  include ::Comparable

  # source://danger//lib/danger/helpers/array_subclass.rb#6
  def initialize(array); end

  # source://danger//lib/danger/helpers/array_subclass.rb#34
  def <=>(other); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/helpers/array_subclass.rb#10
  def kind_of?(compare_class); end

  # source://danger//lib/danger/helpers/array_subclass.rb#16
  def method_missing(name, *args, &block); end

  # source://danger//lib/danger/helpers/array_subclass.rb#26
  def to_a; end

  # source://danger//lib/danger/helpers/array_subclass.rb#30
  def to_ary; end

  private

  # Returns the value of attribute __array__.
  #
  # source://danger//lib/danger/helpers/array_subclass.rb#42
  def __array__; end

  # Sets the attribute __array__
  #
  # @param value the value to set the attribute __array__ to.
  #
  # source://danger//lib/danger/helpers/array_subclass.rb#42
  def __array__=(_arg0); end

  # source://danger//lib/danger/helpers/array_subclass.rb#44
  def dummy; end

  # source://danger//lib/danger/helpers/array_subclass.rb#48
  def respond_to_method(name, *args, &block); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/helpers/array_subclass.rb#22
  def respond_to_missing?(name, include_all); end
end

# source://danger//lib/danger/helpers/comments_helper.rb#8
module Danger::Helpers::CommentsHelper
  include ::Danger::Helpers::CommentsParsingHelper

  # source://danger//lib/danger/helpers/comments_helper.rb#81
  def apply_template(tables: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil), template: T.unsafe(nil), request_source: T.unsafe(nil)); end

  # source://danger//lib/danger/helpers/comments_helper.rb#96
  def generate_comment(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), previous_violations: T.unsafe(nil), danger_id: T.unsafe(nil), template: T.unsafe(nil)); end

  # source://danger//lib/danger/helpers/comments_helper.rb#149
  def generate_description(warnings: T.unsafe(nil), errors: T.unsafe(nil), template: T.unsafe(nil)); end

  # source://danger//lib/danger/helpers/comments_helper.rb#129
  def generate_inline_comment_body(emoji, message, danger_id: T.unsafe(nil), resolved: T.unsafe(nil), template: T.unsafe(nil)); end

  # source://danger//lib/danger/helpers/comments_helper.rb#141
  def generate_inline_markdown_body(markdown, danger_id: T.unsafe(nil), template: T.unsafe(nil)); end

  # resolved is essentially reserved for future use - eventually we might
  # have some nice generic resolved-thing going :)
  #
  # source://danger//lib/danger/helpers/comments_helper.rb#111
  def generate_message_group_comment(message_group:, danger_id: T.unsafe(nil), resolved: T.unsafe(nil), template: T.unsafe(nil)); end

  # !@group Extension points
  # Produces a markdown link to the file the message points to
  #
  # request_source implementations are invited to override this method with their
  # vendor specific link.
  #
  # @param message [Violation or Markdown]
  # @param Should [Bool] hide any generated link created
  # @return [String] The Markdown compatible link
  #
  # source://danger//lib/danger/helpers/comments_helper.rb#27
  def markdown_link_to_message(message, hide_link); end

  # source://danger//lib/danger/helpers/comments_helper.rb#13
  def markdown_parser(text); end

  # !@group Extension points
  # Determine whether two messages are equivalent
  #
  # request_source implementations are invited to override this method.
  # This is mostly here to enable sources to detect when inlines change only in their
  # commit hash and not in content per-se. since the link is implementation dependant
  # so should be the comparison.
  #
  # @param m1 [Violation or Markdown]
  # @param m2 [Violation or Markdown]
  # @return [Boolean] whether they represent the same message
  #
  # source://danger//lib/danger/helpers/comments_helper.rb#45
  def messages_are_equivalent(m1, m2); end

  # source://danger//lib/danger/helpers/comments_helper.rb#49
  def process_markdown(violation, hide_link = T.unsafe(nil)); end

  # source://danger//lib/danger/helpers/comments_helper.rb#162
  def random_compliment; end

  # source://danger//lib/danger/helpers/comments_helper.rb#59
  def table(name, emoji, violations, all_previous_violations, template: T.unsafe(nil)); end

  private

  # source://danger//lib/danger/helpers/comments_helper.rb#169
  def pluralize(string, count); end

  # source://danger//lib/danger/helpers/comments_helper.rb#173
  def truncate(string); end
end

# source://danger//lib/danger/helpers/comments_parsing_helper.rb#3
module Danger::Helpers::CommentsParsingHelper
  # source://danger//lib/danger/helpers/comments_parsing_helper.rb#26
  def parse_comment(comment); end

  # !@group Extension points
  # Produces a message-like from a row in a comment table
  #
  # @param row [String] The content of the row in the table
  # @return [Violation or Markdown] the extracted message
  #
  # source://danger//lib/danger/helpers/comments_parsing_helper.rb#11
  def parse_message_from_row(row); end

  # source://danger//lib/danger/helpers/comments_parsing_helper.rb#15
  def parse_tables_from_comment(comment); end

  # source://danger//lib/danger/helpers/comments_parsing_helper.rb#43
  def table_kind_from_title(title); end

  # source://danger//lib/danger/helpers/comments_parsing_helper.rb#19
  def violations_from_table(table); end

  private

  # @return [Boolean]
  #
  # source://danger//lib/danger/helpers/comments_parsing_helper.rb#58
  def danger_table?(table); end
end

# source://danger//lib/danger/helpers/comments_parsing_helper.rb#55
Danger::Helpers::CommentsParsingHelper::GITHUB_OLD_REGEX = T.let(T.unsafe(nil), Regexp)

# source://danger//lib/danger/helpers/comments_parsing_helper.rb#56
Danger::Helpers::CommentsParsingHelper::NEW_REGEX = T.let(T.unsafe(nil), Regexp)

# source://danger//lib/danger/helpers/message_groups_array_helper.rb#3
module Danger::Helpers::MessageGroupsArrayHelper
  # source://danger//lib/danger/helpers/message_groups_array_helper.rb#18
  def counts; end

  # source://danger//lib/danger/helpers/message_groups_array_helper.rb#14
  def fake_errors_array; end

  # source://danger//lib/danger/helpers/message_groups_array_helper.rb#10
  def fake_warnings_array; end
end

# source://danger//lib/danger/helpers/message_groups_array_helper.rb#4
class Danger::Helpers::MessageGroupsArrayHelper::FakeArray < ::Struct
  # Returns the value of attribute count
  #
  # @return [Object] the current value of count
  def count; end

  # Sets the attribute count
  #
  # @param value [Object] the value to set the attribute count to.
  # @return [Object] the newly set value
  def count=(_); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/helpers/message_groups_array_helper.rb#5
  def empty?; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://danger//lib/danger/commands/init.rb#7
class Danger::Init < ::Danger::Runner
  # @return [Init] a new instance of Init
  #
  # source://danger//lib/danger/commands/init.rb#20
  def initialize(argv); end

  # source://danger//lib/danger/commands/init.rb#231
  def circle_token; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/commands/init.rb#141
  def considered_an_oss_repo?; end

  # source://danger//lib/danger/commands/init.rb#145
  def current_repo_slug; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/commands/init.rb#293
  def darwin?; end

  # source://danger//lib/danger/commands/init.rb#271
  def info; end

  # source://danger//lib/danger/commands/init.rb#261
  def note_about_clicking_links; end

  # source://danger//lib/danger/commands/init.rb#28
  def run; end

  # source://danger//lib/danger/commands/init.rb#110
  def setup_access_token; end

  # source://danger//lib/danger/commands/init.rb#156
  def setup_danger_ci; end

  # source://danger//lib/danger/commands/init.rb#56
  def setup_dangerfile; end

  # source://danger//lib/danger/commands/init.rb#80
  def setup_github_account; end

  # source://danger//lib/danger/commands/init.rb#44
  def show_todo_state; end

  # source://danger//lib/danger/commands/init.rb#284
  def thanks; end

  # source://danger//lib/danger/commands/init.rb#221
  def travis_token; end

  # Returns the value of attribute ui.
  #
  # source://danger//lib/danger/commands/init.rb#11
  def ui; end

  # Sets the attribute ui
  #
  # @param value the value to set the attribute ui to.
  #
  # source://danger//lib/danger/commands/init.rb#11
  def ui=(_arg0); end

  # source://danger//lib/danger/commands/init.rb#214
  def unsure_ci; end

  # source://danger//lib/danger/commands/init.rb#254
  def unsure_token; end

  # source://danger//lib/danger/commands/init.rb#196
  def uses_circle; end

  # source://danger//lib/danger/commands/init.rb#183
  def uses_travis; end

  class << self
    # source://danger//lib/danger/commands/init.rb#13
    def options; end
  end
end

# source://danger//lib/danger/commands/init_helpers/interviewer.rb#2
class Danger::Interviewer
  # @return [Interviewer] a new instance of Interviewer
  #
  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#5
  def initialize(cork_board); end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#55
  def ask_with_answers(question, possible_answers); end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#17
  def green_bang; end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#29
  def header(title); end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#35
  def link(url); end

  # Returns the value of attribute no_delay.
  #
  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#3
  def no_delay; end

  # Sets the attribute no_delay
  #
  # @param value the value to set the attribute no_delay to.
  #
  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#3
  def no_delay=(_arg0); end

  # Returns the value of attribute no_waiting.
  #
  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#3
  def no_waiting; end

  # Sets the attribute no_waiting
  #
  # @param value the value to set the attribute no_waiting to.
  #
  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#3
  def no_waiting=(_arg0); end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#39
  def pause(time); end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#21
  def red_bang; end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#49
  def run_command(command, output_command = T.unsafe(nil)); end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#25
  def say(output); end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#9
  def show_prompt; end

  # Returns the value of attribute ui.
  #
  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#3
  def ui; end

  # Sets the attribute ui
  #
  # @param value the value to set the attribute ui to.
  #
  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#3
  def ui=(_arg0); end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#43
  def wait_for_return; end

  # source://danger//lib/danger/commands/init_helpers/interviewer.rb#13
  def yellow_bang; end
end

# ### CI Setup
# Ah Jenkins, so many memories. So, if you're using Jenkins, you're hosting your own environment.
#
# #### GitHub
# You will want to be using the [GitHub pull request builder plugin](https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin)
# in order to ensure that you have the build environment set up for PR integration.
#
# With that set up, you can edit your job to add `bundle exec danger` at the build action.
#
# ##### Pipeline
# If your're using [pipelines](https://jenkins.io/solutions/pipeline/) you should be using the [GitHub branch source plugin](https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Branch+Source+Plugin)
# for easy setup and handling of PRs.
#
# After you've set up the plugin, add a `sh 'bundle exec danger'` line in your pipeline script and make sure that build PRs is enabled.
#
# #### GitLab
# You will want to be using the [GitLab Plugin](https://github.com/jenkinsci/gitlab-plugin)
# in order to ensure that you have the build environment set up for MR integration.
#
# With that set up, you can edit your job to add `bundle exec danger` at the build action.
#
# #### General
#
# People occasionally see issues with Danger not classing your CI runs as a PR, to give you visibility
# the Jenkins side of Danger expects to see one of these env vars:
# - ghprbPullId
# - CHANGE_ID
# - gitlabMergeRequestIid
# - gitlabMergeRequestId
#
# ### Token Setup
#
# #### GitHub
# As you own the machine, it's up to you to add the environment variable for the `DANGER_GITHUB_API_TOKEN`.
#
# #### GitLab
# As you own the machine, it's up to you to add the environment variable for the `DANGER_GITLAB_API_TOKEN`.
#
# source://danger//lib/danger/ci_source/jenkins.rb#49
class Danger::Jenkins < ::Danger::CI
  # @raise [EnvNotFound]
  # @return [Jenkins] a new instance of Jenkins
  #
  # source://danger//lib/danger/ci_source/jenkins.rb#76
  def initialize(env); end

  # Returns the value of attribute project_url.
  #
  # source://danger//lib/danger/ci_source/jenkins.rb#50
  def project_url; end

  # Sets the attribute project_url
  #
  # @param value the value to set the attribute project_url to.
  #
  # source://danger//lib/danger/ci_source/jenkins.rb#50
  def project_url=(_arg0); end

  # source://danger//lib/danger/ci_source/jenkins.rb#67
  def supported_request_sources; end

  class << self
    # source://danger//lib/danger/ci_source/jenkins.rb#113
    def pull_request_id(env); end

    # source://danger//lib/danger/ci_source/jenkins.rb#85
    def repo_slug(repo_url); end

    # source://danger//lib/danger/ci_source/jenkins.rb#125
    def repo_url(env); end

    # source://danger//lib/danger/ci_source/jenkins.rb#93
    def slug_bitbucket(repo_url); end

    # source://danger//lib/danger/ci_source/jenkins.rb#108
    def slug_fallback(repo_url); end

    # source://danger//lib/danger/ci_source/jenkins.rb#103
    def slug_http(repo_url); end

    # source://danger//lib/danger/ci_source/jenkins.rb#98
    def slug_ssh(repo_url); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/jenkins.rb#58
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/jenkins.rb#62
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/ci_source/jenkins.rb#52
class Danger::Jenkins::EnvNotFound < ::StandardError
  # @return [EnvNotFound] a new instance of EnvNotFound
  #
  # source://danger//lib/danger/ci_source/jenkins.rb#53
  def initialize; end
end

# source://danger//lib/danger/commands/local.rb#10
class Danger::Local < ::Danger::Runner
  # @return [Local] a new instance of Local
  #
  # source://danger//lib/danger/commands/local.rb#22
  def initialize(argv); end

  # source://danger//lib/danger/commands/local.rb#46
  def run; end

  # source://danger//lib/danger/commands/local.rb#39
  def validate!; end

  private

  #  this method is a duplicate of Commands::PR#configure_octokit
  # - worth a refactor sometime?
  #
  # source://danger//lib/danger/commands/local.rb#71
  def configure_octokit(cache_dir); end

  class << self
    # source://danger//lib/danger/commands/local.rb#14
    def options; end
  end
end

# ignore
#
# source://danger//lib/danger/ci_source/local_git_repo.rb#18
class Danger::LocalGitRepo < ::Danger::CI
  # @return [LocalGitRepo] a new instance of LocalGitRepo
  #
  # source://danger//lib/danger/ci_source/local_git_repo.rb#46
  def initialize(env = T.unsafe(nil)); end

  # Returns the value of attribute base_commit.
  #
  # source://danger//lib/danger/ci_source/local_git_repo.rb#19
  def base_commit; end

  # Sets the attribute base_commit
  #
  # @param value the value to set the attribute base_commit to.
  #
  # source://danger//lib/danger/ci_source/local_git_repo.rb#19
  def base_commit=(_arg0); end

  # source://danger//lib/danger/ci_source/local_git_repo.rb#29
  def git; end

  # Returns the value of attribute head_commit.
  #
  # source://danger//lib/danger/ci_source/local_git_repo.rb#19
  def head_commit; end

  # Sets the attribute head_commit
  #
  # @param value the value to set the attribute head_commit to.
  #
  # source://danger//lib/danger/ci_source/local_git_repo.rb#19
  def head_commit=(_arg0); end

  # source://danger//lib/danger/ci_source/local_git_repo.rb#33
  def run_git(command); end

  # source://danger//lib/danger/ci_source/local_git_repo.rb#37
  def supported_request_sources; end

  private

  # source://danger//lib/danger/ci_source/local_git_repo.rb#113
  def commits; end

  # source://danger//lib/danger/ci_source/local_git_repo.rb#87
  def find_pull_request(env); end

  # source://danger//lib/danger/ci_source/local_git_repo.rb#76
  def find_remote_info(env); end

  # Returns the value of attribute found_pull_request.
  #
  # source://danger//lib/danger/ci_source/local_git_repo.rb#65
  def found_pull_request; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/local_git_repo.rb#105
  def given_pull_request_url?(env); end

  # source://danger//lib/danger/ci_source/local_git_repo.rb#71
  def missing_remote_error_message; end

  # source://danger//lib/danger/ci_source/local_git_repo.rb#67
  def raise_error_for_missing_remote; end

  # Returns the value of attribute remote_info.
  #
  # source://danger//lib/danger/ci_source/local_git_repo.rb#65
  def remote_info; end

  # source://danger//lib/danger/ci_source/local_git_repo.rb#109
  def sha; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/local_git_repo.rb#21
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/local_git_repo.rb#25
    def validates_as_pr?(_env); end
  end
end

# ### CI Setup
#
# For setting up LocalOnlyGitRepo there is not much needed. Either `--base` and `--head` need to be specified or
# origin/master is expected for base and HEAD for head
#
# source://danger//lib/danger/ci_source/local_only_git_repo.rb#12
class Danger::LocalOnlyGitRepo < ::Danger::CI
  # @return [LocalOnlyGitRepo] a new instance of LocalOnlyGitRepo
  #
  # source://danger//lib/danger/ci_source/local_only_git_repo.rb#38
  def initialize(env = T.unsafe(nil)); end

  # Returns the value of attribute base_commit.
  #
  # source://danger//lib/danger/ci_source/local_only_git_repo.rb#13
  def base_commit; end

  # Sets the attribute base_commit
  #
  # @param value the value to set the attribute base_commit to.
  #
  # source://danger//lib/danger/ci_source/local_only_git_repo.rb#13
  def base_commit=(_arg0); end

  # source://danger//lib/danger/ci_source/local_only_git_repo.rb#26
  def git; end

  # Returns the value of attribute head_commit.
  #
  # source://danger//lib/danger/ci_source/local_only_git_repo.rb#13
  def head_commit; end

  # Sets the attribute head_commit
  #
  # @param value the value to set the attribute head_commit to.
  #
  # source://danger//lib/danger/ci_source/local_only_git_repo.rb#13
  def head_commit=(_arg0); end

  # source://danger//lib/danger/ci_source/local_only_git_repo.rb#30
  def run_git(command); end

  # source://danger//lib/danger/ci_source/local_only_git_repo.rb#34
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/local_only_git_repo.rb#18
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/local_only_git_repo.rb#22
    def validates_as_pr?(_env); end
  end
end

# source://danger//lib/danger/ci_source/local_only_git_repo.rb#16
Danger::LocalOnlyGitRepo::BASE_VAR = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/ci_source/local_only_git_repo.rb#15
Danger::LocalOnlyGitRepo::HEAD_VAR = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/ci_source/support/local_pull_request.rb#2
class Danger::LocalPullRequest
  # @return [LocalPullRequest] a new instance of LocalPullRequest
  #
  # source://danger//lib/danger/ci_source/support/local_pull_request.rb#5
  def initialize(log_line); end

  # Returns the value of attribute pull_request_id.
  #
  # source://danger//lib/danger/ci_source/support/local_pull_request.rb#3
  def pull_request_id; end

  # Returns the value of attribute sha.
  #
  # source://danger//lib/danger/ci_source/support/local_pull_request.rb#3
  def sha; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/support/local_pull_request.rb#10
  def valid?; end
end

# source://danger//lib/danger/commands/local_helpers/local_setup.rb#2
class Danger::LocalSetup
  # @return [LocalSetup] a new instance of LocalSetup
  #
  # source://danger//lib/danger/commands/local_helpers/local_setup.rb#5
  def initialize(dangerfile, cork); end

  # Returns the value of attribute cork.
  #
  # source://danger//lib/danger/commands/local_helpers/local_setup.rb#3
  def cork; end

  # Returns the value of attribute dm.
  #
  # source://danger//lib/danger/commands/local_helpers/local_setup.rb#3
  def dm; end

  # source://danger//lib/danger/commands/local_helpers/local_setup.rb#10
  def setup(verbose: T.unsafe(nil)); end
end

# source://danger//lib/danger/danger_core/messages/markdown.rb#6
class Danger::Markdown < ::Danger::BaseMessage
  # @return [Markdown] a new instance of Markdown
  #
  # source://danger//lib/danger/danger_core/messages/markdown.rb#7
  def initialize(message, file = T.unsafe(nil), line = T.unsafe(nil)); end

  # source://danger//lib/danger/danger_core/messages/markdown.rb#35
  def <=>(other); end

  # source://danger//lib/danger/danger_core/messages/markdown.rb#11
  def ==(other); end

  # source://danger//lib/danger/danger_core/messages/markdown.rb#20
  def hash; end

  # source://danger//lib/danger/danger_core/messages/markdown.rb#27
  def to_s; end
end

# source://danger//lib/danger/danger_core/message_aggregator.rb#7
class Danger::MessageAggregator
  # @return [MessageAggregator] a new instance of MessageAggregator
  #
  # source://danger//lib/danger/danger_core/message_aggregator.rb#12
  def initialize(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil)); end

  # aggregates the messages into an array of MessageGroups
  #
  # @return [[MessageGroup]]
  #
  # source://danger//lib/danger/danger_core/message_aggregator.rb#23
  def aggregate; end

  class << self
    # source://danger//lib/danger/danger_core/message_aggregator.rb#8
    def aggregate(*args); end
  end
end

# source://danger//lib/danger/danger_core/message_group.rb#4
class Danger::MessageGroup
  # @return [MessageGroup] a new instance of MessageGroup
  #
  # source://danger//lib/danger/danger_core/message_group.rb#5
  def initialize(file: T.unsafe(nil), line: T.unsafe(nil)); end

  # Adds a message to the group.
  #
  # @param message [Markdown, Violation] the message to add
  #
  # source://danger//lib/danger/danger_core/message_group.rb#29
  def <<(message); end

  # Returns the value of attribute file.
  #
  # source://danger//lib/danger/danger_core/message_group.rb#51
  def file; end

  # Returns the value of attribute line.
  #
  # source://danger//lib/danger/danger_core/message_group.rb#51
  def line; end

  # source://danger//lib/danger/danger_core/message_group.rb#64
  def markdowns; end

  # Merges two `MessageGroup`s that represent the same line of code
  # In future, perhaps `MessageGroup` will be able to represent a group of
  # messages for multiple lines.
  #
  # @raise [ArgumentError]
  #
  # source://danger//lib/danger/danger_core/message_group.rb#21
  def merge(other); end

  # The list of messages in this group. This list will be sorted in decreasing
  # order of severity (error, warning, message, markdown)
  #
  # source://danger//lib/danger/danger_core/message_group.rb#47
  def messages; end

  # Returns whether this `MessageGroup` is for the same line of code as
  #   `other`, taking which file they are in to account.
  #
  # @param other [MessageGroup, Markdown, Violation]
  # @return [Boolean] whether this `MessageGroup` is for the same line of code
  #
  # source://danger//lib/danger/danger_core/message_group.rb#14
  def same_line?(other); end

  # :errors_count
  #
  # @return a hash of statistics. Currently only :warnings_count and
  #
  # source://danger//lib/danger/danger_core/message_group.rb#55
  def stats; end
end

# source://danger//lib/danger/ci_source/support/no_pull_request.rb#2
class Danger::NoPullRequest
  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/support/no_pull_request.rb#3
  def valid?; end
end

# source://danger//lib/danger/ci_source/support/no_repo_info.rb#2
class Danger::NoRepoInfo
  # Returns the value of attribute id.
  #
  # source://danger//lib/danger/ci_source/support/no_repo_info.rb#3
  def id; end

  # Returns the value of attribute slug.
  #
  # source://danger//lib/danger/ci_source/support/no_repo_info.rb#3
  def slug; end
end

# source://danger//lib/danger/commands/pr.rb#10
class Danger::PR < ::Danger::Runner
  # @return [PR] a new instance of PR
  #
  # source://danger//lib/danger/commands/pr.rb#23
  def initialize(argv); end

  # source://danger//lib/danger/commands/pr.rb#54
  def run; end

  # source://danger//lib/danger/commands/pr.rb#44
  def validate!; end

  private

  # source://danger//lib/danger/commands/pr.rb#78
  def configure_octokit(cache_dir); end

  class << self
    # source://danger//lib/danger/commands/pr.rb#14
    def options; end
  end
end

# source://danger//lib/danger/plugin_support/plugin.rb#2
class Danger::Plugin
  # @return [Plugin] a new instance of Plugin
  #
  # source://danger//lib/danger/plugin_support/plugin.rb#3
  def initialize(dangerfile); end

  # Since we have a reference to the Dangerfile containing all the information
  # We need to redirect the self calls to the Dangerfile
  #
  # source://danger//lib/danger/plugin_support/plugin.rb#21
  def method_missing(method_sym, *arguments, **keyword_arguments, &block); end

  private

  # When using `danger local --pry`, every plugin had an unreasonable
  # amount of text output due to the Dangerfile reference in every
  # plugin. So, it is filtered out. Users will start out in the context
  # of the Dangerfile, and can view it by just typing `self` into the REPL.
  #
  # source://danger//lib/danger/plugin_support/plugin.rb#48
  def pretty_print_instance_variables; end

  class << self
    # source://danger//lib/danger/plugin_support/plugin.rb#29
    def all_plugins; end

    # source://danger//lib/danger/plugin_support/plugin.rb#33
    def clear_external_plugins; end

    # @private
    #
    # source://danger//lib/danger/plugin_support/plugin.rb#37
    def inherited(plugin); end

    # source://danger//lib/danger/plugin_support/plugin.rb#7
    def instance_name; end
  end
end

# source://danger//lib/danger/plugin_support/plugin_file_resolver.rb#4
class Danger::PluginFileResolver
  # Takes an array of files, gems or nothing, then resolves them into
  # paths that should be sent into the documentation parser
  #
  # @return [PluginFileResolver] a new instance of PluginFileResolver
  #
  # source://danger//lib/danger/plugin_support/plugin_file_resolver.rb#7
  def initialize(references); end

  # When given existing paths, map to absolute & existing paths
  # When given a list of gems, resolve for list of gems
  # When empty, imply you want to test the current lib folder as a plugin
  #
  # source://danger//lib/danger/plugin_support/plugin_file_resolver.rb#14
  def resolve; end

  private

  # Returns the value of attribute refs.
  #
  # source://danger//lib/danger/plugin_support/plugin_file_resolver.rb#28
  def refs; end
end

# source://danger//lib/danger/commands/plugins/plugin_json.rb#5
class Danger::PluginJSON < ::CLAide::Command::Plugins
  # @return [PluginJSON] a new instance of PluginJSON
  #
  # source://danger//lib/danger/commands/plugins/plugin_json.rb#11
  def initialize(argv); end

  # Returns the value of attribute cork.
  #
  # source://danger//lib/danger/commands/plugins/plugin_json.rb#9
  def cork; end

  # Sets the attribute cork
  #
  # @param value the value to set the attribute cork to.
  #
  # source://danger//lib/danger/commands/plugins/plugin_json.rb#9
  def cork=(_arg0); end

  # source://danger//lib/danger/commands/plugins/plugin_json.rb#26
  def run; end
end

# source://danger//lib/danger/commands/plugins/plugin_lint.rb#6
class Danger::PluginLint < ::CLAide::Command::Plugins
  # @return [PluginLint] a new instance of PluginLint
  #
  # source://danger//lib/danger/commands/plugins/plugin_lint.rb#12
  def initialize(argv); end

  # Returns the value of attribute cork.
  #
  # source://danger//lib/danger/commands/plugins/plugin_lint.rb#10
  def cork; end

  # Sets the attribute cork
  #
  # @param value the value to set the attribute cork to.
  #
  # source://danger//lib/danger/commands/plugins/plugin_lint.rb#10
  def cork=(_arg0); end

  # source://danger//lib/danger/commands/plugins/plugin_lint.rb#36
  def run; end

  class << self
    # source://danger//lib/danger/commands/plugins/plugin_lint.rb#30
    def options; end
  end
end

# source://danger//lib/danger/plugin_support/plugin_linter.rb#2
class Danger::PluginLinter
  # @return [PluginLinter] a new instance of PluginLinter
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#22
  def initialize(json); end

  # Returns the value of attribute errors.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#20
  def errors; end

  # Sets the attribute errors
  #
  # @param value the value to set the attribute errors to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#20
  def errors=(_arg0); end

  # Did the linter pass/fail?
  #
  # @return [Boolean]
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#53
  def failed?; end

  # Returns the value of attribute json.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#20
  def json; end

  # Sets the attribute json
  #
  # @param value the value to set the attribute json to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#20
  def json=(_arg0); end

  # Lints the current JSON, looking at:
  # * Class rules
  # * Method rules
  # * Attribute rules
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#33
  def lint; end

  # Prints a summary of the errors and warnings.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#59
  def print_summary(ui); end

  # Returns the value of attribute warnings.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#20
  def warnings; end

  # Sets the attribute warnings
  #
  # @param value the value to set the attribute warnings to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#20
  def warnings=(_arg0); end

  private

  # Runs the rule, if it fails then additional metadata
  # is added to the rule (for printing later) and it's
  # added to either `warnings` or `errors`.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#146
  def apply_rules(json, type, rules); end

  # Rules that apply to a class
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#93
  def class_rules; end

  # Generates a link to see an example of said rule
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#132
  def link(ref); end

  # Rules that apply to individual methods, and attributes
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#112
  def method_rules; end
end

# An internal class that is used to represent a rule for the linter.
#
# source://danger//lib/danger/plugin_support/plugin_linter.rb#4
class Danger::PluginLinter::Rule
  # @return [Rule] a new instance of Rule
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#7
  def initialize(modifier, ref, title, description, function); end

  # Returns the value of attribute description.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def description; end

  # Sets the attribute description
  #
  # @param value the value to set the attribute description to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def description=(_arg0); end

  # Returns the value of attribute function.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def function; end

  # Sets the attribute function
  #
  # @param value the value to set the attribute function to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def function=(_arg0); end

  # Returns the value of attribute metadata.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def metadata; end

  # Sets the attribute metadata
  #
  # @param value the value to set the attribute metadata to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def metadata=(_arg0); end

  # Returns the value of attribute modifier.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def modifier; end

  # Sets the attribute modifier
  #
  # @param value the value to set the attribute modifier to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def modifier=(_arg0); end

  # source://danger//lib/danger/plugin_support/plugin_linter.rb#15
  def object_applied_to; end

  # Returns the value of attribute ref.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def ref; end

  # Sets the attribute ref
  #
  # @param value the value to set the attribute ref to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def ref=(_arg0); end

  # Returns the value of attribute title.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def title; end

  # Sets the attribute title
  #
  # @param value the value to set the attribute title to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def title=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://danger//lib/danger/plugin_support/plugin_linter.rb#5
  def type=(_arg0); end
end

# source://danger//lib/danger/plugin_support/plugin_parser.rb#34
class Danger::PluginParser
  # @return [PluginParser] a new instance of PluginParser
  #
  # source://danger//lib/danger/plugin_support/plugin_parser.rb#37
  def initialize(paths, verbose = T.unsafe(nil)); end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#159
  def attribute_parser(gem_path, attribute); end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#71
  def classes_in_file; end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#106
  def method_params(method); end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#126
  def method_parser(gem_path, meth); end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#91
  def method_return_string(meth); end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#62
  def parse; end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#75
  def plugins_from_classes(classes); end

  # Returns the value of attribute registry.
  #
  # source://danger//lib/danger/plugin_support/plugin_parser.rb#35
  def registry; end

  # Sets the attribute registry
  #
  # @param value the value to set the attribute registry to.
  #
  # source://danger//lib/danger/plugin_support/plugin_parser.rb#35
  def registry=(_arg0); end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#49
  def setup_yard(verbose); end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#166
  def to_h(classes); end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#79
  def to_json; end

  # source://danger//lib/danger/plugin_support/plugin_parser.rb#84
  def to_json_string; end
end

# source://danger//lib/danger/commands/plugins/plugin_readme.rb#7
class Danger::PluginReadme < ::CLAide::Command::Plugins
  # @return [PluginReadme] a new instance of PluginReadme
  #
  # source://danger//lib/danger/commands/plugins/plugin_readme.rb#13
  def initialize(argv); end

  # Returns the value of attribute cork.
  #
  # source://danger//lib/danger/commands/plugins/plugin_readme.rb#11
  def cork; end

  # Sets the attribute cork
  #
  # @param value the value to set the attribute cork to.
  #
  # source://danger//lib/danger/commands/plugins/plugin_readme.rb#11
  def cork=(_arg0); end

  # Returns the value of attribute json.
  #
  # source://danger//lib/danger/commands/plugins/plugin_readme.rb#11
  def json; end

  # Sets the attribute json
  #
  # @param value the value to set the attribute json to.
  #
  # source://danger//lib/danger/commands/plugins/plugin_readme.rb#11
  def json=(_arg0); end

  # Returns the value of attribute markdown.
  #
  # source://danger//lib/danger/commands/plugins/plugin_readme.rb#11
  def markdown; end

  # Sets the attribute markdown
  #
  # @param value the value to set the attribute markdown to.
  #
  # source://danger//lib/danger/commands/plugins/plugin_readme.rb#11
  def markdown=(_arg0); end

  # source://danger//lib/danger/commands/plugins/plugin_readme.rb#29
  def run; end
end

# source://danger//lib/danger/commands/local_helpers/pry_setup.rb#2
class Danger::PrySetup
  # @return [PrySetup] a new instance of PrySetup
  #
  # source://danger//lib/danger/commands/local_helpers/pry_setup.rb#3
  def initialize(cork); end

  # source://danger//lib/danger/commands/local_helpers/pry_setup.rb#7
  def setup_pry(dangerfile_path, command); end

  private

  # Returns the value of attribute cork.
  #
  # source://danger//lib/danger/commands/local_helpers/pry_setup.rb#20
  def cork; end

  # source://danger//lib/danger/commands/local_helpers/pry_setup.rb#24
  def validate_pry_available(command); end
end

# source://danger//lib/danger/commands/local_helpers/pry_setup.rb#22
Danger::PrySetup::DANGERFILE_COPY = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/ci_source/support/pull_request_finder.rb#8
class Danger::PullRequestFinder
  # @return [PullRequestFinder] a new instance of PullRequestFinder
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#9
  def initialize(specific_pull_request_id, repo_slug = T.unsafe(nil), remote: T.unsafe(nil), git_logs: T.unsafe(nil), remote_url: T.unsafe(nil)); end

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#17
  def call(env: T.unsafe(nil)); end

  private

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#170
  def api_url; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#99
  def both_present?; end

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#136
  def client(env); end

  # @return [String] Log line of most recent merged Pull Request
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#40
  def find_pull_request(env); end

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#95
  def find_remote_pull_request(env); end

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#178
  def find_scm_provider(remote_url); end

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#62
  def generate_remote_pull_request(remote_pull_request); end

  # Returns the value of attribute git_logs.
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#25
  def git_logs; end

  # @return [String] Log line of format: "Merge pull request #42"
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#104
  def most_recent_merged_pull_request; end

  # @return [String] Log line of format: "description (#42)"
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#109
  def most_recent_squash_and_merged_pull_request; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#124
  def only_merged_pull_request_present?; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#130
  def only_squash_and_merged_pull_request_present?; end

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#113
  def pick_the_most_recent_one_from_two_matches; end

  # @return [String] "#42"
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#58
  def pull_request_ref; end

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#31
  def raise_pull_request_not_found!(_pull_request); end

  # Returns the value of attribute remote.
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#25
  def remote; end

  # Returns the value of attribute remote_url.
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#25
  def remote_url; end

  # Returns the value of attribute repo_slug.
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#25
  def repo_slug; end

  # Returns the value of attribute specific_pull_request_id.
  #
  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#25
  def specific_pull_request_id; end

  # source://danger//lib/danger/ci_source/support/pull_request_finder.rb#27
  def to_boolean(maybe_string); end
end

# source://danger//lib/danger/ci_source/support/remote_pull_request.rb#2
class Danger::RemotePullRequest
  # @return [RemotePullRequest] a new instance of RemotePullRequest
  #
  # source://danger//lib/danger/ci_source/support/remote_pull_request.rb#5
  def initialize(pull_request_id, head, base); end

  # Returns the value of attribute base.
  #
  # source://danger//lib/danger/ci_source/support/remote_pull_request.rb#3
  def base; end

  # Returns the value of attribute head.
  #
  # source://danger//lib/danger/ci_source/support/remote_pull_request.rb#3
  def head; end

  # Returns the value of attribute pull_request_id.
  #
  # source://danger//lib/danger/ci_source/support/remote_pull_request.rb#3
  def pull_request_id; end

  # Returns the value of attribute sha.
  #
  # source://danger//lib/danger/ci_source/support/remote_pull_request.rb#3
  def sha; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/ci_source/support/remote_pull_request.rb#11
  def valid?; end
end

# source://danger//lib/danger/ci_source/support/repo_info.rb#2
class Danger::RepoInfo
  # @return [RepoInfo] a new instance of RepoInfo
  #
  # source://danger//lib/danger/ci_source/support/repo_info.rb#5
  def initialize(slug, id); end

  # Returns the value of attribute id.
  #
  # source://danger//lib/danger/ci_source/support/repo_info.rb#3
  def id; end

  # Returns the value of attribute slug.
  #
  # source://danger//lib/danger/ci_source/support/repo_info.rb#3
  def slug; end
end

# source://danger//lib/danger/request_sources/request_source.rb#4
module Danger::RequestSources; end

# source://danger//lib/danger/request_sources/bitbucket_cloud.rb#7
class Danger::RequestSources::BitbucketCloud < ::Danger::RequestSources::RequestSource
  include ::Danger::Helpers::CommentsParsingHelper
  include ::Danger::Helpers::CommentsHelper

  # @return [BitbucketCloud] a new instance of BitbucketCloud
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#23
  def initialize(ci_source, environment); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#164
  def delete_old_comments(danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#46
  def fetch_details; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#42
  def host; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#66
  def organisation; end

  # Returns the value of attribute pr_json.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#9
  def pr_json; end

  # Sets the attribute pr_json
  #
  # @param value the value to set the attribute pr_json to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#9
  def pr_json=(_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#38
  def scm; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#50
  def setup_danger_branches; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#140
  def update_inline_comments_for_kind!(kind, messages, danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#97
  def update_pr_by_line!(message_groups:, danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#70
  def update_pull_request!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#34
  def validates_as_api_source?; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#29
  def validates_as_ci?; end

  class << self
    # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#11
    def env_vars; end

    # source://danger//lib/danger/request_sources/bitbucket_cloud.rb#19
    def optional_env_vars; end
  end
end

# source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#7
class Danger::RequestSources::BitbucketCloudAPI
  # @return [BitbucketCloudAPI] a new instance of BitbucketCloudAPI
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#11
  def initialize(repo_slug, pull_request_id, branch_name, environment); end

  # Returns the value of attribute access_token.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def access_token; end

  # Sets the attribute access_token
  #
  # @param value the value to set the attribute access_token to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def access_token=(_arg0); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#41
  def credentials_given?; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#70
  def delete_comment(id); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#56
  def fetch_comments; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#51
  def fetch_pr_json; end

  # Returns the value of attribute host.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def host=(_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#21
  def initialize_my_uuid(uuid); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#32
  def inspect; end

  # Returns the value of attribute my_uuid.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#9
  def my_uuid; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#75
  def post_comment(text, file: T.unsafe(nil), line: T.unsafe(nil)); end

  # Returns the value of attribute project.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def project; end

  # Sets the attribute project
  #
  # @param value the value to set the attribute project to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def project=(_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#47
  def pull_request(*_arg0); end

  # Returns the value of attribute pull_request_id.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def pull_request_id; end

  # Sets the attribute pull_request_id
  #
  # @param value the value to set the attribute pull_request_id to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def pull_request_id=(_arg0); end

  # Returns the value of attribute slug.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def slug; end

  # Sets the attribute slug
  #
  # @param value the value to set the attribute slug to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#8
  def slug=(_arg0); end

  private

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#89
  def base_url(version); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#170
  def credentials_not_available; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#156
  def delete(uri); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#176
  def error_fetching_json(url, status_code); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#107
  def fetch_access_token(environment); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#124
  def fetch_json(uri); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#102
  def fetch_pr_from_branch(branch_name); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#141
  def post(uri, body); end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#93
  def pr_api_endpoint; end

  # source://danger//lib/danger/request_sources/bitbucket_cloud_api.rb#97
  def prs_api_url(branch_name); end
end

# source://danger//lib/danger/request_sources/bitbucket_server.rb#8
class Danger::RequestSources::BitbucketServer < ::Danger::RequestSources::RequestSource
  include ::Danger::Helpers::CommentsParsingHelper
  include ::Danger::Helpers::CommentsHelper

  # @return [BitbucketServer] a new instance of BitbucketServer
  #
  # source://danger//lib/danger/request_sources/bitbucket_server.rb#31
  def initialize(ci_source, environment); end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#198
  def added_lines(file); end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#134
  def delete_old_comments(danger_id: T.unsafe(nil)); end

  # Returns the value of attribute dismiss_out_of_range_messages.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server.rb#10
  def dismiss_out_of_range_messages; end

  # Sets the attribute dismiss_out_of_range_messages
  #
  # @param value the value to set the attribute dismiss_out_of_range_messages to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server.rb#10
  def dismiss_out_of_range_messages=(_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#57
  def fetch_details; end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#194
  def file_diff(file); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/bitbucket_server.rb#187
  def find_position_in_diff?(file, line); end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#53
  def host; end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#159
  def inline_violations_group(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#140
  def main_violations_group(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#85
  def organisation; end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#61
  def pr_diff; end

  # Returns the value of attribute pr_json.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server.rb#10
  def pr_json; end

  # Sets the attribute pr_json
  #
  # @param value the value to set the attribute pr_json to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server.rb#10
  def pr_json=(_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#49
  def scm; end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#65
  def setup_danger_branches; end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#178
  def update_pr_build_status(status, build_job_link, description); end

  # source://danger//lib/danger/request_sources/bitbucket_server.rb#89
  def update_pull_request!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/bitbucket_server.rb#45
  def validates_as_api_source?; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/bitbucket_server.rb#40
  def validates_as_ci?; end

  class << self
    # source://danger//lib/danger/request_sources/bitbucket_server.rb#12
    def env_vars; end

    # source://danger//lib/danger/request_sources/bitbucket_server.rb#20
    def optional_env_vars; end
  end
end

# source://danger//lib/danger/request_sources/bitbucket_server_api.rb#8
class Danger::RequestSources::BitbucketServerAPI
  # @return [BitbucketServerAPI] a new instance of BitbucketServerAPI
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#11
  def initialize(project, slug, pull_request_id, environment); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#32
  def credentials_given?; end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#55
  def delete_comment(id, version); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#50
  def fetch_last_comments; end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#45
  def fetch_pr_diff; end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#40
  def fetch_pr_json; end

  # Returns the value of attribute host.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def host=(_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#24
  def inspect; end

  # Returns the value of attribute key.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def key=(_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#60
  def post_comment(text); end

  # Returns the value of attribute pr_api_endpoint.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def pr_api_endpoint; end

  # Sets the attribute pr_api_endpoint
  #
  # @param value the value to set the attribute pr_api_endpoint to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def pr_api_endpoint=(_arg0); end

  # Returns the value of attribute project.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def project; end

  # Sets the attribute project
  #
  # @param value the value to set the attribute project to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def project=(_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#36
  def pull_request(*_arg0); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#66
  def update_pr_build_status(status, changeset, build_job_link, description); end

  # Returns the value of attribute verify_ssl.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def verify_ssl; end

  # Sets the attribute verify_ssl
  #
  # @param value the value to set the attribute verify_ssl to.
  #
  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#9
  def verify_ssl=(_arg0); end

  private

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#119
  def build_status_body(status, build_job_link, description); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#104
  def delete(uri); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#78
  def fetch_json(uri); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#112
  def http(uri); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#87
  def post(uri, body); end

  # source://danger//lib/danger/request_sources/bitbucket_server_api.rb#74
  def use_ssl; end
end

# Provides ability for Danger to interact with Atlassian's Code Insights API in order to provide code quality
# reports along with inline comments for specific lines in specific files.
#  See https://developer.atlassian.com/server/bitbucket/how-tos/code-insights/ for more details.
#
# Currently this functionality is implemented only for Bitbucket Server request source.
#
# source://danger//lib/danger/request_sources/code_insights_api.rb#11
class Danger::RequestSources::CodeInsightsAPI
  # @return [CodeInsightsAPI] a new instance of CodeInsightsAPI
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#14
  def initialize(project, slug, environment); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#133
  def annotation_endpoint_at_commit(commit); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#38
  def delete_report(commit); end

  # Returns the value of attribute host.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def host=(_arg0); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#26
  def inspect; end

  # Returns the value of attribute logo_url.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def logo_url; end

  # Sets the attribute logo_url
  #
  # @param value the value to set the attribute logo_url to.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def logo_url=(_arg0); end

  # Returns the value of attribute password.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def password; end

  # Sets the attribute password
  #
  # @param value the value to set the attribute password to.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def password=(_arg0); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#86
  def post_annotations(commit, inline_warnings, inline_errors, inline_messages); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#63
  def put_report(commit, inline_errors_count); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#34
  def ready?; end

  # Returns the value of attribute report_description.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def report_description; end

  # Sets the attribute report_description
  #
  # @param value the value to set the attribute report_description to.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def report_description=(_arg0); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#129
  def report_endpoint_at_commit(commit); end

  # Returns the value of attribute report_key.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def report_key; end

  # Sets the attribute report_key
  #
  # @param value the value to set the attribute report_key to.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def report_key=(_arg0); end

  # Returns the value of attribute report_title.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def report_title; end

  # Sets the attribute report_title
  #
  # @param value the value to set the attribute report_title to.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def report_title=(_arg0); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#54
  def send_report(commit, inline_warnings, inline_errors, inline_messages); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#137
  def use_ssl; end

  # Returns the value of attribute username.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def username; end

  # Sets the attribute username
  #
  # @param value the value to set the attribute username to.
  #
  # source://danger//lib/danger/request_sources/code_insights_api.rb#12
  def username=(_arg0); end

  # source://danger//lib/danger/request_sources/code_insights_api.rb#120
  def violation_hash_with_severity(violation, severity); end
end

# source://danger//lib/danger/request_sources/github/github.rb#12
class Danger::RequestSources::GitHub < ::Danger::RequestSources::RequestSource
  include ::Danger::Helpers::CommentsParsingHelper
  include ::Danger::Helpers::CommentsHelper

  # @return [GitHub] a new instance of GitHub
  #
  # source://danger//lib/danger/request_sources/github/github.rb#25
  def initialize(ci_source, environment); end

  # Returns the value of attribute api_url.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def api_url; end

  # Sets the attribute api_url
  #
  # @param value the value to set the attribute api_url to.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def api_url=(_arg0); end

  # source://danger//lib/danger/request_sources/github/github.rb#64
  def client; end

  # Get rid of the previously posted comment, to only have the latest one
  #
  # source://danger//lib/danger/request_sources/github/github.rb#245
  def delete_old_comments!(except: T.unsafe(nil), danger_id: T.unsafe(nil)); end

  # Returns the value of attribute dismiss_out_of_range_messages.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def dismiss_out_of_range_messages; end

  # Sets the attribute dismiss_out_of_range_messages
  #
  # @param value the value to set the attribute dismiss_out_of_range_messages to.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def dismiss_out_of_range_messages=(_arg0); end

  # source://danger//lib/danger/request_sources/github/github.rb#464
  def dismiss_out_of_range_messages_for(kind); end

  # source://danger//lib/danger/request_sources/github/github.rb#116
  def fetch_details; end

  # source://danger//lib/danger/request_sources/github/github.rb#130
  def fetch_issue_details(pr_json); end

  # @return [String] A URL to the specific file, ready to be downloaded
  #
  # source://danger//lib/danger/request_sources/github/github.rb#475
  def file_url(organisation: T.unsafe(nil), repository: T.unsafe(nil), ref: T.unsafe(nil), branch: T.unsafe(nil), path: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/github/github.rb#370
  def find_position_in_diff(diff_lines, message, kind); end

  # source://danger//lib/danger/request_sources/github/github.rb#45
  def get_pr_from_branch(repo_name, branch_name, owner); end

  # Returns the value of attribute host.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def host=(_arg0); end

  # source://danger//lib/danger/request_sources/github/github.rb#126
  def ignored_violations_from_pr; end

  # source://danger//lib/danger/request_sources/github/github.rb#135
  def issue_comments; end

  # Returns the value of attribute issue_json.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def issue_json; end

  # Sets the attribute issue_json
  #
  # @param value the value to set the attribute issue_json to.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def issue_json=(_arg0); end

  # source://danger//lib/danger/request_sources/github/github.rb#446
  def markdown_link_to_message(message, hide_link); end

  # source://danger//lib/danger/request_sources/github/github.rb#297
  def messages_are_equivalent(m1, m2); end

  # @return [String] The organisation name, is nil if it can't be detected
  #
  # source://danger//lib/danger/request_sources/github/github.rb#457
  def organisation; end

  # See the tests for examples of data coming in looks like
  #
  # source://danger//lib/danger/request_sources/github/github.rb#434
  def parse_message_from_row(row); end

  # source://danger//lib/danger/request_sources/github/github.rb#79
  def pr_diff; end

  # Returns the value of attribute pr_json.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def pr_json; end

  # Sets the attribute pr_json
  #
  # @param value the value to set the attribute pr_json to.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def pr_json=(_arg0); end

  # source://danger//lib/danger/request_sources/github/github.rb#83
  def review; end

  # source://danger//lib/danger/request_sources/github/github.rb#60
  def scm; end

  # source://danger//lib/danger/request_sources/github/github.rb#99
  def setup_danger_branches; end

  # source://danger//lib/danger/request_sources/github/github.rb#254
  def submit_inline_comments!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), previous_violations: T.unsafe(nil), danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/github/github.rb#303
  def submit_inline_comments_for_kind!(kind, messages, diff_lines, danger_comments, previous_violations, danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/github/github.rb#210
  def submit_pull_request_status!(warnings: T.unsafe(nil), errors: T.unsafe(nil), details_url: T.unsafe(nil), danger_id: T.unsafe(nil)); end

  # Returns the value of attribute support_tokenless_auth.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def support_tokenless_auth; end

  # Sets the attribute support_tokenless_auth
  #
  # @param value the value to set the attribute support_tokenless_auth to.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def support_tokenless_auth=(_arg0); end

  # Sending data to GitHub
  #
  # source://danger//lib/danger/request_sources/github/github.rb#141
  def update_pull_request!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # Returns the value of attribute use_local_git.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def use_local_git; end

  # Sets the attribute use_local_git
  #
  # @param value the value to set the attribute use_local_git to.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def use_local_git=(_arg0); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/github/github.rb#56
  def validates_as_api_source?; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/github/github.rb#52
  def validates_as_ci?; end

  # Returns the value of attribute verify_ssl.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def verify_ssl; end

  # Sets the attribute verify_ssl
  #
  # @param value the value to set the attribute verify_ssl to.
  #
  # source://danger//lib/danger/request_sources/github/github.rb#15
  def verify_ssl=(_arg0); end

  private

  # source://danger//lib/danger/request_sources/github/github.rb#509
  def inline_violations_group(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/github/github.rb#528
  def merge_violations(*violation_groups); end

  # source://danger//lib/danger/request_sources/github/github.rb#500
  def regular_violations_group(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/github/github.rb#492
  def valid_access_token?; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/github/github.rb#496
  def valid_bearer_token?; end

  class << self
    # source://danger//lib/danger/request_sources/github/github.rb#17
    def env_vars; end

    # source://danger//lib/danger/request_sources/github/github.rb#21
    def optional_env_vars; end
  end
end

# source://danger//lib/danger/request_sources/github/github_review_resolver.rb#5
module Danger::RequestSources::GitHubSource; end

# source://danger//lib/danger/request_sources/github/github_review.rb#12
class Danger::RequestSources::GitHubSource::Review
  include ::Danger::Helpers::CommentsParsingHelper
  include ::Danger::Helpers::CommentsHelper

  # @return [Review] a new instance of Review
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#28
  def initialize(client, ci_source, review_json = T.unsafe(nil)); end

  # Returns the value of attribute body.
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#40
  def body; end

  # source://danger//lib/danger/request_sources/github/github_review.rb#83
  def fail(message, sticky = T.unsafe(nil), file = T.unsafe(nil), line = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#71
  def generated_by_danger?(danger_id = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#34
  def id; end

  # source://danger//lib/danger/request_sources/github/github_review.rb#87
  def markdown(message, file = T.unsafe(nil), line = T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/github/github_review.rb#75
  def message(message, sticky = T.unsafe(nil), file = T.unsafe(nil), line = T.unsafe(nil)); end

  # Returns the value of attribute review_json.
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#26
  def review_json; end

  # Starts the new review process
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#53
  def start; end

  # Returns the value of attribute status.
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#46
  def status; end

  # Submits the prepared review
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#61
  def submit; end

  # source://danger//lib/danger/request_sources/github/github_review.rb#79
  def warn(message, sticky = T.unsafe(nil), file = T.unsafe(nil), line = T.unsafe(nil)); end

  private

  # source://danger//lib/danger/request_sources/github/github_review.rb#99
  def generate_body(danger_id: T.unsafe(nil)); end

  # The only reason to request changes for the PR is to have errors from Danger
  # otherwise let's just notify user and we're done
  #
  # source://danger//lib/danger/request_sources/github/github_review.rb#95
  def generate_event(violations); end

  # source://danger//lib/danger/request_sources/github/github_review.rb#112
  def generate_general_violations; end
end

# @see https://developer.github.com/v3/pulls/reviews/ for all possible events
#
# source://danger//lib/danger/request_sources/github/github_review.rb#16
Danger::RequestSources::GitHubSource::Review::EVENT_APPROVE = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/request_sources/github/github_review.rb#18
Danger::RequestSources::GitHubSource::Review::EVENT_COMMENT = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/request_sources/github/github_review.rb#17
Danger::RequestSources::GitHubSource::Review::EVENT_REQUEST_CHANGES = T.let(T.unsafe(nil), String)

# Current review status, if the review has not been submitted yet -> STATUS_PENDING
#
# source://danger//lib/danger/request_sources/github/github_review.rb#21
Danger::RequestSources::GitHubSource::Review::STATUS_APPROVED = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/request_sources/github/github_review.rb#23
Danger::RequestSources::GitHubSource::Review::STATUS_COMMENTED = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/request_sources/github/github_review.rb#24
Danger::RequestSources::GitHubSource::Review::STATUS_PENDING = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/request_sources/github/github_review.rb#22
Danger::RequestSources::GitHubSource::Review::STATUS_REQUESTED_CHANGES = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/request_sources/github/github_review_resolver.rb#6
class Danger::RequestSources::GitHubSource::ReviewResolver
  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/request_sources/github/github_review_resolver.rb#11
    def same_body?(body1, body2); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/request_sources/github/github_review_resolver.rb#7
    def should_submit?(review, body); end
  end
end

# source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#4
class Danger::RequestSources::GitHubSource::ReviewUnsupported
  # @return [ReviewUnsupported] a new instance of ReviewUnsupported
  #
  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#7
  def initialize; end

  # Returns the value of attribute body.
  #
  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#5
  def body; end

  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#17
  def fail(message, sticky = T.unsafe(nil), file = T.unsafe(nil), line = T.unsafe(nil)); end

  # Returns the value of attribute id.
  #
  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#5
  def id; end

  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#19
  def markdown(message, file = T.unsafe(nil), line = T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#13
  def message(message, sticky = T.unsafe(nil), file = T.unsafe(nil), line = T.unsafe(nil)); end

  # Returns the value of attribute review_json.
  #
  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#5
  def review_json; end

  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#9
  def start; end

  # Returns the value of attribute status.
  #
  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#5
  def status; end

  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#11
  def submit; end

  # source://danger//lib/danger/request_sources/github/github_review_unsupported.rb#15
  def warn(message, sticky = T.unsafe(nil), file = T.unsafe(nil), line = T.unsafe(nil)); end
end

# source://danger//lib/danger/request_sources/gitlab.rb#8
class Danger::RequestSources::GitLab < ::Danger::RequestSources::RequestSource
  include ::Danger::Helpers::CommentsParsingHelper
  include ::Danger::Helpers::CommentsHelper

  # @return [GitLab] a new instance of GitLab
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#23
  def initialize(ci_source, environment); end

  # source://danger//lib/danger/request_sources/gitlab.rb#67
  def base_commit; end

  # source://danger//lib/danger/request_sources/gitlab.rb#31
  def client; end

  # Returns the value of attribute commits_json.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def commits_json; end

  # Sets the attribute commits_json
  #
  # @param value the value to set the attribute commits_json to.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def commits_json=(_arg0); end

  # source://danger//lib/danger/request_sources/gitlab.rb#268
  def delete_old_comments!(except: T.unsafe(nil), danger_id: T.unsafe(nil)); end

  # Returns the value of attribute dismiss_out_of_range_messages.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def dismiss_out_of_range_messages; end

  # Sets the attribute dismiss_out_of_range_messages
  #
  # @param value the value to set the attribute dismiss_out_of_range_messages to.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def dismiss_out_of_range_messages=(_arg0); end

  # source://danger//lib/danger/request_sources/gitlab.rb#295
  def dismiss_out_of_range_messages_for(kind); end

  # Returns the value of attribute endpoint.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def endpoint; end

  # Sets the attribute endpoint
  #
  # @param value the value to set the attribute endpoint to.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def endpoint=(_arg0); end

  # source://danger//lib/danger/request_sources/gitlab.rb#138
  def fetch_details; end

  # @return [String] A URL to the specific file, ready to be downloaded
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#306
  def file_url(organisation: T.unsafe(nil), repository: T.unsafe(nil), ref: T.unsafe(nil), branch: T.unsafe(nil), path: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/gitlab.rb#471
  def find_old_position_in_diff(changes, message); end

  # source://danger//lib/danger/request_sources/gitlab.rb#536
  def generate_addition_lines(diff); end

  # Returns the value of attribute host.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def host=(_arg0); end

  # source://danger//lib/danger/request_sources/gitlab.rb#143
  def ignored_violations_from_pr; end

  # source://danger//lib/danger/request_sources/gitlab.rb#323
  def inline_violations_group(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/gitlab.rb#522
  def is_out_of_range(changes, message); end

  # source://danger//lib/danger/request_sources/gitlab.rb#286
  def markdown_link_to_message(message, _); end

  # source://danger//lib/danger/request_sources/gitlab.rb#342
  def merge_violations(*violation_groups); end

  # source://danger//lib/danger/request_sources/gitlab.rb#106
  def mr_changed_paths; end

  # source://danger//lib/danger/request_sources/gitlab.rb#113
  def mr_changes; end

  # source://danger//lib/danger/request_sources/gitlab.rb#117
  def mr_closes_issues; end

  # source://danger//lib/danger/request_sources/gitlab.rb#71
  def mr_comments; end

  # source://danger//lib/danger/request_sources/gitlab.rb#92
  def mr_diff; end

  # source://danger//lib/danger/request_sources/gitlab.rb#88
  def mr_discussions; end

  # Returns the value of attribute mr_json.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def mr_json; end

  # Sets the attribute mr_json
  #
  # @param value the value to set the attribute mr_json to.
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#10
  def mr_json=(_arg0); end

  # @return [String] The organisation name, is nil if it can't be detected
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#291
  def organisation; end

  # source://danger//lib/danger/request_sources/gitlab.rb#314
  def regular_violations_group(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/gitlab.rb#63
  def scm; end

  # source://danger//lib/danger/request_sources/gitlab.rb#121
  def setup_danger_branches; end

  # source://danger//lib/danger/request_sources/gitlab.rb#348
  def submit_inline_comments!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), previous_violations: T.unsafe(nil), danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/gitlab.rb#393
  def submit_inline_comments_for_kind!(kind, messages, _diff_lines, danger_comments, previous_violations, danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/gitlab.rb#147
  def supports_inline_comments; end

  # source://danger//lib/danger/request_sources/gitlab.rb#158
  def update_pull_request!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/gitlab.rb#166
  def update_pull_request_with_inline_comments!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/gitlab.rb#228
  def update_pull_request_without_inline_comments!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#59
  def validates_as_api_source?; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/gitlab.rb#48
  def validates_as_ci?; end

  class << self
    # source://danger//lib/danger/request_sources/gitlab.rb#15
    def env_vars; end

    # source://danger//lib/danger/request_sources/gitlab.rb#19
    def optional_env_vars; end
  end
end

# source://danger//lib/danger/request_sources/gitlab.rb#12
Danger::RequestSources::GitLab::FIRST_GITLAB_GEM_WITH_VERSION_CHECK = T.let(T.unsafe(nil), Gem::Version)

# source://danger//lib/danger/request_sources/gitlab.rb#13
Danger::RequestSources::GitLab::FIRST_VERSION_WITH_INLINE_COMMENTS = T.let(T.unsafe(nil), Gem::Version)

# source://danger//lib/danger/request_sources/local_only.rb#6
class Danger::RequestSources::LocalOnly < ::Danger::RequestSources::RequestSource
  include ::Danger::Helpers::CommentsParsingHelper
  include ::Danger::Helpers::CommentsHelper

  # @return [LocalOnly] a new instance of LocalOnly
  #
  # source://danger//lib/danger/request_sources/local_only.rb#14
  def initialize(ci_source, _environment); end

  # Returns the value of attribute commits_json.
  #
  # source://danger//lib/danger/request_sources/local_only.rb#8
  def commits_json; end

  # Sets the attribute commits_json
  #
  # @param value the value to set the attribute commits_json to.
  #
  # source://danger//lib/danger/request_sources/local_only.rb#8
  def commits_json=(_arg0); end

  # source://danger//lib/danger/request_sources/local_only.rb#40
  def fetch_details; end

  # Returns the value of attribute mr_json.
  #
  # source://danger//lib/danger/request_sources/local_only.rb#8
  def mr_json; end

  # Sets the attribute mr_json
  #
  # @param value the value to set the attribute mr_json to.
  #
  # source://danger//lib/danger/request_sources/local_only.rb#8
  def mr_json=(_arg0); end

  # @return [String] The organisation name, is nil if it can't be detected
  #
  # source://danger//lib/danger/request_sources/local_only.rb#45
  def organisation; end

  # source://danger//lib/danger/request_sources/local_only.rb#26
  def scm; end

  # source://danger//lib/danger/request_sources/local_only.rb#30
  def setup_danger_branches; end

  # source://danger//lib/danger/request_sources/local_only.rb#42
  def update_pull_request!(_hash_needed); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/local_only.rb#22
  def validates_as_api_source?; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/local_only.rb#18
  def validates_as_ci?; end

  class << self
    # source://danger//lib/danger/request_sources/local_only.rb#10
    def env_vars; end
  end
end

# source://danger//lib/danger/request_sources/request_source.rb#5
class Danger::RequestSources::RequestSource
  # @return [RequestSource] a new instance of RequestSource
  #
  # source://danger//lib/danger/request_sources/request_source.rb#37
  def initialize(_ci_source, _environment); end

  # Returns the value of attribute ci_source.
  #
  # source://danger//lib/danger/request_sources/request_source.rb#8
  def ci_source; end

  # Sets the attribute ci_source
  #
  # @param value the value to set the attribute ci_source to.
  #
  # source://danger//lib/danger/request_sources/request_source.rb#8
  def ci_source=(_arg0); end

  # source://danger//lib/danger/request_sources/request_source.rb#80
  def fetch_details; end

  # source://danger//lib/danger/request_sources/request_source.rb#88
  def file_url(_organisation: T.unsafe(nil), _repository: T.unsafe(nil), _ref: T.unsafe(nil), _branch: T.unsafe(nil), _path: T.unsafe(nil)); end

  # Returns the value of attribute host.
  #
  # source://danger//lib/danger/request_sources/request_source.rb#64
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://danger//lib/danger/request_sources/request_source.rb#8
  def host=(_arg0); end

  # Returns the value of attribute ignored_violations.
  #
  # source://danger//lib/danger/request_sources/request_source.rb#68
  def ignored_violations; end

  # Sets the attribute ignored_violations
  #
  # @param value the value to set the attribute ignored_violations to.
  #
  # source://danger//lib/danger/request_sources/request_source.rb#8
  def ignored_violations=(_arg0); end

  # source://danger//lib/danger/request_sources/request_source.rb#41
  def inspect; end

  # source://danger//lib/danger/request_sources/request_source.rb#84
  def organisation; end

  # Returns the value of attribute scm.
  #
  # source://danger//lib/danger/request_sources/request_source.rb#60
  def scm; end

  # Sets the attribute scm
  #
  # @param value the value to set the attribute scm to.
  #
  # source://danger//lib/danger/request_sources/request_source.rb#8
  def scm=(_arg0); end

  # source://danger//lib/danger/request_sources/request_source.rb#76
  def setup_danger_branches; end

  # source://danger//lib/danger/request_sources/request_source.rb#92
  def update_build_status(_status); end

  # source://danger//lib/danger/request_sources/request_source.rb#72
  def update_pull_request!(_warnings: T.unsafe(nil), _errors: T.unsafe(nil), _messages: T.unsafe(nil), _markdowns: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/request_source.rb#56
  def validates_as_api_source?; end

  # @return [Boolean] whether scm.origins is a valid git repository or not
  #
  # source://danger//lib/danger/request_sources/request_source.rb#52
  def validates_as_ci?; end

  class << self
    # source://danger//lib/danger/request_sources/request_source.rb#23
    def available_request_sources; end

    # source://danger//lib/danger/request_sources/request_source.rb#31
    def available_source_names_and_envs; end

    # source://danger//lib/danger/request_sources/request_source.rb#10
    def env_vars; end

    # @private
    #
    # source://danger//lib/danger/request_sources/request_source.rb#18
    def inherited(child_class); end

    # source://danger//lib/danger/request_sources/request_source.rb#14
    def optional_env_vars; end

    # source://danger//lib/danger/request_sources/request_source.rb#27
    def source_name; end
  end
end

# source://danger//lib/danger/request_sources/request_source.rb#6
Danger::RequestSources::RequestSource::DANGER_REPO_NAME = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/request_sources/vsts.rb#6
class Danger::RequestSources::VSTS < ::Danger::RequestSources::RequestSource
  include ::Danger::Helpers::CommentsParsingHelper
  include ::Danger::Helpers::CommentsHelper

  # @return [VSTS] a new instance of VSTS
  #
  # source://danger//lib/danger/request_sources/vsts.rb#23
  def initialize(ci_source, environment); end

  # source://danger//lib/danger/request_sources/vsts.rb#43
  def client; end

  # source://danger//lib/danger/request_sources/vsts.rb#51
  def fetch_details; end

  # source://danger//lib/danger/request_sources/vsts.rb#47
  def host; end

  # source://danger//lib/danger/request_sources/vsts.rb#177
  def messages_are_equivalent(m1, m2); end

  # source://danger//lib/danger/request_sources/vsts.rb#71
  def organisation; end

  # source://danger//lib/danger/request_sources/vsts.rb#117
  def post_new_comment(comment); end

  # Returns the value of attribute pr_json.
  #
  # source://danger//lib/danger/request_sources/vsts.rb#8
  def pr_json; end

  # Sets the attribute pr_json
  #
  # @param value the value to set the attribute pr_json to.
  #
  # source://danger//lib/danger/request_sources/vsts.rb#8
  def pr_json=(_arg0); end

  # source://danger//lib/danger/request_sources/vsts.rb#39
  def scm; end

  # source://danger//lib/danger/request_sources/vsts.rb#55
  def setup_danger_branches; end

  # source://danger//lib/danger/request_sources/vsts.rb#141
  def submit_inline_comments!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), previous_violations: T.unsafe(nil), danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/vsts.rb#183
  def submit_inline_comments_for_kind!(kind, messages, danger_threads, previous_violations, danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/vsts.rb#121
  def update_old_comment(new_comment, danger_id: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/vsts.rb#75
  def update_pull_request!(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil), danger_id: T.unsafe(nil), new_comment: T.unsafe(nil), remove_previous_comments: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/vsts.rb#35
  def validates_as_api_source?; end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/vsts.rb#31
  def validates_as_ci?; end

  private

  # source://danger//lib/danger/request_sources/vsts.rb#252
  def inline_violations_group(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil)); end

  # source://danger//lib/danger/request_sources/vsts.rb#271
  def merge_violations(*violation_groups); end

  # source://danger//lib/danger/request_sources/vsts.rb#243
  def regular_violations_group(warnings: T.unsafe(nil), errors: T.unsafe(nil), messages: T.unsafe(nil), markdowns: T.unsafe(nil)); end

  class << self
    # source://danger//lib/danger/request_sources/vsts.rb#10
    def env_vars; end

    # source://danger//lib/danger/request_sources/vsts.rb#17
    def optional_env_vars; end
  end
end

# source://danger//lib/danger/request_sources/vsts_api.rb#8
class Danger::RequestSources::VSTSAPI
  # @return [VSTSAPI] a new instance of VSTSAPI
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#11
  def initialize(slug, pull_request_id, environment); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#43
  def credentials_given?; end

  # source://danger//lib/danger/request_sources/vsts_api.rb#56
  def fetch_last_comments; end

  # source://danger//lib/danger/request_sources/vsts_api.rb#51
  def fetch_pr_json; end

  # Returns the value of attribute host.
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#9
  def host; end

  # Sets the attribute host
  #
  # @param value the value to set the attribute host to.
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#9
  def host=(_arg0); end

  # source://danger//lib/danger/request_sources/vsts_api.rb#35
  def inspect; end

  # Returns the value of attribute min_api_version_for_comments.
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#9
  def min_api_version_for_comments; end

  # Sets the attribute min_api_version_for_comments
  #
  # @param value the value to set the attribute min_api_version_for_comments to.
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#9
  def min_api_version_for_comments=(_arg0); end

  # source://danger//lib/danger/request_sources/vsts_api.rb#61
  def post_comment(text); end

  # source://danger//lib/danger/request_sources/vsts_api.rb#82
  def post_inline_comment(text, file, line); end

  # Returns the value of attribute pr_api_endpoint.
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#9
  def pr_api_endpoint; end

  # Sets the attribute pr_api_endpoint
  #
  # @param value the value to set the attribute pr_api_endpoint to.
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#9
  def pr_api_endpoint=(_arg0); end

  # source://danger//lib/danger/request_sources/vsts_api.rb#47
  def pull_request(*_arg0); end

  # @return [Boolean]
  #
  # source://danger//lib/danger/request_sources/vsts_api.rb#28
  def supports_comments?; end

  # source://danger//lib/danger/request_sources/vsts_api.rb#114
  def update_comment(thread, id, new_comment); end

  private

  # source://danger//lib/danger/request_sources/vsts_api.rb#128
  def fetch_json(uri); end

  # source://danger//lib/danger/request_sources/vsts_api.rb#152
  def patch(uri, body); end

  # source://danger//lib/danger/request_sources/vsts_api.rb#136
  def post(uri, body); end

  # source://danger//lib/danger/request_sources/vsts_api.rb#124
  def use_ssl; end
end

# source://danger//lib/danger/commands/runner.rb#2
class Danger::Runner < ::CLAide::Command
  # @return [Runner] a new instance of Runner
  #
  # source://danger//lib/danger/commands/runner.rb#36
  def initialize(argv); end

  # Returns the value of attribute cork.
  #
  # source://danger//lib/danger/commands/runner.rb#28
  def cork; end

  # Sets the attribute cork
  #
  # @param value the value to set the attribute cork to.
  #
  # source://danger//lib/danger/commands/runner.rb#28
  def cork=(_arg0); end

  # source://danger//lib/danger/commands/runner.rb#72
  def run; end

  # source://danger//lib/danger/commands/runner.rb#52
  def validate!; end

  private

  # source://danger//lib/danger/commands/runner.rb#87
  def adjust_colored2_output(argv); end

  class << self
    # source://danger//lib/danger/commands/runner.rb#59
    def options; end
  end
end

# ### CI Setup
#
# Install dependencies and add a danger step to your screwdriver.yaml:
#
# ```yml
# jobs:
#   danger:
#     requires: [~pr, ~commit]
#     steps:
#       - setup: bundle install --path vendor
#       - danger: bundle exec danger
#     secrets:
#       - DANGER_GITHUB_API_TOKEN
# ```
#
# ### Token Setup
#
# Add the `DANGER_GITHUB_API_TOKEN` to your pipeline env as a
# [build secret](https://docs.screwdriver.cd/user-guide/configuration/secrets)
#
# source://danger//lib/danger/ci_source/screwdriver.rb#26
class Danger::Screwdriver < ::Danger::CI
  # @return [Screwdriver] a new instance of Screwdriver
  #
  # source://danger//lib/danger/ci_source/screwdriver.rb#40
  def initialize(env); end

  # source://danger//lib/danger/ci_source/screwdriver.rb#36
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/screwdriver.rb#27
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/screwdriver.rb#31
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# For Semaphore you will want to go to the settings page of the project. Inside "Build Settings"
# you should add `bundle exec danger` to the Setup thread. Note that Semaphore only provides
# the build environment variables necessary for Danger on PRs across forks.
#
# ### Token Setup
#
# You can add your `DANGER_GITHUB_API_TOKEN` inside the "Environment Variables" section in the settings.
#
# source://danger//lib/danger/ci_source/semaphore.rb#15
class Danger::Semaphore < ::Danger::CI
  # @return [Semaphore] a new instance of Semaphore
  #
  # source://danger//lib/danger/ci_source/semaphore.rb#31
  def initialize(env); end

  # source://danger//lib/danger/ci_source/semaphore.rb#27
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/semaphore.rb#16
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/semaphore.rb#20
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/commands/staging.rb#6
class Danger::Staging < ::Danger::Runner
  # @return [Staging] a new instance of Staging
  #
  # source://danger//lib/danger/commands/staging.rb#16
  def initialize(argv); end

  # source://danger//lib/danger/commands/staging.rb#37
  def run; end

  # source://danger//lib/danger/commands/staging.rb#30
  def validate!; end

  class << self
    # source://danger//lib/danger/commands/staging.rb#10
    def options; end
  end
end

# ### CI Setup
#
# You want to add `bundle exec danger` to your `build.sh` file to run  Danger at the
# end of your build.
#
# ### Token Setup
#
# As this is self-hosted, you will need to add the `DANGER_GITHUB_API_TOKEN` to your build user's ENV. The alternative
# is to pass in the token as a prefix to the command `DANGER_GITHUB_API_TOKEN="123" bundle exec danger`.
#
# source://danger//lib/danger/ci_source/surf.rb#15
class Danger::Surf < ::Danger::CI
  # @return [Surf] a new instance of Surf
  #
  # source://danger//lib/danger/ci_source/surf.rb#28
  def initialize(env); end

  # source://danger//lib/danger/ci_source/surf.rb#24
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/surf.rb#16
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/surf.rb#20
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/commands/systems.rb#2
class Danger::Systems < ::Danger::Runner; end

# ### CI Setup
#
# You need to go to your project settings. Then depending on the type of your build settings, you may need
# to add a new build step for Danger. You want to be able to run the command `bundle exec danger`, so
# the "Simple Command Runner" should be all you need to do that.
#
# ### Token + Environment Setup
#
# #### GitHub
#
# As this is self-hosted, you will need to add the `DANGER_GITHUB_API_TOKEN` to your build user's ENV. The alternative
# is to pass in the token as a prefix to the command `DANGER_GITHUB_API_TOKEN="123" bundle exec danger`.
#
# However, you will need to find a way to add the environment vars: `GITHUB_REPO_SLUG`, `GITHUB_PULL_REQUEST_ID` and
# `GITHUB_REPO_URL`. These are not added by default. You can manually add `GITHUB_REPO_SLUG` and `GITHUB_REPO_URL`
#  as build parameters or by exporting them inside your Simple Command Runner.
#
# As for `GITHUB_PULL_REQUEST_ID`, TeamCity provides the `%teamcity.build.branch%` variable which is in the format
# `PR_NUMBER/merge`. You can slice the Pull Request ID out by doing the following:
#
# ```sh
# branch="%teamcity.build.branch%"
# export GITHUB_PULL_REQUEST_ID=(${branch//\// })
# ```
#
# Or if you are using the pull request feature you can set an environment parameter called `GITHUB_PULL_REQUEST_ID`
# to the value of: `%teamcity.pullRequest.number`
#
# #### GitLab
#
# As this is self-hosted, you will need to add the `DANGER_GITLAB_API_TOKEN` to your build user's ENV. The alternative
# is to pass in the token as a prefix to the command `DANGER_GITLAB_API_TOKEN="123" bundle exec danger`.
#
# However, you will need to find a way to add the environment vars: `GITLAB_REPO_SLUG`, `GITLAB_PULL_REQUEST_ID` and
# `GITLAB_REPO_URL`. These are not added by default. You could do this via the GitLab API potentially.
#
# We would love some advice on improving this setup.
#
# #### BitBucket Cloud
#
# You will need to add the following environment variables as build parameters or by exporting them inside your
# Simple Command Runner.
#
#
# - `BITBUCKET_REPO_SLUG`
# - `BITBUCKET_REPO_URL`
#
# - `DANGER_BITBUCKETCLOUD_USERNAME`
# - `DANGER_BITBUCKETCLOUD_PASSWORD`
#
# or
#
# - `DANGER_BITBUCKETCLOUD_OAUTH_KEY`
# - `DANGER_BITBUCKETCLOUD_OAUTH_SECRET`
#
# You will also need to set the `BITBUCKET_BRANCH_NAME` environment variable.
# TeamCity provides `%teamcity.build.branch%`, which you can use at the top of your Simple Command Runner:
#
# ```sh
# export BITBUCKET_BRANCH_NAME="%teamcity.build.branch%"
# ```
#
# #### BitBucket Server
#
# You will need to add the following environment variables as build parameters or by exporting them inside your
# Simple Command Runner.
#
# - `DANGER_BITBUCKETSERVER_USERNAME`
# - `DANGER_BITBUCKETSERVER_PASSWORD`
# - `DANGER_BITBUCKETSERVER_HOST`
# - `BITBUCKETSERVER_REPO_SLUG`
# - `BITBUCKETSERVER_PULL_REQUEST_ID`
# - `BITBUCKETSERVER_REPO_URL`
#
# source://danger//lib/danger/ci_source/teamcity.rb#80
class Danger::TeamCity < ::Danger::CI
  # @return [TeamCity] a new instance of TeamCity
  #
  # source://danger//lib/danger/ci_source/teamcity.rb#111
  def initialize(env); end

  # source://danger//lib/danger/ci_source/teamcity.rb#107
  def supported_request_sources; end

  private

  # This is a little hacky, because Bitbucket doesn't provide us a PR id
  #
  # source://danger//lib/danger/ci_source/teamcity.rb#153
  def bitbucket_pr_from_env(env); end

  # source://danger//lib/danger/ci_source/teamcity.rb#146
  def extract_bitbucket_server_variables!(env); end

  # source://danger//lib/danger/ci_source/teamcity.rb#140
  def extract_bitbucket_variables!(env); end

  # source://danger//lib/danger/ci_source/teamcity.rb#128
  def extract_github_variables!(env); end

  # source://danger//lib/danger/ci_source/teamcity.rb#134
  def extract_gitlab_variables!(env); end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/teamcity.rb#90
    def validates_as_bitbucket_cloud_pr?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/teamcity.rb#94
    def validates_as_bitbucket_server_pr?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/teamcity.rb#99
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/teamcity.rb#82
    def validates_as_github_pr?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/teamcity.rb#86
    def validates_as_gitlab_pr?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/teamcity.rb#103
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
# You need to edit your `.travis.yml` to include `bundle exec danger`. If you already have
# a `script:` section then we recommend adding this command at the end of the script step: `- bundle exec danger`.
#
#  Otherwise, add a `before_script` step to the root of the `.travis.yml` with `bundle exec danger`
#
#  ```ruby
#    before_script:
#      - bundle exec danger
#  ```
#
# Adding this to your `.travis.yml` allows Danger to fail your build, both on the TravisCI website and within your Pull Request.
# With that set up, you can edit your job to add `bundle exec danger` at the build action.
#
# _Note:_ Travis CI defaults to using an older version of Ruby, so you may need to add `rvm: 2.0.0` to the root your `.travis.yml`.
#
# ### Token Setup
#
# You need to add the `DANGER_GITHUB_API_TOKEN` environment variable, to do this,
# go to your repo's settings, which should look like: `https://travis-ci.org/[user]/[repo]/settings`.
#
# If you have an open source project, you should ensure "Display value in build log" enabled, so that PRs from forks work.
#
# source://danger//lib/danger/ci_source/travis.rb#29
class Danger::Travis < ::Danger::CI
  # @return [Travis] a new instance of Travis
  #
  # source://danger//lib/danger/ci_source/travis.rb#43
  def initialize(env); end

  # source://danger//lib/danger/ci_source/travis.rb#39
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/travis.rb#30
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/travis.rb#34
    def validates_as_pr?(env); end
  end
end

# source://danger//lib/danger/version.rb#2
Danger::VERSION = T.let(T.unsafe(nil), String)

# source://danger//lib/danger/danger_core/messages/violation.rb#6
class Danger::Violation < ::Danger::BaseMessage
  # @raise [ArgumentError]
  # @return [Violation] a new instance of Violation
  #
  # source://danger//lib/danger/danger_core/messages/violation.rb#10
  def initialize(message, sticky, file = T.unsafe(nil), line = T.unsafe(nil), type: T.unsafe(nil)); end

  # source://danger//lib/danger/danger_core/messages/violation.rb#35
  def <=>(other); end

  # source://danger//lib/danger/danger_core/messages/violation.rb#17
  def ==(other); end

  # source://danger//lib/danger/danger_core/messages/violation.rb#27
  def hash; end

  # Returns the value of attribute sticky.
  #
  # source://danger//lib/danger/danger_core/messages/violation.rb#8
  def sticky; end

  # Sets the attribute sticky
  #
  # @param value the value to set the attribute sticky to.
  #
  # source://danger//lib/danger/danger_core/messages/violation.rb#8
  def sticky=(_arg0); end

  # source://danger//lib/danger/danger_core/messages/violation.rb#43
  def to_s; end
end

# source://danger//lib/danger/danger_core/messages/violation.rb#7
Danger::Violation::VALID_TYPES = T.let(T.unsafe(nil), Array)

# ### CI Setup
#
# In order to work with Xcode Cloud and Danger, you will need to add `bundle exec danger` to
# the `ci_scripts/ci_post_xcodebuild.sh` (Xcode Cloud's expected filename for a post-action build script).
# More details and documentation on Xcode Cloud configuration can be found [here](https://developer.apple.com/documentation/xcode/writing-custom-build-scripts).
#
# ### Token Setup
#
# You will need to add the `DANGER_GITHUB_API_TOKEN` to your build environment.
# If running on GitHub Enterprise, make sure you also set the expected values for
# both `DANGER_GITHUB_API_HOST` and `DANGER_GITHUB_HOST`.
#
# source://danger//lib/danger/ci_source/xcode_cloud.rb#14
class Danger::XcodeCloud < ::Danger::CI
  # @return [XcodeCloud] a new instance of XcodeCloud
  #
  # source://danger//lib/danger/ci_source/xcode_cloud.rb#32
  def initialize(env); end

  # source://danger//lib/danger/ci_source/xcode_cloud.rb#23
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/xcode_cloud.rb#15
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/xcode_cloud.rb#19
    def validates_as_pr?(env); end
  end
end

# ### CI Setup
#
# If you're bold enough to use Xcode Bots. You will need to use [Buildasaur](https://github.com/czechboy0/Buildasaur)
# in order to work with Danger. This will set up your build environment for you, as the name of the bot contains all
# of the environment variables that Danger needs to work.
#
# With Buildasaur set up, you can edit your job to add `bundle exec danger` as a post-action build script.
#
# ### Token Setup
#
# As this is self-hosted, you will need to add the `DANGER_GITHUB_API_TOKEN` to your build user's ENV. The alternative
# is to pass in the token as a prefix to the command `DANGER_GITHUB_API_TOKEN="123" bundle exec danger`.`.
#
# source://danger//lib/danger/ci_source/xcode_server.rb#19
class Danger::XcodeServer < ::Danger::CI
  # @return [XcodeServer] a new instance of XcodeServer
  #
  # source://danger//lib/danger/ci_source/xcode_server.rb#37
  def initialize(env); end

  # source://danger//lib/danger/ci_source/xcode_server.rb#29
  def supported_request_sources; end

  class << self
    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/xcode_server.rb#20
    def validates_as_ci?(env); end

    # @return [Boolean]
    #
    # source://danger//lib/danger/ci_source/xcode_server.rb#24
    def validates_as_pr?(env); end
  end
end

# Find max_num_violations in lib/danger/comment_generators/github.md.erb.
#
# source://danger//lib/danger/helpers/find_max_num_violations.rb#2
class FindMaxNumViolations
  # @return [FindMaxNumViolations] a new instance of FindMaxNumViolations
  #
  # source://danger//lib/danger/helpers/find_max_num_violations.rb#6
  def initialize(violations); end

  # source://danger//lib/danger/helpers/find_max_num_violations.rb#10
  def call; end

  private

  # Returns the value of attribute violations.
  #
  # source://danger//lib/danger/helpers/find_max_num_violations.rb#30
  def violations; end
end

# Save ~ 5000 for contents other than violations to avoid exceeded 65536 max comment length limit.
#
# source://danger//lib/danger/helpers/find_max_num_violations.rb#4
FindMaxNumViolations::LIMIT = T.let(T.unsafe(nil), Integer)

# source://danger//lib/danger/request_sources/support/get_ignored_violation.rb#1
class GetIgnoredViolation
  # @return [GetIgnoredViolation] a new instance of GetIgnoredViolation
  #
  # source://danger//lib/danger/request_sources/support/get_ignored_violation.rb#4
  def initialize(body); end

  # source://danger//lib/danger/request_sources/support/get_ignored_violation.rb#8
  def call; end

  private

  # Returns the value of attribute body.
  #
  # source://danger//lib/danger/request_sources/support/get_ignored_violation.rb#16
  def body; end
end

# source://danger//lib/danger/request_sources/support/get_ignored_violation.rb#2
GetIgnoredViolation::IGNORE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://danger//lib/danger/scm_source/git_repo.rb#190
module Git
  # source://git/1.18.0/lib/git.rb#46
  def config(name = T.unsafe(nil), value = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git.rb#68
  def global_config(name = T.unsafe(nil), value = T.unsafe(nil)); end

  class << self
    # source://git/1.18.0/lib/git.rb#100
    def bare(git_dir, options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git.rb#187
    def clone(repository_url, directory = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git.rb#64
    def config; end

    # source://git/1.18.0/lib/git.rb#60
    def configure; end

    # source://git/1.18.0/lib/git.rb#229
    def default_branch(repository, options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git.rb#240
    def export(repository, name, options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git.rb#253
    def global_config(name = T.unsafe(nil), value = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git.rb#317
    def init(directory = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git.rb#329
    def ls_remote(location = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git.rb#377
    def open(working_dir, options = T.unsafe(nil)); end
  end
end

# source://danger//lib/danger/scm_source/git_repo.rb#191
class Git::Base
  # source://git/1.18.0/lib/git/base.rb#111
  def initialize(options = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#275
  def add(paths = T.unsafe(nil), **options); end

  # source://git/1.18.0/lib/git/base.rb#436
  def add_remote(name, url, opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#483
  def add_tag(name, *options); end

  # source://git/1.18.0/lib/git/base.rb#507
  def apply(file); end

  # source://git/1.18.0/lib/git/base.rb#513
  def apply_mail(file); end

  # source://git/1.18.0/lib/git/base.rb#494
  def archive(treeish, file = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#612
  def cat_file(objectish); end

  # source://git/1.18.0/lib/git/base.rb#133
  def chdir; end

  # source://git/1.18.0/lib/git/base.rb#358
  def checkout(*args, **options); end

  # source://git/1.18.0/lib/git/base.rb#363
  def checkout_file(version, file); end

  # source://git/1.18.0/lib/git/base.rb#551
  def checkout_index(opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#304
  def clean(opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#345
  def commit(message, opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#352
  def commit_all(message, opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#144
  def config(name = T.unsafe(nil), value = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#617
  def current_branch; end

  # source://git/1.18.0/lib/git/base.rb#489
  def delete_tag(name); end

  # source://git/1.18.0/lib/git/base.rb#323
  def describe(committish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#160
  def dir; end

  # source://git/1.18.0/lib/git/base.rb#407
  def each_conflict(&block); end

  # source://git/1.18.0/lib/git/base.rb#369
  def fetch(remote = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#503
  def gc; end

  # source://git/1.18.0/lib/git/base.rb#252
  def grep(string, path_limiter = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#165
  def index; end

  # source://git/1.18.0/lib/git/base.rb#209
  def is_branch?(branch); end

  # source://git/1.18.0/lib/git/base.rb#197
  def is_local_branch?(branch); end

  # source://git/1.18.0/lib/git/base.rb#203
  def is_remote_branch?(branch); end

  # source://git/1.18.0/lib/git/base.rb#217
  def lib; end

  # source://git/1.18.0/lib/git/base.rb#573
  def ls_files(location = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#608
  def ls_tree(objectish); end

  # source://git/1.18.0/lib/git/base.rb#402
  def merge(branch, message = T.unsafe(nil), opts = T.unsafe(nil)); end

  # Use git-merge-base https://git-scm.com/docs/git-merge-base to
  # find as good common ancestors as possible for a merge
  #
  # source://danger//lib/danger/scm_source/git_repo.rb#194
  def merge_base(commit1, commit2, *other_commits); end

  # source://git/1.18.0/lib/git/base.rb#417
  def pull(remote = T.unsafe(nil), branch = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#395
  def push(*args, **options); end

  # source://git/1.18.0/lib/git/base.rb#555
  def read_tree(treeish, opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#422
  def remotes; end

  # source://git/1.18.0/lib/git/base.rb#280
  def remove(path = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#456
  def remove_remote(name); end

  # source://git/1.18.0/lib/git/base.rb#499
  def repack; end

  # source://git/1.18.0/lib/git/base.rb#171
  def repo; end

  # source://git/1.18.0/lib/git/base.rb#176
  def repo_size; end

  # source://git/1.18.0/lib/git/base.rb#287
  def reset(commitish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#292
  def reset_hard(commitish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#333
  def revert(commitish = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#604
  def revparse(objectish); end

  # source://git/1.18.0/lib/git/base.rb#280
  def rm(path = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#186
  def set_index(index_file, check = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#447
  def set_remote_url(name, url); end

  # source://git/1.18.0/lib/git/base.rb#191
  def set_working(work_dir, check = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#522
  def show(objectish = T.unsafe(nil), path = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#461
  def tags; end

  # source://git/1.18.0/lib/git/base.rb#568
  def update_ref(branch, commit); end

  # source://git/1.18.0/lib/git/base.rb#528
  def with_index(new_index); end

  # source://git/1.18.0/lib/git/base.rb#536
  def with_temp_index(&blk); end

  # source://git/1.18.0/lib/git/base.rb#588
  def with_temp_working(&blk); end

  # source://git/1.18.0/lib/git/base.rb#577
  def with_working(work_dir); end

  # source://git/1.18.0/lib/git/base.rb#563
  def write_and_commit_tree(opts = T.unsafe(nil)); end

  # source://git/1.18.0/lib/git/base.rb#559
  def write_tree; end

  class << self
    # source://git/1.18.0/lib/git/base.rb#15
    def bare(git_dir, options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git/base.rb#21
    def clone(repository_url, directory, options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git/base.rb#35
    def config; end

    # source://git/1.18.0/lib/git/base.rb#40
    def init(directory = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git/base.rb#79
    def open(working_dir, options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git/base.rb#28
    def repository_default_branch(repository, options = T.unsafe(nil)); end

    # source://git/1.18.0/lib/git/base.rb#66
    def root_of_worktree(working_dir); end

    private

    # source://git/1.18.0/lib/git/base.rb#705
    def normalize_index(options); end

    # source://git/1.18.0/lib/git/base.rb#633
    def normalize_paths(options, default_working_directory: T.unsafe(nil), default_repository: T.unsafe(nil), bare: T.unsafe(nil)); end

    # source://git/1.18.0/lib/git/base.rb#685
    def normalize_repository(options, default:, bare: T.unsafe(nil)); end

    # source://git/1.18.0/lib/git/base.rb#652
    def normalize_working_directory(options, default:, bare: T.unsafe(nil)); end
  end
end

# source://danger//lib/danger/core_ext/string.rb#1
class String
  include ::Comparable

  # @return [String] the plural form of self determined by count
  #
  # source://danger//lib/danger/core_ext/string.rb#3
  def danger_pluralize(count); end

  # @return [String] truncates string with ellipsis when exceeding the limit
  #
  # source://danger//lib/danger/core_ext/string.rb#17
  def danger_truncate(limit); end

  # @return [String] converts to underscored, lowercase form
  #
  # source://danger//lib/danger/core_ext/string.rb#8
  def danger_underscore; end
end
